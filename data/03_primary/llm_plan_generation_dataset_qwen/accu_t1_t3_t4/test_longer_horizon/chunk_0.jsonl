{"domain": "barman", "instance_id": "40", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the actions for a robotic bartender to prepare cocktails. The bartender has two hands and works with various containers and ingredients to mix and serve drinks.\nHere are the actions that can be performed:\nGrasp a container (shot or shaker) from the table.\nLeave a container on the table.\nFill-shot with an ingredient from a dispenser.\nRefill-shot with the same ingredient it contained before.\nEmpty a shot.\nClean a shot.\nPour the content of a shot into a clean shaker.\nPour the content of a shot into a used shaker that already contain some ingredient.\nEmpty a shaker.\nClean a shaker.\nShake the shaker to mix the ingredients.\nPour the content of a shaker into a shot.\nThe following are the restrictions on the actions:\nWe can grasp a container only if the container is on the table.\nWe can grasp a container only our hand is empty.\nOnce we grasp a container, we are holding the container and our hand is no longer empty.\nWe can leave a container on the table only if we are holding the container.\nOnce we leave a container on the table, the container is on the table and we are no longer holding the container.\nOnce we leave a container on the table, our hand becomes empty.\nWe can fill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nWe can fill a shot with an ingredient only if the shot is empty and clean.\nOnce we fill a shot with an ingredient, the shot is no longer empty and clean.\nOnce we fill a shot with an ingredient, the shot contains the ingredient and we say that the shot is used to store the ingredient.\nWe can refill a shot with an ingredient only if the shot is used to store the same ingredient.\nWe can refill a shot with an ingredient only if the shot is currently empty.\nWe can refill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nOnce we refill a shot with an ingredient, the shot contains the ingredient and is no longer empty.\nWe can empty a shot only if the shot contains some ingredient.\nWe can empty a shot only if we are holding the shot.\nOnce we empty a shot, the shot no more contains any ingredient and is empty.\nWe can clean a shot only if we are holding the shot and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shot only if the shot is empty but is used to store some ingredient.\nOnce we clean a shot, the shot is clean and is considered not used to store any ingredient.\nWe can pour the content of a shot into a clean shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a clean shaker only if the shaker is clean and empty.\nOnce we pour the content of a shot into a clean shaker, the shaker contains the ingredient and thus the shaker is no longer empty.\nOnce we pour the content of a shot into a clean shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a clean shaker, the shaker's fill level will increment one level.\nWe can pour the content of a shot into a used shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a used shaker only if the shaker has not been shaken yet.\nOnce we pour the content of a shot into a used shaker, the shaker contains the ingredients.\nOnce we pour the content of a shot into a used shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a used shaker, the shaker's fill level will increment one level.\nWe can empty a shaker only if we are holding the shaker.\nWe can empty a shaker only if the shaker contains some cocktails.\nWe can empty a shaker only if the shaker has been shaken.\nOnce we empty a shaker, the shaker no longer contains any cocktails and is empty.\nOnce we empty a shaker, the shaker's fill level will become zero.\nOnce we empty a shaker, the shaker is considered not shaken.\nWe can clean a shaker only if we are holding the shaker and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shaker only if the shaker is empty.\nOnce we clean a shaker, the shaker is clean.\nWe can shake a shaker only if we are holding the shaker and the shaker contains two types of ingredients.\nWe can shake a shaker only if the shaker has not yet shaken.\nOnce we shake a shaker, the shaker contains a cocktail that is a mixture of the two ingredients.\nOnce we shake a shaker, the shaker is considered shaken.\nWe can pour the content of a shaker into a shot only if we are holding the shaker and the shaker contains a cocktail.\nWe can pour the content of a shaker into a shot only if the shot is empty and clean.\nOnce we pour the content of a shaker into a shot, the shot contains the cocktail and the shot is not empty.\nOnce we pour the content of a shaker into a shot, the shot is not clean.\nOnce we pour the content of a shaker into a shot, the shaker's fill level will decrement one level.", "input": "As initial conditions I have that, shaker_368 is on the table, shaker_368's fill level is at level_0, shaker_368 is empty, dispenser_236 dispenses ingredient_354, cocktail_2 has ingredient_303 as its first ingredient, level_2 is the next level after level_1, left_hand is empty, shot_464 is on the table, cocktail_1 has ingredient_354 as its second ingredient, cocktail_2 has ingredient_354 as its second ingredient, shot_474 is empty, right_hand is empty, shot_165 is clean, cocktail_1 has ingredient_303 as its first ingredient, shot_474 is clean, shot_474 is on the table, shot_165 is empty, shaker_368 is clean, dispenser_372 dispenses ingredient_303, shot_464 is empty, shaker_368's zero fill level is at level_0, shot_165 is on the table, shot_464 is clean, level_1 is the next level after level_0.\nMy goal is to have that shot_474 contains cocktail_2, shot_464 contains cocktail_1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> We can grasp shot_165 only if the shot_165 is on the table. We can grasp a shot_165 only left_hand is empty. </PRECON> grasp the shot_165 using left_hand <EFFECT> Once we grasp a shot_165, we are holding the shot_165 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can fill a shot_165 with an ingredient_303 only if the shot_165 is empty and clean. We can fill a shot_165 with an ingredient_303 only if one left_hand is holding the shot_165 and the other right_hand is empty to manipulate the dispenser_372 that contains the ingredient_303. </PRECON> fill the shot_165 on left_hand with ingredient_303 using dispenser_372 when right_hand is empty <EFFECT> Once we fill a shot_165 with an ingredient_303, the shot_165 contains the ingredient_303 and we say that the shot_165 is used to store the ingredient_303. Once we fill a shot_165 with an ingredient_303, the shot_165 is no longer empty and clean. </EFFECT> \n <PRECON> We can pour the ingredient_303 of a shot_165 into a clean shaker_368 only if we are holding the shot_165 and the shot_165 contains some ingredient_303. We can pour the ingredient_303 of a shot_165 into a clean shaker_368 only if the shaker_368 is clean and empty. </PRECON> pour from shot_165 containing ingredient_303 to clean shaker_368 using left_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_303 of a shot_165 into a clean shaker_368, the shaker_368 contains the ingredient_303 and thus the shaker_368 is no longer empty. Once we pour the ingredient_303 of a shot_165 into a clean shaker_368, the shot_165 does not contain any ingredient_303 and is empty. Once we pour the ingredient_303 of a shot_165 into a clean shaker_368, the shaker_368's fill level level_0 will increment one level level_1. </EFFECT> \n <PRECON> We can clean a shot_165 only if we are holding the shot_165 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shot_165 only if the shot_165 is empty but is used to store some ingredient_303. </PRECON> clean the shot_165 on left_hand used for ingredient_303 when right_hand is empty <EFFECT> Once we clean a shot_165, the shot_165 is clean and is considered not used to store any ingredient_303. </EFFECT> \n <PRECON> We can fill a shot_165 with an ingredient_354 only if the shot_165 is empty and clean. We can fill a shot_165 with an ingredient_354 only if one left_hand is holding the shot_165 and the other right_hand is empty to manipulate the dispenser_236 that contains the ingredient_354. </PRECON> fill the shot_165 on left_hand with ingredient_354 using dispenser_236 when right_hand is empty <EFFECT> Once we fill a shot_165 with an ingredient_354, the shot_165 contains the ingredient_354 and we say that the shot_165 is used to store the ingredient_354. Once we fill a shot_165 with an ingredient_354, the shot_165 is no longer empty and clean. </EFFECT> \n <PRECON> We can pour the ingredient_354 of a shot_165 into a used shaker_368 only if the shaker_368 has not been shaken yet. We can pour the ingredient_354 of a shot_165 into a used shaker_368 only if we are holding the shot_165 and the shot_165 contains some ingredient_354. </PRECON> pour from shot_165 containing ingredient_354 to used shaker_368 using left_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_354 of a shot_165 into a used shaker_368, the shaker_368 contains the ingredient_354. Once we pour the ingredient_354 of a shot_165 into a used shaker_368, the shaker_368's fill level level_1 will increment one level level_2. Once we pour the ingredient_354 of a shot_165 into a used shaker_368, the shot_165 does not contain any ingredient_354 and is empty. </EFFECT> \n <PRECON> We can fill a shot_464 with an ingredient_354 only if the shot_464 is empty and clean. We can fill a shot_464 with an ingredient_354 only if one right_hand is holding the shot_464 and the other left_hand is empty to manipulate the dispenser_236 that contains the ingredient_354. </PRECON> fill the shot_464 on right_hand with ingredient_354 using dispenser_236 when left_hand is empty <EFFECT> Once we fill a shot_464 with an ingredient_354, the shot_464 contains the ingredient_354 and we say that the shot_464 is used to store the ingredient_354. Once we fill a shot_464 with an ingredient_354, the shot_464 is no longer empty and clean. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shot_165 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shot_165 becomes empty. </EFFECT> \n <PRECON> We can grasp shaker_368 only if the shaker_368 is on the table. We can grasp a shaker_368 only left_hand is empty. </PRECON> grasp the shaker_368 using left_hand <EFFECT> Once we grasp a shaker_368, we are holding the shaker_368 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can shake a shaker_368 only if the shaker_368 has not yet shaken. We can shake a shaker_368 only if we are holding the shaker_368 and the shaker_368 contains two types ingredient_303 and ingredient_354. </PRECON> shake shaker_368 on left_hand containing ingredient_303 and ingredient_354 to get cocktail_2 when right_hand is empty <EFFECT> Once we shake a shaker_368, the shaker_368 is considered shaken. Once we shake a shaker_368, the shaker_368 contains a cocktail_2 that is a mixture of the two ingredient_303 and ingredient_354. </EFFECT> \n <PRECON> We can fill a shot_464 with an ingredient_303 only if the shot_464 is empty and clean. We can fill a shot_464 with an ingredient_303 only if one right_hand is holding the shot_464 and the other left_hand is empty to manipulate the dispenser_372 that contains the ingredient_303. </PRECON> fill the shot_464 on right_hand with ingredient_303 using dispenser_372 when left_hand is empty <EFFECT> Once we fill a shot_464 with an ingredient_303, the shot_464 contains the ingredient_303 and we say that the shot_464 is used to store the ingredient_303. Once we fill a shot_464 with an ingredient_303, the shot_464 is no longer empty and clean. </EFFECT> WRONG \n <PRECON> We can pour the cocktail_2 of a shaker_368 into a shot_474 only if we are holding the shaker_368 and the shaker_368 contains a cocktail_2. We can pour the cocktail_2 of a shaker_368 into a shot_474 only if the shot_474 is empty and clean. </PRECON> pour from shaker_368 to shot_474 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_368 into a shot_474, the shot_474 is not clean. Once we pour the cocktail_2 of a shaker_368 into a shot_474, the shaker_368's fill level level_2 will decrement one level level_1. Once we pour the cocktail_2 of a shaker_368 into a shot_474, the shot_474 contains the cocktail_2 and the shot_474 is not empty. </EFFECT> \n <PRECON> We can empty a shaker_368 only if we are holding the shaker_368. We can empty a shaker_368 only if the shaker_368 has been shaken. We can empty a shaker_368 only if the shaker_368 contains some cocktail_2. </PRECON> empty shaker_368 containing cocktail_2 using left_hand from level_1 to level_0 <EFFECT> Once we empty a shaker_368, the shaker_368's fill level will become level_0. Once we empty a shaker_368, the shaker_368 is considered not shaken. Once we empty a shaker_368, the shaker_368 no longer contains any cocktail_2 and is empty. </EFFECT> \n <PRECON> We can shake a shaker_368 only if the shaker_368 has not yet shaken. We can shake a shaker_368 only if we are holding the shaker_368 and the shaker_368 contains two types ingredient_303 and ingredient_354. </PRECON> shake shaker_368 on left_hand containing ingredient_303 and ingredient_354 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_368, the shaker_368 is considered shaken. Once we shake a shaker_368, the shaker_368 contains a cocktail_1 that is a mixture of the two ingredient_303 and ingredient_354. </EFFECT> WRONG \n <PRECON> We can clean a shaker_368 only if we are holding the shaker_368 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shaker_368 only if the shaker_368 is empty. </PRECON> clean shaker_368 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_368, the shaker_368 is clean. </EFFECT> \n <PRECON> We can grasp shot_464 only if the shot_464 is on the table. We can grasp a shot_464 only right_hand is empty. </PRECON> grasp the shot_464 using right_hand <EFFECT> Once we grasp a shot_464, we are holding the shot_464 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_368 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_368 becomes empty. </EFFECT> \n <PRECON> We can shake a shaker_368 only if the shaker_368 has not yet shaken. We can shake a shaker_368 only if we are holding the shaker_368 and the shaker_368 contains two types ingredient_303 and ingredient_354. </PRECON> shake shaker_368 on left_hand containing ingredient_303 and ingredient_354 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_368, the shaker_368 is considered shaken. Once we shake a shaker_368, the shaker_368 contains a cocktail_1 that is a mixture of the two ingredient_303 and ingredient_354. </EFFECT> WRONG \n <PRECON> We can fill a shot_464 with an ingredient_354 only if the shot_464 is empty and clean. We can fill a shot_464 with an ingredient_354 only if one right_hand is holding the shot_464 and the other left_hand is empty to manipulate the dispenser_236 that contains the ingredient_354. </PRECON> fill the shot_464 on right_hand with ingredient_354 using dispenser_236 when left_hand is empty <EFFECT> Once we fill a shot_464 with an ingredient_354, the shot_464 contains the ingredient_354 and we say that the shot_464 is used to store the ingredient_354. Once we fill a shot_464 with an ingredient_354, the shot_464 is no longer empty and clean. </EFFECT> \n <PRECON> We can pour the ingredient_354 of a shot_464 into a clean shaker_368 only if we are holding the shot_464 and the shot_464 contains some ingredient_354. We can pour the ingredient_354 of a shot_464 into a clean shaker_368 only if the shaker_368 is clean and empty. </PRECON> pour from shot_464 containing ingredient_354 to clean shaker_368 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_354 of a shot_464 into a clean shaker_368, the shaker_368 contains the ingredient_354 and thus the shaker_368 is no longer empty. Once we pour the ingredient_354 of a shot_464 into a clean shaker_368, the shot_464 does not contain any ingredient_354 and is empty. Once we pour the ingredient_354 of a shot_464 into a clean shaker_368, the shaker_368's fill level level_0 will increment one level level_1. </EFFECT> \n <PRECON> We can clean a shot_464 only if we are holding the shot_464 and another left_hand is empty to manipulate the cleaning equipment. We can clean a shot_464 only if the shot_464 is empty but is used to store some ingredient_354. </PRECON> clean the shot_464 on right_hand used for ingredient_354 when left_hand is empty <EFFECT> Once we clean a shot_464, the shot_464 is clean and is considered not used to store any ingredient_354. </EFFECT> \n <PRECON> We can fill a shot_464 with an ingredient_303 only if the shot_464 is empty and clean. We can fill a shot_464 with an ingredient_303 only if one right_hand is holding the shot_464 and the other left_hand is empty to manipulate the dispenser_372 that contains the ingredient_303. </PRECON> fill the shot_464 on right_hand with ingredient_303 using dispenser_372 when left_hand is empty <EFFECT> Once we fill a shot_464 with an ingredient_303, the shot_464 contains the ingredient_303 and we say that the shot_464 is used to store the ingredient_303. Once we fill a shot_464 with an ingredient_303, the shot_464 is no longer empty and clean. </EFFECT> \n <PRECON> We can pour the ingredient_303 of a shot_464 into a used shaker_368 only if the shaker_368 has not been shaken yet. We can pour the ingredient_303 of a shot_464 into a used shaker_368 only if we are holding the shot_464 and the shot_464 contains some ingredient_303. </PRECON> pour from shot_464 containing ingredient_303 to used shaker_368 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_303 of a shot_464 into a used shaker_368, the shaker_368 contains the ingredient_303. Once we pour the ingredient_303 of a shot_464 into a used shaker_368, the shaker_368's fill level level_1 will increment one level level_2. Once we pour the ingredient_303 of a shot_464 into a used shaker_368, the shot_464 does not contain any ingredient_303 and is empty. </EFFECT> \n <PRECON> We can clean a shot_464 only if we are holding the shot_464 and another left_hand is empty to manipulate the cleaning equipment. We can clean a shot_464 only if the shot_464 is empty but is used to store some ingredient_303. </PRECON> clean the shot_464 on right_hand used for ingredient_303 when left_hand is empty <EFFECT> Once we clean a shot_464, the shot_464 is clean and is considered not used to store any ingredient_303. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_464 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_464 becomes empty. </EFFECT> WRONG \n <PRECON> We can grasp shaker_368 only if the shaker_368 is on the table. We can grasp a shaker_368 only left_hand is empty. </PRECON> grasp the shaker_368 using left_hand <EFFECT> Once we grasp a shaker_368, we are holding the shaker_368 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_464 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_464 becomes empty. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_368 into a shot_464 only if we are holding the shaker_368 and the shaker_368 contains a cocktail_1. We can pour the cocktail_1 of a shaker_368 into a shot_464 only if the shot_464 is empty and clean. </PRECON> pour from shaker_368 to shot_464 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shot_464 is not clean. Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shaker_368's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shot_464 contains the cocktail_1 and the shot_464 is not empty. </EFFECT> WRONG \n <PRECON> We can shake a shaker_368 only if the shaker_368 has not yet shaken. We can shake a shaker_368 only if we are holding the shaker_368 and the shaker_368 contains two types ingredient_303 and ingredient_354. </PRECON> shake shaker_368 on left_hand containing ingredient_303 and ingredient_354 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_368, the shaker_368 is considered shaken. Once we shake a shaker_368, the shaker_368 contains a cocktail_1 that is a mixture of the two ingredient_303 and ingredient_354. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_368 into a shot_464 only if we are holding the shaker_368 and the shaker_368 contains a cocktail_1. We can pour the cocktail_1 of a shaker_368 into a shot_464 only if the shot_464 is empty and clean. </PRECON> pour from shaker_368 to shot_464 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shot_464 is not clean. Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shaker_368's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shot_464 contains the cocktail_1 and the shot_464 is not empty. </EFFECT> \n</PLAN>", "plan_length": 24, "raw_plan": ["(grasp left shot165)", "(fill-shot shot165 ingredient303 left right dispenser372)", "(pour-shot-to-clean-shaker shot165 ingredient303 shaker368 left l0 l1)", "(clean-shot shot165 ingredient303 left right)", "(fill-shot shot165 ingredient354 left right dispenser236)", "(pour-shot-to-used-shaker shot165 ingredient354 shaker368 left l1 l2)", "(leave left shot165)", "(grasp left shaker368)", "(shake cocktail2 ingredient303 ingredient354 shaker368 left right)", "(pour-shaker-to-shot cocktail2 shot474 left shaker368 l2 l1)", "(empty-shaker left shaker368 cocktail2 l1 l0)", "(clean-shaker left right shaker368)", "(grasp right shot464)", "(leave left shaker368)", "(fill-shot shot464 ingredient354 right left dispenser236)", "(pour-shot-to-clean-shaker shot464 ingredient354 shaker368 right l0 l1)", "(clean-shot shot464 ingredient354 right left)", "(fill-shot shot464 ingredient303 right left dispenser372)", "(pour-shot-to-used-shaker shot464 ingredient303 shaker368 right l1 l2)", "(clean-shot shot464 ingredient303 right left)", "(grasp left shaker368)", "(leave right shot464)", "(shake cocktail1 ingredient303 ingredient354 shaker368 left right)", "(pour-shaker-to-shot cocktail1 shot464 left shaker368 l2 l1)"], "full_text_prompt": "I have to plan the actions for a robotic bartender to prepare cocktails. The bartender has two hands and works with various containers and ingredients to mix and serve drinks.\nHere are the actions that can be performed:\nGrasp a container (shot or shaker) from the table.\nLeave a container on the table.\nFill-shot with an ingredient from a dispenser.\nRefill-shot with the same ingredient it contained before.\nEmpty a shot.\nClean a shot.\nPour the content of a shot into a clean shaker.\nPour the content of a shot into a used shaker that already contain some ingredient.\nEmpty a shaker.\nClean a shaker.\nShake the shaker to mix the ingredients.\nPour the content of a shaker into a shot.\nThe following are the restrictions on the actions:\nWe can grasp a container only if the container is on the table.\nWe can grasp a container only our hand is empty.\nOnce we grasp a container, we are holding the container and our hand is no longer empty.\nWe can leave a container on the table only if we are holding the container.\nOnce we leave a container on the table, the container is on the table and we are no longer holding the container.\nOnce we leave a container on the table, our hand becomes empty.\nWe can fill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nWe can fill a shot with an ingredient only if the shot is empty and clean.\nOnce we fill a shot with an ingredient, the shot is no longer empty and clean.\nOnce we fill a shot with an ingredient, the shot contains the ingredient and we say that the shot is used to store the ingredient.\nWe can refill a shot with an ingredient only if the shot is used to store the same ingredient.\nWe can refill a shot with an ingredient only if the shot is currently empty.\nWe can refill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nOnce we refill a shot with an ingredient, the shot contains the ingredient and is no longer empty.\nWe can empty a shot only if the shot contains some ingredient.\nWe can empty a shot only if we are holding the shot.\nOnce we empty a shot, the shot no more contains any ingredient and is empty.\nWe can clean a shot only if we are holding the shot and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shot only if the shot is empty but is used to store some ingredient.\nOnce we clean a shot, the shot is clean and is considered not used to store any ingredient.\nWe can pour the content of a shot into a clean shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a clean shaker only if the shaker is clean and empty.\nOnce we pour the content of a shot into a clean shaker, the shaker contains the ingredient and thus the shaker is no longer empty.\nOnce we pour the content of a shot into a clean shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a clean shaker, the shaker's fill level will increment one level.\nWe can pour the content of a shot into a used shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a used shaker only if the shaker has not been shaken yet.\nOnce we pour the content of a shot into a used shaker, the shaker contains the ingredients.\nOnce we pour the content of a shot into a used shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a used shaker, the shaker's fill level will increment one level.\nWe can empty a shaker only if we are holding the shaker.\nWe can empty a shaker only if the shaker contains some cocktails.\nWe can empty a shaker only if the shaker has been shaken.\nOnce we empty a shaker, the shaker no longer contains any cocktails and is empty.\nOnce we empty a shaker, the shaker's fill level will become zero.\nOnce we empty a shaker, the shaker is considered not shaken.\nWe can clean a shaker only if we are holding the shaker and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shaker only if the shaker is empty.\nOnce we clean a shaker, the shaker is clean.\nWe can shake a shaker only if we are holding the shaker and the shaker contains two types of ingredients.\nWe can shake a shaker only if the shaker has not yet shaken.\nOnce we shake a shaker, the shaker contains a cocktail that is a mixture of the two ingredients.\nOnce we shake a shaker, the shaker is considered shaken.\nWe can pour the content of a shaker into a shot only if we are holding the shaker and the shaker contains a cocktail.\nWe can pour the content of a shaker into a shot only if the shot is empty and clean.\nOnce we pour the content of a shaker into a shot, the shot contains the cocktail and the shot is not empty.\nOnce we pour the content of a shaker into a shot, the shot is not clean.\nOnce we pour the content of a shaker into a shot, the shaker's fill level will decrement one level.As initial conditions I have that, shaker_368 is on the table, shaker_368's fill level is at level_0, shaker_368 is empty, dispenser_236 dispenses ingredient_354, cocktail_2 has ingredient_303 as its first ingredient, level_2 is the next level after level_1, left_hand is empty, shot_464 is on the table, cocktail_1 has ingredient_354 as its second ingredient, cocktail_2 has ingredient_354 as its second ingredient, shot_474 is empty, right_hand is empty, shot_165 is clean, cocktail_1 has ingredient_303 as its first ingredient, shot_474 is clean, shot_474 is on the table, shot_165 is empty, shaker_368 is clean, dispenser_372 dispenses ingredient_303, shot_464 is empty, shaker_368's zero fill level is at level_0, shot_165 is on the table, shot_464 is clean, level_1 is the next level after level_0.My goal is to have that shot_474 contains cocktail_2, shot_464 contains cocktail_1.My plan is as follows:\n<PLAN>\n <PRECON> We can grasp shot_165 only if the shot_165 is on the table. We can grasp a shot_165 only left_hand is empty. </PRECON> grasp the shot_165 using left_hand <EFFECT> Once we grasp a shot_165, we are holding the shot_165 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can fill a shot_165 with an ingredient_303 only if the shot_165 is empty and clean. We can fill a shot_165 with an ingredient_303 only if one left_hand is holding the shot_165 and the other right_hand is empty to manipulate the dispenser_372 that contains the ingredient_303. </PRECON> fill the shot_165 on left_hand with ingredient_303 using dispenser_372 when right_hand is empty <EFFECT> Once we fill a shot_165 with an ingredient_303, the shot_165 contains the ingredient_303 and we say that the shot_165 is used to store the ingredient_303. Once we fill a shot_165 with an ingredient_303, the shot_165 is no longer empty and clean. </EFFECT> \n <PRECON> We can pour the ingredient_303 of a shot_165 into a clean shaker_368 only if we are holding the shot_165 and the shot_165 contains some ingredient_303. We can pour the ingredient_303 of a shot_165 into a clean shaker_368 only if the shaker_368 is clean and empty. </PRECON> pour from shot_165 containing ingredient_303 to clean shaker_368 using left_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_303 of a shot_165 into a clean shaker_368, the shaker_368 contains the ingredient_303 and thus the shaker_368 is no longer empty. Once we pour the ingredient_303 of a shot_165 into a clean shaker_368, the shot_165 does not contain any ingredient_303 and is empty. Once we pour the ingredient_303 of a shot_165 into a clean shaker_368, the shaker_368's fill level level_0 will increment one level level_1. </EFFECT> \n <PRECON> We can clean a shot_165 only if we are holding the shot_165 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shot_165 only if the shot_165 is empty but is used to store some ingredient_303. </PRECON> clean the shot_165 on left_hand used for ingredient_303 when right_hand is empty <EFFECT> Once we clean a shot_165, the shot_165 is clean and is considered not used to store any ingredient_303. </EFFECT> \n <PRECON> We can fill a shot_165 with an ingredient_354 only if the shot_165 is empty and clean. We can fill a shot_165 with an ingredient_354 only if one left_hand is holding the shot_165 and the other right_hand is empty to manipulate the dispenser_236 that contains the ingredient_354. </PRECON> fill the shot_165 on left_hand with ingredient_354 using dispenser_236 when right_hand is empty <EFFECT> Once we fill a shot_165 with an ingredient_354, the shot_165 contains the ingredient_354 and we say that the shot_165 is used to store the ingredient_354. Once we fill a shot_165 with an ingredient_354, the shot_165 is no longer empty and clean. </EFFECT> \n <PRECON> We can pour the ingredient_354 of a shot_165 into a used shaker_368 only if the shaker_368 has not been shaken yet. We can pour the ingredient_354 of a shot_165 into a used shaker_368 only if we are holding the shot_165 and the shot_165 contains some ingredient_354. </PRECON> pour from shot_165 containing ingredient_354 to used shaker_368 using left_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_354 of a shot_165 into a used shaker_368, the shaker_368 contains the ingredient_354. Once we pour the ingredient_354 of a shot_165 into a used shaker_368, the shaker_368's fill level level_1 will increment one level level_2. Once we pour the ingredient_354 of a shot_165 into a used shaker_368, the shot_165 does not contain any ingredient_354 and is empty. </EFFECT> \n <PRECON> We can fill a shot_464 with an ingredient_354 only if the shot_464 is empty and clean. We can fill a shot_464 with an ingredient_354 only if one right_hand is holding the shot_464 and the other left_hand is empty to manipulate the dispenser_236 that contains the ingredient_354. </PRECON> fill the shot_464 on right_hand with ingredient_354 using dispenser_236 when left_hand is empty <EFFECT> Once we fill a shot_464 with an ingredient_354, the shot_464 contains the ingredient_354 and we say that the shot_464 is used to store the ingredient_354. Once we fill a shot_464 with an ingredient_354, the shot_464 is no longer empty and clean. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shot_165 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shot_165 becomes empty. </EFFECT> \n <PRECON> We can grasp shaker_368 only if the shaker_368 is on the table. We can grasp a shaker_368 only left_hand is empty. </PRECON> grasp the shaker_368 using left_hand <EFFECT> Once we grasp a shaker_368, we are holding the shaker_368 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can shake a shaker_368 only if the shaker_368 has not yet shaken. We can shake a shaker_368 only if we are holding the shaker_368 and the shaker_368 contains two types ingredient_303 and ingredient_354. </PRECON> shake shaker_368 on left_hand containing ingredient_303 and ingredient_354 to get cocktail_2 when right_hand is empty <EFFECT> Once we shake a shaker_368, the shaker_368 is considered shaken. Once we shake a shaker_368, the shaker_368 contains a cocktail_2 that is a mixture of the two ingredient_303 and ingredient_354. </EFFECT> \n <PRECON> We can fill a shot_464 with an ingredient_303 only if the shot_464 is empty and clean. We can fill a shot_464 with an ingredient_303 only if one right_hand is holding the shot_464 and the other left_hand is empty to manipulate the dispenser_372 that contains the ingredient_303. </PRECON> fill the shot_464 on right_hand with ingredient_303 using dispenser_372 when left_hand is empty <EFFECT> Once we fill a shot_464 with an ingredient_303, the shot_464 contains the ingredient_303 and we say that the shot_464 is used to store the ingredient_303. Once we fill a shot_464 with an ingredient_303, the shot_464 is no longer empty and clean. </EFFECT> WRONG \n <PRECON> We can pour the cocktail_2 of a shaker_368 into a shot_474 only if we are holding the shaker_368 and the shaker_368 contains a cocktail_2. We can pour the cocktail_2 of a shaker_368 into a shot_474 only if the shot_474 is empty and clean. </PRECON> pour from shaker_368 to shot_474 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_368 into a shot_474, the shot_474 is not clean. Once we pour the cocktail_2 of a shaker_368 into a shot_474, the shaker_368's fill level level_2 will decrement one level level_1. Once we pour the cocktail_2 of a shaker_368 into a shot_474, the shot_474 contains the cocktail_2 and the shot_474 is not empty. </EFFECT> \n <PRECON> We can empty a shaker_368 only if we are holding the shaker_368. We can empty a shaker_368 only if the shaker_368 has been shaken. We can empty a shaker_368 only if the shaker_368 contains some cocktail_2. </PRECON> empty shaker_368 containing cocktail_2 using left_hand from level_1 to level_0 <EFFECT> Once we empty a shaker_368, the shaker_368's fill level will become level_0. Once we empty a shaker_368, the shaker_368 is considered not shaken. Once we empty a shaker_368, the shaker_368 no longer contains any cocktail_2 and is empty. </EFFECT> \n <PRECON> We can shake a shaker_368 only if the shaker_368 has not yet shaken. We can shake a shaker_368 only if we are holding the shaker_368 and the shaker_368 contains two types ingredient_303 and ingredient_354. </PRECON> shake shaker_368 on left_hand containing ingredient_303 and ingredient_354 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_368, the shaker_368 is considered shaken. Once we shake a shaker_368, the shaker_368 contains a cocktail_1 that is a mixture of the two ingredient_303 and ingredient_354. </EFFECT> WRONG \n <PRECON> We can clean a shaker_368 only if we are holding the shaker_368 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shaker_368 only if the shaker_368 is empty. </PRECON> clean shaker_368 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_368, the shaker_368 is clean. </EFFECT> \n <PRECON> We can grasp shot_464 only if the shot_464 is on the table. We can grasp a shot_464 only right_hand is empty. </PRECON> grasp the shot_464 using right_hand <EFFECT> Once we grasp a shot_464, we are holding the shot_464 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_368 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_368 becomes empty. </EFFECT> \n <PRECON> We can shake a shaker_368 only if the shaker_368 has not yet shaken. We can shake a shaker_368 only if we are holding the shaker_368 and the shaker_368 contains two types ingredient_303 and ingredient_354. </PRECON> shake shaker_368 on left_hand containing ingredient_303 and ingredient_354 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_368, the shaker_368 is considered shaken. Once we shake a shaker_368, the shaker_368 contains a cocktail_1 that is a mixture of the two ingredient_303 and ingredient_354. </EFFECT> WRONG \n <PRECON> We can fill a shot_464 with an ingredient_354 only if the shot_464 is empty and clean. We can fill a shot_464 with an ingredient_354 only if one right_hand is holding the shot_464 and the other left_hand is empty to manipulate the dispenser_236 that contains the ingredient_354. </PRECON> fill the shot_464 on right_hand with ingredient_354 using dispenser_236 when left_hand is empty <EFFECT> Once we fill a shot_464 with an ingredient_354, the shot_464 contains the ingredient_354 and we say that the shot_464 is used to store the ingredient_354. Once we fill a shot_464 with an ingredient_354, the shot_464 is no longer empty and clean. </EFFECT> \n <PRECON> We can pour the ingredient_354 of a shot_464 into a clean shaker_368 only if we are holding the shot_464 and the shot_464 contains some ingredient_354. We can pour the ingredient_354 of a shot_464 into a clean shaker_368 only if the shaker_368 is clean and empty. </PRECON> pour from shot_464 containing ingredient_354 to clean shaker_368 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_354 of a shot_464 into a clean shaker_368, the shaker_368 contains the ingredient_354 and thus the shaker_368 is no longer empty. Once we pour the ingredient_354 of a shot_464 into a clean shaker_368, the shot_464 does not contain any ingredient_354 and is empty. Once we pour the ingredient_354 of a shot_464 into a clean shaker_368, the shaker_368's fill level level_0 will increment one level level_1. </EFFECT> \n <PRECON> We can clean a shot_464 only if we are holding the shot_464 and another left_hand is empty to manipulate the cleaning equipment. We can clean a shot_464 only if the shot_464 is empty but is used to store some ingredient_354. </PRECON> clean the shot_464 on right_hand used for ingredient_354 when left_hand is empty <EFFECT> Once we clean a shot_464, the shot_464 is clean and is considered not used to store any ingredient_354. </EFFECT> \n <PRECON> We can fill a shot_464 with an ingredient_303 only if the shot_464 is empty and clean. We can fill a shot_464 with an ingredient_303 only if one right_hand is holding the shot_464 and the other left_hand is empty to manipulate the dispenser_372 that contains the ingredient_303. </PRECON> fill the shot_464 on right_hand with ingredient_303 using dispenser_372 when left_hand is empty <EFFECT> Once we fill a shot_464 with an ingredient_303, the shot_464 contains the ingredient_303 and we say that the shot_464 is used to store the ingredient_303. Once we fill a shot_464 with an ingredient_303, the shot_464 is no longer empty and clean. </EFFECT> \n <PRECON> We can pour the ingredient_303 of a shot_464 into a used shaker_368 only if the shaker_368 has not been shaken yet. We can pour the ingredient_303 of a shot_464 into a used shaker_368 only if we are holding the shot_464 and the shot_464 contains some ingredient_303. </PRECON> pour from shot_464 containing ingredient_303 to used shaker_368 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_303 of a shot_464 into a used shaker_368, the shaker_368 contains the ingredient_303. Once we pour the ingredient_303 of a shot_464 into a used shaker_368, the shaker_368's fill level level_1 will increment one level level_2. Once we pour the ingredient_303 of a shot_464 into a used shaker_368, the shot_464 does not contain any ingredient_303 and is empty. </EFFECT> \n <PRECON> We can clean a shot_464 only if we are holding the shot_464 and another left_hand is empty to manipulate the cleaning equipment. We can clean a shot_464 only if the shot_464 is empty but is used to store some ingredient_303. </PRECON> clean the shot_464 on right_hand used for ingredient_303 when left_hand is empty <EFFECT> Once we clean a shot_464, the shot_464 is clean and is considered not used to store any ingredient_303. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_464 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_464 becomes empty. </EFFECT> WRONG \n <PRECON> We can grasp shaker_368 only if the shaker_368 is on the table. We can grasp a shaker_368 only left_hand is empty. </PRECON> grasp the shaker_368 using left_hand <EFFECT> Once we grasp a shaker_368, we are holding the shaker_368 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_464 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_464 becomes empty. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_368 into a shot_464 only if we are holding the shaker_368 and the shaker_368 contains a cocktail_1. We can pour the cocktail_1 of a shaker_368 into a shot_464 only if the shot_464 is empty and clean. </PRECON> pour from shaker_368 to shot_464 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shot_464 is not clean. Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shaker_368's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shot_464 contains the cocktail_1 and the shot_464 is not empty. </EFFECT> WRONG \n <PRECON> We can shake a shaker_368 only if the shaker_368 has not yet shaken. We can shake a shaker_368 only if we are holding the shaker_368 and the shaker_368 contains two types ingredient_303 and ingredient_354. </PRECON> shake shaker_368 on left_hand containing ingredient_303 and ingredient_354 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_368, the shaker_368 is considered shaken. Once we shake a shaker_368, the shaker_368 contains a cocktail_1 that is a mixture of the two ingredient_303 and ingredient_354. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_368 into a shot_464 only if we are holding the shaker_368 and the shaker_368 contains a cocktail_1. We can pour the cocktail_1 of a shaker_368 into a shot_464 only if the shot_464 is empty and clean. </PRECON> pour from shaker_368 to shot_464 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shot_464 is not clean. Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shaker_368's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_368 into a shot_464, the shot_464 contains the cocktail_1 and the shot_464 is not empty. </EFFECT> \n</PLAN>"}
{"domain": "barman", "instance_id": "0", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the actions for a robotic bartender to prepare cocktails. The bartender has two hands and works with various containers and ingredients to mix and serve drinks.\nHere are the actions that can be performed:\nGrasp a container (shot or shaker) from the table.\nLeave a container on the table.\nFill-shot with an ingredient from a dispenser.\nRefill-shot with the same ingredient it contained before.\nEmpty a shot.\nClean a shot.\nPour the content of a shot into a clean shaker.\nPour the content of a shot into a used shaker that already contain some ingredient.\nEmpty a shaker.\nClean a shaker.\nShake the shaker to mix the ingredients.\nPour the content of a shaker into a shot.\nThe following are the restrictions on the actions:\nWe can grasp a container only if the container is on the table.\nWe can grasp a container only our hand is empty.\nOnce we grasp a container, we are holding the container and our hand is no longer empty.\nWe can leave a container on the table only if we are holding the container.\nOnce we leave a container on the table, the container is on the table and we are no longer holding the container.\nOnce we leave a container on the table, our hand becomes empty.\nWe can fill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nWe can fill a shot with an ingredient only if the shot is empty and clean.\nOnce we fill a shot with an ingredient, the shot is no longer empty and clean.\nOnce we fill a shot with an ingredient, the shot contains the ingredient and we say that the shot is used to store the ingredient.\nWe can refill a shot with an ingredient only if the shot is used to store the same ingredient.\nWe can refill a shot with an ingredient only if the shot is currently empty.\nWe can refill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nOnce we refill a shot with an ingredient, the shot contains the ingredient and is no longer empty.\nWe can empty a shot only if the shot contains some ingredient.\nWe can empty a shot only if we are holding the shot.\nOnce we empty a shot, the shot no more contains any ingredient and is empty.\nWe can clean a shot only if we are holding the shot and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shot only if the shot is empty but is used to store some ingredient.\nOnce we clean a shot, the shot is clean and is considered not used to store any ingredient.\nWe can pour the content of a shot into a clean shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a clean shaker only if the shaker is clean and empty.\nOnce we pour the content of a shot into a clean shaker, the shaker contains the ingredient and thus the shaker is no longer empty.\nOnce we pour the content of a shot into a clean shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a clean shaker, the shaker's fill level will increment one level.\nWe can pour the content of a shot into a used shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a used shaker only if the shaker has not been shaken yet.\nOnce we pour the content of a shot into a used shaker, the shaker contains the ingredients.\nOnce we pour the content of a shot into a used shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a used shaker, the shaker's fill level will increment one level.\nWe can empty a shaker only if we are holding the shaker.\nWe can empty a shaker only if the shaker contains some cocktails.\nWe can empty a shaker only if the shaker has been shaken.\nOnce we empty a shaker, the shaker no longer contains any cocktails and is empty.\nOnce we empty a shaker, the shaker's fill level will become zero.\nOnce we empty a shaker, the shaker is considered not shaken.\nWe can clean a shaker only if we are holding the shaker and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shaker only if the shaker is empty.\nOnce we clean a shaker, the shaker is clean.\nWe can shake a shaker only if we are holding the shaker and the shaker contains two types of ingredients.\nWe can shake a shaker only if the shaker has not yet shaken.\nOnce we shake a shaker, the shaker contains a cocktail that is a mixture of the two ingredients.\nOnce we shake a shaker, the shaker is considered shaken.\nWe can pour the content of a shaker into a shot only if we are holding the shaker and the shaker contains a cocktail.\nWe can pour the content of a shaker into a shot only if the shot is empty and clean.\nOnce we pour the content of a shaker into a shot, the shot contains the cocktail and the shot is not empty.\nOnce we pour the content of a shaker into a shot, the shot is not clean.\nOnce we pour the content of a shaker into a shot, the shaker's fill level will decrement one level.", "input": "As initial conditions I have that, cocktail_1 has ingredient_1 as its second ingredient, shaker_1 is clean, dispenser_2 dispenses ingredient_2, shot_3 is empty, shot_4 is on the table, shot_4 is empty, shaker_1's zero fill level is at level_0, shot_1 is empty, dispenser_1 dispenses ingredient_1, shot_4 is clean, cocktail_2 has ingredient_2 as its second ingredient, cocktail_2 has ingredient_3 as its first ingredient, shot_3 is clean, dispenser_4 dispenses ingredient_4, shot_1 is clean, shot_2 is clean, cocktail_1 has ingredient_3 as its first ingredient, dispenser_3 dispenses ingredient_3, left_hand is empty, shaker_1's fill level is at level_0, shaker_1 is on the table, level_2 is the next level after level_1, right_hand is empty, shaker_1 is empty, shot_2 is on the table, shot_3 is on the table, level_1 is the next level after level_0, shot_2 is empty, shot_1 is on the table.\nMy goal is to have that shot_1 contains cocktail_2, shot_2 contains cocktail_1, shot_3 contains cocktail_1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can grasp shot_4 only if the shot_4 is on the table. We can grasp a shot_4 only right_hand is empty. </PRECON> grasp the shot_4 using right_hand <EFFECT> Once we grasp a shot_4, we are holding the shot_4 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can fill a shot_4 with an ingredient_1 only if one right_hand is holding the shot_4 and the other left_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can fill a shot_4 with an ingredient_1 only if the shot_4 is empty and clean. </PRECON> fill the shot_4 on right_hand with ingredient_1 using dispenser_1 when left_hand is empty <EFFECT> Once we fill a shot_4 with an ingredient_1, the shot_4 is no longer empty and clean. Once we fill a shot_4 with an ingredient_1, the shot_4 contains the ingredient_1 and we say that the shot_4 is used to store the ingredient_1. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_1 of a shot_4 into a clean shaker_1 only if the shaker_1 is clean and empty. We can pour the ingredient_1 of a shot_4 into a clean shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_1. </PRECON> pour from shot_4 containing ingredient_1 to clean shaker_1 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_1 of a shot_4 into a clean shaker_1, the shaker_1 contains the ingredient_1 and thus the shaker_1 is no longer empty. Once we pour the ingredient_1 of a shot_4 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_1 of a shot_4 into a clean shaker_1, the shot_4 does not contain any ingredient_1 and is empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can clean a shot_4 only if the shot_4 is empty but is used to store some ingredient_1. We can clean a shot_4 only if we are holding the shot_4 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_4 on right_hand used for ingredient_1 when left_hand is empty <EFFECT> Once we clean a shot_4, the shot_4 is clean and is considered not used to store any ingredient_1. </EFFECT> \n <PRECON> We can fill a shot_4 with an ingredient_3 only if one right_hand is holding the shot_4 and the other left_hand is empty to manipulate the dispenser_3 that contains the ingredient_3. We can fill a shot_4 with an ingredient_3 only if the shot_4 is empty and clean. </PRECON> fill the shot_4 on right_hand with ingredient_3 using dispenser_3 when left_hand is empty <EFFECT> Once we fill a shot_4 with an ingredient_3, the shot_4 is no longer empty and clean. Once we fill a shot_4 with an ingredient_3, the shot_4 contains the ingredient_3 and we say that the shot_4 is used to store the ingredient_3. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_2. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_2 to get cocktail_2 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_2 that is a mixture of the two ingredient_3 and ingredient_2. </EFFECT> WRONG \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> WRONG \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_3. </PRECON> pour from shot_4 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shot_4 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can clean a shot_4 only if the shot_4 is empty but is used to store some ingredient_3. We can clean a shot_4 only if we are holding the shot_4 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_4 on right_hand used for ingredient_3 when left_hand is empty <EFFECT> Once we clean a shot_4, the shot_4 is clean and is considered not used to store any ingredient_3. </EFFECT> \n <PRECON> We can fill a shot_4 with an ingredient_2 only if one right_hand is holding the shot_4 and the other left_hand is empty to manipulate the dispenser_2 that contains the ingredient_2. We can fill a shot_4 with an ingredient_2 only if the shot_4 is empty and clean. </PRECON> fill the shot_4 on right_hand with ingredient_2 using dispenser_2 when left_hand is empty <EFFECT> Once we fill a shot_4 with an ingredient_2, the shot_4 is no longer empty and clean. Once we fill a shot_4 with an ingredient_2, the shot_4 contains the ingredient_2 and we say that the shot_4 is used to store the ingredient_2. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_4 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_4 becomes empty. </EFFECT> \n <PRECON> We can grasp shot_4 only if the shot_4 is on the table. We can grasp a shot_4 only right_hand is empty. </PRECON> grasp the shot_4 using right_hand <EFFECT> Once we grasp a shot_4, we are holding the shot_4 and right_hand is no longer empty. </EFFECT> WRONG \n <PRECON> We can pour the cocktail_2 of a shaker_1 into a shot_1 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_2. We can pour the cocktail_2 of a shaker_1 into a shot_1 only if the shot_1 is empty and clean. </PRECON> pour from shaker_1 to shot_1 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shot_1 contains the cocktail_2 and the shot_1 is not empty. Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shot_1 is not clean. Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shaker_1's fill level level_2 will decrement one level level_1. </EFFECT> WRONG \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_1. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_1 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_3 and ingredient_1. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_1 into a shot_2 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_1. We can pour the cocktail_1 of a shaker_1 into a shot_2 only if the shot_2 is empty and clean. </PRECON> pour from shaker_1 to shot_2 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_1 into a shot_2, the shot_2 contains the cocktail_1 and the shot_2 is not empty. Once we pour the cocktail_1 of a shaker_1 into a shot_2, the shot_2 is not clean. Once we pour the cocktail_1 of a shaker_1 into a shot_2, the shaker_1's fill level level_2 will decrement one level level_1. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_1 into a shot_3 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_1. We can pour the cocktail_1 of a shaker_1 into a shot_3 only if the shot_3 is empty and clean. </PRECON> pour from shaker_1 to shot_3 containing cocktail_1 using left_hand from level_1 to level_0 <EFFECT> Once we pour the cocktail_1 of a shaker_1 into a shot_3, the shot_3 contains the cocktail_1 and the shot_3 is not empty. Once we pour the cocktail_1 of a shaker_1 into a shot_3, the shot_3 is not clean. Once we pour the cocktail_1 of a shaker_1 into a shot_3, the shaker_1's fill level level_1 will decrement one level level_0. </EFFECT> \n <PRECON> We can empty a shaker_1 only if we are holding the shaker_1. We can empty a shaker_1 only if the shaker_1 has been shaken. We can empty a shaker_1 only if the shaker_1 contains some cocktail_1. </PRECON> empty shaker_1 containing cocktail_1 using left_hand from level_0 to level_0 <EFFECT> Once we empty a shaker_1, the shaker_1 is considered not shaken. Once we empty a shaker_1, the shaker_1's fill level will become level_0. Once we empty a shaker_1, the shaker_1 no longer contains any cocktail_1 and is empty. </EFFECT> \n <PRECON> We can pour the ingredient_2 of a shot_4 into a clean shaker_1 only if the shaker_1 is clean and empty. We can pour the ingredient_2 of a shot_4 into a clean shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_2. </PRECON> pour from shot_4 containing ingredient_2 to clean shaker_1 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shaker_1 contains the ingredient_2 and thus the shaker_1 is no longer empty. Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shot_4 does not contain any ingredient_2 and is empty. </EFFECT> WRONG \n <PRECON> We can clean a shaker_1 only if we are holding the shaker_1 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shaker_1 only if the shaker_1 is empty. </PRECON> clean shaker_1 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_1, the shaker_1 is clean. </EFFECT> \n <PRECON> We can clean a shot_4 only if the shot_4 is empty but is used to store some ingredient_2. We can clean a shot_4 only if we are holding the shot_4 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_4 on right_hand used for ingredient_2 when left_hand is empty <EFFECT> Once we clean a shot_4, the shot_4 is clean and is considered not used to store any ingredient_2. </EFFECT> WRONG \n <PRECON> We can grasp shot_4 only if the shot_4 is on the table. We can grasp a shot_4 only right_hand is empty. </PRECON> grasp the shot_4 using right_hand <EFFECT> Once we grasp a shot_4, we are holding the shot_4 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can pour the ingredient_2 of a shot_4 into a clean shaker_1 only if the shaker_1 is clean and empty. We can pour the ingredient_2 of a shot_4 into a clean shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_2. </PRECON> pour from shot_4 containing ingredient_2 to clean shaker_1 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shaker_1 contains the ingredient_2 and thus the shaker_1 is no longer empty. Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shot_4 does not contain any ingredient_2 and is empty. </EFFECT> \n <PRECON> We can clean a shot_4 only if the shot_4 is empty but is used to store some ingredient_2. We can clean a shot_4 only if we are holding the shot_4 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_4 on right_hand used for ingredient_2 when left_hand is empty <EFFECT> Once we clean a shot_4, the shot_4 is clean and is considered not used to store any ingredient_2. </EFFECT> \n <PRECON> We can fill a shot_4 with an ingredient_3 only if one right_hand is holding the shot_4 and the other left_hand is empty to manipulate the dispenser_3 that contains the ingredient_3. We can fill a shot_4 with an ingredient_3 only if the shot_4 is empty and clean. </PRECON> fill the shot_4 on right_hand with ingredient_3 using dispenser_3 when left_hand is empty <EFFECT> Once we fill a shot_4 with an ingredient_3, the shot_4 is no longer empty and clean. Once we fill a shot_4 with an ingredient_3, the shot_4 contains the ingredient_3 and we say that the shot_4 is used to store the ingredient_3. </EFFECT> \n <PRECON> We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_3. </PRECON> pour from shot_4 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shot_4 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> WRONG \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_3. </PRECON> pour from shot_4 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shot_4 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_4 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_4 becomes empty. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_2. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_2 to get cocktail_2 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_2 that is a mixture of the two ingredient_3 and ingredient_2. </EFFECT> \n <PRECON> We can pour the cocktail_2 of a shaker_1 into a shot_1 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_2. We can pour the cocktail_2 of a shaker_1 into a shot_1 only if the shot_1 is empty and clean. </PRECON> pour from shaker_1 to shot_1 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shot_1 contains the cocktail_2 and the shot_1 is not empty. Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shot_1 is not clean. Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shaker_1's fill level level_2 will decrement one level level_1. </EFFECT> \n</PLAN>", "plan_length": 31, "raw_plan": ["(grasp left shaker1)", "(grasp right shot4)", "(leave left shaker1)", "(fill-shot shot4 ingredient1 right left dispenser1)", "(grasp left shaker1)", "(pour-shot-to-clean-shaker shot4 ingredient1 shaker1 right l0 l1)", "(leave left shaker1)", "(clean-shot shot4 ingredient1 right left)", "(fill-shot shot4 ingredient3 right left dispenser3)", "(grasp left shaker1)", "(pour-shot-to-used-shaker shot4 ingredient3 shaker1 right l1 l2)", "(leave left shaker1)", "(clean-shot shot4 ingredient3 right left)", "(fill-shot shot4 ingredient2 right left dispenser2)", "(grasp left shaker1)", "(leave right shot4)", "(shake cocktail1 ingredient3 ingredient1 shaker1 left right)", "(pour-shaker-to-shot cocktail1 shot2 left shaker1 l2 l1)", "(pour-shaker-to-shot cocktail1 shot3 left shaker1 l1 l0)", "(empty-shaker left shaker1 cocktail1 l0 l0)", "(clean-shaker left right shaker1)", "(grasp right shot4)", "(leave left shaker1)", "(pour-shot-to-clean-shaker shot4 ingredient2 shaker1 right l0 l1)", "(clean-shot shot4 ingredient2 right left)", "(fill-shot shot4 ingredient3 right left dispenser3)", "(grasp left shaker1)", "(pour-shot-to-used-shaker shot4 ingredient3 shaker1 right l1 l2)", "(leave right shot4)", "(shake cocktail2 ingredient3 ingredient2 shaker1 left right)", "(pour-shaker-to-shot cocktail2 shot1 left shaker1 l2 l1)"], "full_text_prompt": "I have to plan the actions for a robotic bartender to prepare cocktails. The bartender has two hands and works with various containers and ingredients to mix and serve drinks.\nHere are the actions that can be performed:\nGrasp a container (shot or shaker) from the table.\nLeave a container on the table.\nFill-shot with an ingredient from a dispenser.\nRefill-shot with the same ingredient it contained before.\nEmpty a shot.\nClean a shot.\nPour the content of a shot into a clean shaker.\nPour the content of a shot into a used shaker that already contain some ingredient.\nEmpty a shaker.\nClean a shaker.\nShake the shaker to mix the ingredients.\nPour the content of a shaker into a shot.\nThe following are the restrictions on the actions:\nWe can grasp a container only if the container is on the table.\nWe can grasp a container only our hand is empty.\nOnce we grasp a container, we are holding the container and our hand is no longer empty.\nWe can leave a container on the table only if we are holding the container.\nOnce we leave a container on the table, the container is on the table and we are no longer holding the container.\nOnce we leave a container on the table, our hand becomes empty.\nWe can fill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nWe can fill a shot with an ingredient only if the shot is empty and clean.\nOnce we fill a shot with an ingredient, the shot is no longer empty and clean.\nOnce we fill a shot with an ingredient, the shot contains the ingredient and we say that the shot is used to store the ingredient.\nWe can refill a shot with an ingredient only if the shot is used to store the same ingredient.\nWe can refill a shot with an ingredient only if the shot is currently empty.\nWe can refill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nOnce we refill a shot with an ingredient, the shot contains the ingredient and is no longer empty.\nWe can empty a shot only if the shot contains some ingredient.\nWe can empty a shot only if we are holding the shot.\nOnce we empty a shot, the shot no more contains any ingredient and is empty.\nWe can clean a shot only if we are holding the shot and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shot only if the shot is empty but is used to store some ingredient.\nOnce we clean a shot, the shot is clean and is considered not used to store any ingredient.\nWe can pour the content of a shot into a clean shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a clean shaker only if the shaker is clean and empty.\nOnce we pour the content of a shot into a clean shaker, the shaker contains the ingredient and thus the shaker is no longer empty.\nOnce we pour the content of a shot into a clean shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a clean shaker, the shaker's fill level will increment one level.\nWe can pour the content of a shot into a used shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a used shaker only if the shaker has not been shaken yet.\nOnce we pour the content of a shot into a used shaker, the shaker contains the ingredients.\nOnce we pour the content of a shot into a used shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a used shaker, the shaker's fill level will increment one level.\nWe can empty a shaker only if we are holding the shaker.\nWe can empty a shaker only if the shaker contains some cocktails.\nWe can empty a shaker only if the shaker has been shaken.\nOnce we empty a shaker, the shaker no longer contains any cocktails and is empty.\nOnce we empty a shaker, the shaker's fill level will become zero.\nOnce we empty a shaker, the shaker is considered not shaken.\nWe can clean a shaker only if we are holding the shaker and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shaker only if the shaker is empty.\nOnce we clean a shaker, the shaker is clean.\nWe can shake a shaker only if we are holding the shaker and the shaker contains two types of ingredients.\nWe can shake a shaker only if the shaker has not yet shaken.\nOnce we shake a shaker, the shaker contains a cocktail that is a mixture of the two ingredients.\nOnce we shake a shaker, the shaker is considered shaken.\nWe can pour the content of a shaker into a shot only if we are holding the shaker and the shaker contains a cocktail.\nWe can pour the content of a shaker into a shot only if the shot is empty and clean.\nOnce we pour the content of a shaker into a shot, the shot contains the cocktail and the shot is not empty.\nOnce we pour the content of a shaker into a shot, the shot is not clean.\nOnce we pour the content of a shaker into a shot, the shaker's fill level will decrement one level.As initial conditions I have that, cocktail_1 has ingredient_1 as its second ingredient, shaker_1 is clean, dispenser_2 dispenses ingredient_2, shot_3 is empty, shot_4 is on the table, shot_4 is empty, shaker_1's zero fill level is at level_0, shot_1 is empty, dispenser_1 dispenses ingredient_1, shot_4 is clean, cocktail_2 has ingredient_2 as its second ingredient, cocktail_2 has ingredient_3 as its first ingredient, shot_3 is clean, dispenser_4 dispenses ingredient_4, shot_1 is clean, shot_2 is clean, cocktail_1 has ingredient_3 as its first ingredient, dispenser_3 dispenses ingredient_3, left_hand is empty, shaker_1's fill level is at level_0, shaker_1 is on the table, level_2 is the next level after level_1, right_hand is empty, shaker_1 is empty, shot_2 is on the table, shot_3 is on the table, level_1 is the next level after level_0, shot_2 is empty, shot_1 is on the table.My goal is to have that shot_1 contains cocktail_2, shot_2 contains cocktail_1, shot_3 contains cocktail_1.My plan is as follows:\n<PLAN>\n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can grasp shot_4 only if the shot_4 is on the table. We can grasp a shot_4 only right_hand is empty. </PRECON> grasp the shot_4 using right_hand <EFFECT> Once we grasp a shot_4, we are holding the shot_4 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can fill a shot_4 with an ingredient_1 only if one right_hand is holding the shot_4 and the other left_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can fill a shot_4 with an ingredient_1 only if the shot_4 is empty and clean. </PRECON> fill the shot_4 on right_hand with ingredient_1 using dispenser_1 when left_hand is empty <EFFECT> Once we fill a shot_4 with an ingredient_1, the shot_4 is no longer empty and clean. Once we fill a shot_4 with an ingredient_1, the shot_4 contains the ingredient_1 and we say that the shot_4 is used to store the ingredient_1. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_1 of a shot_4 into a clean shaker_1 only if the shaker_1 is clean and empty. We can pour the ingredient_1 of a shot_4 into a clean shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_1. </PRECON> pour from shot_4 containing ingredient_1 to clean shaker_1 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_1 of a shot_4 into a clean shaker_1, the shaker_1 contains the ingredient_1 and thus the shaker_1 is no longer empty. Once we pour the ingredient_1 of a shot_4 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_1 of a shot_4 into a clean shaker_1, the shot_4 does not contain any ingredient_1 and is empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can clean a shot_4 only if the shot_4 is empty but is used to store some ingredient_1. We can clean a shot_4 only if we are holding the shot_4 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_4 on right_hand used for ingredient_1 when left_hand is empty <EFFECT> Once we clean a shot_4, the shot_4 is clean and is considered not used to store any ingredient_1. </EFFECT> \n <PRECON> We can fill a shot_4 with an ingredient_3 only if one right_hand is holding the shot_4 and the other left_hand is empty to manipulate the dispenser_3 that contains the ingredient_3. We can fill a shot_4 with an ingredient_3 only if the shot_4 is empty and clean. </PRECON> fill the shot_4 on right_hand with ingredient_3 using dispenser_3 when left_hand is empty <EFFECT> Once we fill a shot_4 with an ingredient_3, the shot_4 is no longer empty and clean. Once we fill a shot_4 with an ingredient_3, the shot_4 contains the ingredient_3 and we say that the shot_4 is used to store the ingredient_3. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_2. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_2 to get cocktail_2 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_2 that is a mixture of the two ingredient_3 and ingredient_2. </EFFECT> WRONG \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> WRONG \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_3. </PRECON> pour from shot_4 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shot_4 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can clean a shot_4 only if the shot_4 is empty but is used to store some ingredient_3. We can clean a shot_4 only if we are holding the shot_4 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_4 on right_hand used for ingredient_3 when left_hand is empty <EFFECT> Once we clean a shot_4, the shot_4 is clean and is considered not used to store any ingredient_3. </EFFECT> \n <PRECON> We can fill a shot_4 with an ingredient_2 only if one right_hand is holding the shot_4 and the other left_hand is empty to manipulate the dispenser_2 that contains the ingredient_2. We can fill a shot_4 with an ingredient_2 only if the shot_4 is empty and clean. </PRECON> fill the shot_4 on right_hand with ingredient_2 using dispenser_2 when left_hand is empty <EFFECT> Once we fill a shot_4 with an ingredient_2, the shot_4 is no longer empty and clean. Once we fill a shot_4 with an ingredient_2, the shot_4 contains the ingredient_2 and we say that the shot_4 is used to store the ingredient_2. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_4 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_4 becomes empty. </EFFECT> \n <PRECON> We can grasp shot_4 only if the shot_4 is on the table. We can grasp a shot_4 only right_hand is empty. </PRECON> grasp the shot_4 using right_hand <EFFECT> Once we grasp a shot_4, we are holding the shot_4 and right_hand is no longer empty. </EFFECT> WRONG \n <PRECON> We can pour the cocktail_2 of a shaker_1 into a shot_1 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_2. We can pour the cocktail_2 of a shaker_1 into a shot_1 only if the shot_1 is empty and clean. </PRECON> pour from shaker_1 to shot_1 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shot_1 contains the cocktail_2 and the shot_1 is not empty. Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shot_1 is not clean. Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shaker_1's fill level level_2 will decrement one level level_1. </EFFECT> WRONG \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_1. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_1 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_3 and ingredient_1. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_1 into a shot_2 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_1. We can pour the cocktail_1 of a shaker_1 into a shot_2 only if the shot_2 is empty and clean. </PRECON> pour from shaker_1 to shot_2 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_1 into a shot_2, the shot_2 contains the cocktail_1 and the shot_2 is not empty. Once we pour the cocktail_1 of a shaker_1 into a shot_2, the shot_2 is not clean. Once we pour the cocktail_1 of a shaker_1 into a shot_2, the shaker_1's fill level level_2 will decrement one level level_1. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_1 into a shot_3 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_1. We can pour the cocktail_1 of a shaker_1 into a shot_3 only if the shot_3 is empty and clean. </PRECON> pour from shaker_1 to shot_3 containing cocktail_1 using left_hand from level_1 to level_0 <EFFECT> Once we pour the cocktail_1 of a shaker_1 into a shot_3, the shot_3 contains the cocktail_1 and the shot_3 is not empty. Once we pour the cocktail_1 of a shaker_1 into a shot_3, the shot_3 is not clean. Once we pour the cocktail_1 of a shaker_1 into a shot_3, the shaker_1's fill level level_1 will decrement one level level_0. </EFFECT> \n <PRECON> We can empty a shaker_1 only if we are holding the shaker_1. We can empty a shaker_1 only if the shaker_1 has been shaken. We can empty a shaker_1 only if the shaker_1 contains some cocktail_1. </PRECON> empty shaker_1 containing cocktail_1 using left_hand from level_0 to level_0 <EFFECT> Once we empty a shaker_1, the shaker_1 is considered not shaken. Once we empty a shaker_1, the shaker_1's fill level will become level_0. Once we empty a shaker_1, the shaker_1 no longer contains any cocktail_1 and is empty. </EFFECT> \n <PRECON> We can pour the ingredient_2 of a shot_4 into a clean shaker_1 only if the shaker_1 is clean and empty. We can pour the ingredient_2 of a shot_4 into a clean shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_2. </PRECON> pour from shot_4 containing ingredient_2 to clean shaker_1 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shaker_1 contains the ingredient_2 and thus the shaker_1 is no longer empty. Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shot_4 does not contain any ingredient_2 and is empty. </EFFECT> WRONG \n <PRECON> We can clean a shaker_1 only if we are holding the shaker_1 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shaker_1 only if the shaker_1 is empty. </PRECON> clean shaker_1 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_1, the shaker_1 is clean. </EFFECT> \n <PRECON> We can clean a shot_4 only if the shot_4 is empty but is used to store some ingredient_2. We can clean a shot_4 only if we are holding the shot_4 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_4 on right_hand used for ingredient_2 when left_hand is empty <EFFECT> Once we clean a shot_4, the shot_4 is clean and is considered not used to store any ingredient_2. </EFFECT> WRONG \n <PRECON> We can grasp shot_4 only if the shot_4 is on the table. We can grasp a shot_4 only right_hand is empty. </PRECON> grasp the shot_4 using right_hand <EFFECT> Once we grasp a shot_4, we are holding the shot_4 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can pour the ingredient_2 of a shot_4 into a clean shaker_1 only if the shaker_1 is clean and empty. We can pour the ingredient_2 of a shot_4 into a clean shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_2. </PRECON> pour from shot_4 containing ingredient_2 to clean shaker_1 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shaker_1 contains the ingredient_2 and thus the shaker_1 is no longer empty. Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_2 of a shot_4 into a clean shaker_1, the shot_4 does not contain any ingredient_2 and is empty. </EFFECT> \n <PRECON> We can clean a shot_4 only if the shot_4 is empty but is used to store some ingredient_2. We can clean a shot_4 only if we are holding the shot_4 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_4 on right_hand used for ingredient_2 when left_hand is empty <EFFECT> Once we clean a shot_4, the shot_4 is clean and is considered not used to store any ingredient_2. </EFFECT> \n <PRECON> We can fill a shot_4 with an ingredient_3 only if one right_hand is holding the shot_4 and the other left_hand is empty to manipulate the dispenser_3 that contains the ingredient_3. We can fill a shot_4 with an ingredient_3 only if the shot_4 is empty and clean. </PRECON> fill the shot_4 on right_hand with ingredient_3 using dispenser_3 when left_hand is empty <EFFECT> Once we fill a shot_4 with an ingredient_3, the shot_4 is no longer empty and clean. Once we fill a shot_4 with an ingredient_3, the shot_4 contains the ingredient_3 and we say that the shot_4 is used to store the ingredient_3. </EFFECT> \n <PRECON> We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_3. </PRECON> pour from shot_4 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shot_4 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> WRONG \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_4 into a used shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_3. </PRECON> pour from shot_4 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shot_4 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_4 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_4 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_4 becomes empty. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_2. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_2 to get cocktail_2 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_2 that is a mixture of the two ingredient_3 and ingredient_2. </EFFECT> \n <PRECON> We can pour the cocktail_2 of a shaker_1 into a shot_1 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_2. We can pour the cocktail_2 of a shaker_1 into a shot_1 only if the shot_1 is empty and clean. </PRECON> pour from shaker_1 to shot_1 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shot_1 contains the cocktail_2 and the shot_1 is not empty. Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shot_1 is not clean. Once we pour the cocktail_2 of a shaker_1 into a shot_1, the shaker_1's fill level level_2 will decrement one level level_1. </EFFECT> \n</PLAN>"}
{"domain": "barman", "instance_id": "160", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the actions for a robotic bartender to prepare cocktails. The bartender has two hands and works with various containers and ingredients to mix and serve drinks.\nHere are the actions that can be performed:\nGrasp a container (shot or shaker) from the table.\nLeave a container on the table.\nFill-shot with an ingredient from a dispenser.\nRefill-shot with the same ingredient it contained before.\nEmpty a shot.\nClean a shot.\nPour the content of a shot into a clean shaker.\nPour the content of a shot into a used shaker that already contain some ingredient.\nEmpty a shaker.\nClean a shaker.\nShake the shaker to mix the ingredients.\nPour the content of a shaker into a shot.\nThe following are the restrictions on the actions:\nWe can grasp a container only if the container is on the table.\nWe can grasp a container only our hand is empty.\nOnce we grasp a container, we are holding the container and our hand is no longer empty.\nWe can leave a container on the table only if we are holding the container.\nOnce we leave a container on the table, the container is on the table and we are no longer holding the container.\nOnce we leave a container on the table, our hand becomes empty.\nWe can fill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nWe can fill a shot with an ingredient only if the shot is empty and clean.\nOnce we fill a shot with an ingredient, the shot is no longer empty and clean.\nOnce we fill a shot with an ingredient, the shot contains the ingredient and we say that the shot is used to store the ingredient.\nWe can refill a shot with an ingredient only if the shot is used to store the same ingredient.\nWe can refill a shot with an ingredient only if the shot is currently empty.\nWe can refill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nOnce we refill a shot with an ingredient, the shot contains the ingredient and is no longer empty.\nWe can empty a shot only if the shot contains some ingredient.\nWe can empty a shot only if we are holding the shot.\nOnce we empty a shot, the shot no more contains any ingredient and is empty.\nWe can clean a shot only if we are holding the shot and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shot only if the shot is empty but is used to store some ingredient.\nOnce we clean a shot, the shot is clean and is considered not used to store any ingredient.\nWe can pour the content of a shot into a clean shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a clean shaker only if the shaker is clean and empty.\nOnce we pour the content of a shot into a clean shaker, the shaker contains the ingredient and thus the shaker is no longer empty.\nOnce we pour the content of a shot into a clean shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a clean shaker, the shaker's fill level will increment one level.\nWe can pour the content of a shot into a used shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a used shaker only if the shaker has not been shaken yet.\nOnce we pour the content of a shot into a used shaker, the shaker contains the ingredients.\nOnce we pour the content of a shot into a used shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a used shaker, the shaker's fill level will increment one level.\nWe can empty a shaker only if we are holding the shaker.\nWe can empty a shaker only if the shaker contains some cocktails.\nWe can empty a shaker only if the shaker has been shaken.\nOnce we empty a shaker, the shaker no longer contains any cocktails and is empty.\nOnce we empty a shaker, the shaker's fill level will become zero.\nOnce we empty a shaker, the shaker is considered not shaken.\nWe can clean a shaker only if we are holding the shaker and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shaker only if the shaker is empty.\nOnce we clean a shaker, the shaker is clean.\nWe can shake a shaker only if we are holding the shaker and the shaker contains two types of ingredients.\nWe can shake a shaker only if the shaker has not yet shaken.\nOnce we shake a shaker, the shaker contains a cocktail that is a mixture of the two ingredients.\nOnce we shake a shaker, the shaker is considered shaken.\nWe can pour the content of a shaker into a shot only if we are holding the shaker and the shaker contains a cocktail.\nWe can pour the content of a shaker into a shot only if the shot is empty and clean.\nOnce we pour the content of a shaker into a shot, the shot contains the cocktail and the shot is not empty.\nOnce we pour the content of a shaker into a shot, the shot is not clean.\nOnce we pour the content of a shaker into a shot, the shaker's fill level will decrement one level.", "input": "As initial conditions I have that, left_hand is empty, shot_2 is on the table, shaker_1 is empty, shaker_1's zero fill level is at level_0, shot_1 is empty, dispenser_1 dispenses ingredient_1, cocktail_1 has ingredient_2 as its second ingredient, shaker_1 is on the table, shot_4 is clean, shot_1 is clean, shot_2 is empty, shot_3 is on the table, right_hand is empty, dispenser_2 dispenses ingredient_2, level_1 is the next level after level_0, shot_1 is on the table, cocktail_1 has ingredient_1 as its first ingredient, shaker_1's fill level is at level_0, shot_3 is clean, shot_4 is empty, shot_2 is clean, level_2 is the next level after level_1, shot_4 is on the table, shot_3 is empty, shaker_1 is clean.\nMy goal is to have that shot_2 contains ingredient_1, shot_1 contains cocktail_1, shot_3 contains ingredient_1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> We can grasp shot_2 only if the shot_2 is on the table. We can grasp a shot_2 only left_hand is empty. </PRECON> grasp the shot_2 using left_hand <EFFECT> Once we grasp a shot_2, we are holding the shot_2 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can fill a shot_2 with an ingredient_1 only if one left_hand is holding the shot_2 and the other right_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can fill a shot_2 with an ingredient_1 only if the shot_2 is empty and clean. </PRECON> fill the shot_2 on left_hand with ingredient_1 using dispenser_1 when right_hand is empty <EFFECT> Once we fill a shot_2 with an ingredient_1, the shot_2 contains the ingredient_1 and we say that the shot_2 is used to store the ingredient_1. Once we fill a shot_2 with an ingredient_1, the shot_2 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only right_hand is empty. </PRECON> grasp the shaker_1 using right_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_1 of a shot_2 into a clean shaker_1 only if we are holding the shot_2 and the shot_2 contains some ingredient_1. We can pour the ingredient_1 of a shot_2 into a clean shaker_1 only if the shaker_1 is clean and empty. </PRECON> pour from shot_2 containing ingredient_1 to clean shaker_1 using left_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_1 of a shot_2 into a clean shaker_1, the shot_2 does not contain any ingredient_1 and is empty. Once we pour the ingredient_1 of a shot_2 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_1 of a shot_2 into a clean shaker_1, the shaker_1 contains the ingredient_1 and thus the shaker_1 is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shot_2 using left_hand <EFFECT> Once we leave a left_hand on the table, our shot_2 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_1 into a shot_1 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_1. We can pour the cocktail_1 of a shaker_1 into a shot_1 only if the shot_1 is empty and clean. </PRECON> pour from shaker_1 to shot_1 containing cocktail_1 using right_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 is not clean. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shaker_1's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 contains the cocktail_1 and the shot_1 is not empty. </EFFECT> WRONG \n <PRECON> We can grasp shot_3 only if the shot_3 is on the table. We can grasp a shot_3 only left_hand is empty. </PRECON> grasp the shot_3 using left_hand <EFFECT> Once we grasp a shot_3, we are holding the shot_3 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shaker_1 using right_hand <EFFECT> Once we leave a right_hand on the table, our shaker_1 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shot_4 using left_hand <EFFECT> Once we leave a left_hand on the table, our shot_4 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> WRONG \n <PRECON> We can fill a shot_3 with an ingredient_1 only if one left_hand is holding the shot_3 and the other right_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can fill a shot_3 with an ingredient_1 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on left_hand with ingredient_1 using dispenser_1 when right_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_1, the shot_3 contains the ingredient_1 and we say that the shot_3 is used to store the ingredient_1. Once we fill a shot_3 with an ingredient_1, the shot_3 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only right_hand is empty. </PRECON> grasp the shaker_1 using right_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_2 of a shot_4 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_2 of a shot_4 into a used shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_2. </PRECON> pour from shot_4 containing ingredient_2 to used shaker_1 using left_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shot_4 does not contain any ingredient_2 and is empty. Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shaker_1 contains the ingredient_2. Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shot_3 using left_hand <EFFECT> Once we leave a left_hand on the table, our shot_3 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can grasp shot_4 only if the shot_4 is on the table. We can grasp a shot_4 only left_hand is empty. </PRECON> grasp the shot_4 using left_hand <EFFECT> Once we grasp a shot_4, we are holding the shot_4 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shaker_1 using right_hand <EFFECT> Once we leave a right_hand on the table, our shaker_1 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only right_hand is empty. </PRECON> grasp the shaker_1 using right_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and right_hand is no longer empty. </EFFECT> WRONG \n <PRECON> We can fill a shot_4 with an ingredient_2 only if one left_hand is holding the shot_4 and the other right_hand is empty to manipulate the dispenser_2 that contains the ingredient_2. We can fill a shot_4 with an ingredient_2 only if the shot_4 is empty and clean. </PRECON> fill the shot_4 on left_hand with ingredient_2 using dispenser_2 when right_hand is empty <EFFECT> Once we fill a shot_4 with an ingredient_2, the shot_4 contains the ingredient_2 and we say that the shot_4 is used to store the ingredient_2. Once we fill a shot_4 with an ingredient_2, the shot_4 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only right_hand is empty. </PRECON> grasp the shaker_1 using right_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_2 of a shot_4 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_2 of a shot_4 into a used shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_2. </PRECON> pour from shot_4 containing ingredient_2 to used shaker_1 using left_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shot_4 does not contain any ingredient_2 and is empty. Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shaker_1 contains the ingredient_2. Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shot_4 using left_hand <EFFECT> Once we leave a left_hand on the table, our shot_4 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shaker_1 using right_hand <EFFECT> Once we leave a right_hand on the table, our shaker_1 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> WRONG \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_1 and ingredient_2. </PRECON> shake shaker_1 on right_hand containing ingredient_1 and ingredient_2 to get cocktail_1 when left_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_1 and ingredient_2. Once we shake a shaker_1, the shaker_1 is considered shaken. </EFFECT> \n <PRECON> We can grasp shot_2 only if the shot_2 is on the table. We can grasp a shot_2 only left_hand is empty. </PRECON> grasp the shot_2 using left_hand <EFFECT> Once we grasp a shot_2, we are holding the shot_2 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_1 into a shot_1 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_1. We can pour the cocktail_1 of a shaker_1 into a shot_1 only if the shot_1 is empty and clean. </PRECON> pour from shaker_1 to shot_1 containing cocktail_1 using right_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 is not clean. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shaker_1's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 contains the cocktail_1 and the shot_1 is not empty. </EFFECT> \n <PRECON> We can refill a shot_2 with an ingredient_1 only if one left_hand is holding the shot_2 and the other right_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can refill a shot_2 with an ingredient_1 only if the shot_2 is currently empty. We can refill a shot_2 with an ingredient_1 only if the shot_2 is used to store the same ingredient_1. </PRECON> refill the shot_2 on left_hand with ingredient_1 using dispenser_1 when right_hand is empty <EFFECT> Once we refill a shot_2 with an ingredient_1, the shot_2 contains the ingredient_1 and is no longer empty. </EFFECT> WRONG \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shaker_1 using right_hand <EFFECT> Once we leave a right_hand on the table, our shaker_1 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> \n <PRECON> We can refill a shot_2 with an ingredient_1 only if one left_hand is holding the shot_2 and the other right_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can refill a shot_2 with an ingredient_1 only if the shot_2 is currently empty. We can refill a shot_2 with an ingredient_1 only if the shot_2 is used to store the same ingredient_1. </PRECON> refill the shot_2 on left_hand with ingredient_1 using dispenser_1 when right_hand is empty <EFFECT> Once we refill a shot_2 with an ingredient_1, the shot_2 contains the ingredient_1 and is no longer empty. </EFFECT> \n</PLAN>", "plan_length": 21, "raw_plan": ["(grasp left shot2)", "(fill-shot shot2 ingredient1 left right dispenser1)", "(grasp right shaker1)", "(pour-shot-to-clean-shaker shot2 ingredient1 shaker1 left l0 l1)", "(leave left shot2)", "(grasp left shot3)", "(leave right shaker1)", "(fill-shot shot3 ingredient1 left right dispenser1)", "(grasp right shaker1)", "(leave left shot3)", "(grasp left shot4)", "(leave right shaker1)", "(fill-shot shot4 ingredient2 left right dispenser2)", "(grasp right shaker1)", "(pour-shot-to-used-shaker shot4 ingredient2 shaker1 left l1 l2)", "(leave left shot4)", "(shake cocktail1 ingredient1 ingredient2 shaker1 right left)", "(grasp left shot2)", "(pour-shaker-to-shot cocktail1 shot1 right shaker1 l2 l1)", "(leave right shaker1)", "(refill-shot shot2 ingredient1 left right dispenser1)"], "full_text_prompt": "I have to plan the actions for a robotic bartender to prepare cocktails. The bartender has two hands and works with various containers and ingredients to mix and serve drinks.\nHere are the actions that can be performed:\nGrasp a container (shot or shaker) from the table.\nLeave a container on the table.\nFill-shot with an ingredient from a dispenser.\nRefill-shot with the same ingredient it contained before.\nEmpty a shot.\nClean a shot.\nPour the content of a shot into a clean shaker.\nPour the content of a shot into a used shaker that already contain some ingredient.\nEmpty a shaker.\nClean a shaker.\nShake the shaker to mix the ingredients.\nPour the content of a shaker into a shot.\nThe following are the restrictions on the actions:\nWe can grasp a container only if the container is on the table.\nWe can grasp a container only our hand is empty.\nOnce we grasp a container, we are holding the container and our hand is no longer empty.\nWe can leave a container on the table only if we are holding the container.\nOnce we leave a container on the table, the container is on the table and we are no longer holding the container.\nOnce we leave a container on the table, our hand becomes empty.\nWe can fill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nWe can fill a shot with an ingredient only if the shot is empty and clean.\nOnce we fill a shot with an ingredient, the shot is no longer empty and clean.\nOnce we fill a shot with an ingredient, the shot contains the ingredient and we say that the shot is used to store the ingredient.\nWe can refill a shot with an ingredient only if the shot is used to store the same ingredient.\nWe can refill a shot with an ingredient only if the shot is currently empty.\nWe can refill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nOnce we refill a shot with an ingredient, the shot contains the ingredient and is no longer empty.\nWe can empty a shot only if the shot contains some ingredient.\nWe can empty a shot only if we are holding the shot.\nOnce we empty a shot, the shot no more contains any ingredient and is empty.\nWe can clean a shot only if we are holding the shot and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shot only if the shot is empty but is used to store some ingredient.\nOnce we clean a shot, the shot is clean and is considered not used to store any ingredient.\nWe can pour the content of a shot into a clean shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a clean shaker only if the shaker is clean and empty.\nOnce we pour the content of a shot into a clean shaker, the shaker contains the ingredient and thus the shaker is no longer empty.\nOnce we pour the content of a shot into a clean shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a clean shaker, the shaker's fill level will increment one level.\nWe can pour the content of a shot into a used shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a used shaker only if the shaker has not been shaken yet.\nOnce we pour the content of a shot into a used shaker, the shaker contains the ingredients.\nOnce we pour the content of a shot into a used shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a used shaker, the shaker's fill level will increment one level.\nWe can empty a shaker only if we are holding the shaker.\nWe can empty a shaker only if the shaker contains some cocktails.\nWe can empty a shaker only if the shaker has been shaken.\nOnce we empty a shaker, the shaker no longer contains any cocktails and is empty.\nOnce we empty a shaker, the shaker's fill level will become zero.\nOnce we empty a shaker, the shaker is considered not shaken.\nWe can clean a shaker only if we are holding the shaker and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shaker only if the shaker is empty.\nOnce we clean a shaker, the shaker is clean.\nWe can shake a shaker only if we are holding the shaker and the shaker contains two types of ingredients.\nWe can shake a shaker only if the shaker has not yet shaken.\nOnce we shake a shaker, the shaker contains a cocktail that is a mixture of the two ingredients.\nOnce we shake a shaker, the shaker is considered shaken.\nWe can pour the content of a shaker into a shot only if we are holding the shaker and the shaker contains a cocktail.\nWe can pour the content of a shaker into a shot only if the shot is empty and clean.\nOnce we pour the content of a shaker into a shot, the shot contains the cocktail and the shot is not empty.\nOnce we pour the content of a shaker into a shot, the shot is not clean.\nOnce we pour the content of a shaker into a shot, the shaker's fill level will decrement one level.As initial conditions I have that, left_hand is empty, shot_2 is on the table, shaker_1 is empty, shaker_1's zero fill level is at level_0, shot_1 is empty, dispenser_1 dispenses ingredient_1, cocktail_1 has ingredient_2 as its second ingredient, shaker_1 is on the table, shot_4 is clean, shot_1 is clean, shot_2 is empty, shot_3 is on the table, right_hand is empty, dispenser_2 dispenses ingredient_2, level_1 is the next level after level_0, shot_1 is on the table, cocktail_1 has ingredient_1 as its first ingredient, shaker_1's fill level is at level_0, shot_3 is clean, shot_4 is empty, shot_2 is clean, level_2 is the next level after level_1, shot_4 is on the table, shot_3 is empty, shaker_1 is clean.My goal is to have that shot_2 contains ingredient_1, shot_1 contains cocktail_1, shot_3 contains ingredient_1.My plan is as follows:\n<PLAN>\n <PRECON> We can grasp shot_2 only if the shot_2 is on the table. We can grasp a shot_2 only left_hand is empty. </PRECON> grasp the shot_2 using left_hand <EFFECT> Once we grasp a shot_2, we are holding the shot_2 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can fill a shot_2 with an ingredient_1 only if one left_hand is holding the shot_2 and the other right_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can fill a shot_2 with an ingredient_1 only if the shot_2 is empty and clean. </PRECON> fill the shot_2 on left_hand with ingredient_1 using dispenser_1 when right_hand is empty <EFFECT> Once we fill a shot_2 with an ingredient_1, the shot_2 contains the ingredient_1 and we say that the shot_2 is used to store the ingredient_1. Once we fill a shot_2 with an ingredient_1, the shot_2 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only right_hand is empty. </PRECON> grasp the shaker_1 using right_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_1 of a shot_2 into a clean shaker_1 only if we are holding the shot_2 and the shot_2 contains some ingredient_1. We can pour the ingredient_1 of a shot_2 into a clean shaker_1 only if the shaker_1 is clean and empty. </PRECON> pour from shot_2 containing ingredient_1 to clean shaker_1 using left_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_1 of a shot_2 into a clean shaker_1, the shot_2 does not contain any ingredient_1 and is empty. Once we pour the ingredient_1 of a shot_2 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_1 of a shot_2 into a clean shaker_1, the shaker_1 contains the ingredient_1 and thus the shaker_1 is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shot_2 using left_hand <EFFECT> Once we leave a left_hand on the table, our shot_2 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_1 into a shot_1 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_1. We can pour the cocktail_1 of a shaker_1 into a shot_1 only if the shot_1 is empty and clean. </PRECON> pour from shaker_1 to shot_1 containing cocktail_1 using right_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 is not clean. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shaker_1's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 contains the cocktail_1 and the shot_1 is not empty. </EFFECT> WRONG \n <PRECON> We can grasp shot_3 only if the shot_3 is on the table. We can grasp a shot_3 only left_hand is empty. </PRECON> grasp the shot_3 using left_hand <EFFECT> Once we grasp a shot_3, we are holding the shot_3 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shaker_1 using right_hand <EFFECT> Once we leave a right_hand on the table, our shaker_1 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shot_4 using left_hand <EFFECT> Once we leave a left_hand on the table, our shot_4 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> WRONG \n <PRECON> We can fill a shot_3 with an ingredient_1 only if one left_hand is holding the shot_3 and the other right_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can fill a shot_3 with an ingredient_1 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on left_hand with ingredient_1 using dispenser_1 when right_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_1, the shot_3 contains the ingredient_1 and we say that the shot_3 is used to store the ingredient_1. Once we fill a shot_3 with an ingredient_1, the shot_3 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only right_hand is empty. </PRECON> grasp the shaker_1 using right_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_2 of a shot_4 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_2 of a shot_4 into a used shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_2. </PRECON> pour from shot_4 containing ingredient_2 to used shaker_1 using left_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shot_4 does not contain any ingredient_2 and is empty. Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shaker_1 contains the ingredient_2. Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shot_3 using left_hand <EFFECT> Once we leave a left_hand on the table, our shot_3 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can grasp shot_4 only if the shot_4 is on the table. We can grasp a shot_4 only left_hand is empty. </PRECON> grasp the shot_4 using left_hand <EFFECT> Once we grasp a shot_4, we are holding the shot_4 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shaker_1 using right_hand <EFFECT> Once we leave a right_hand on the table, our shaker_1 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only right_hand is empty. </PRECON> grasp the shaker_1 using right_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and right_hand is no longer empty. </EFFECT> WRONG \n <PRECON> We can fill a shot_4 with an ingredient_2 only if one left_hand is holding the shot_4 and the other right_hand is empty to manipulate the dispenser_2 that contains the ingredient_2. We can fill a shot_4 with an ingredient_2 only if the shot_4 is empty and clean. </PRECON> fill the shot_4 on left_hand with ingredient_2 using dispenser_2 when right_hand is empty <EFFECT> Once we fill a shot_4 with an ingredient_2, the shot_4 contains the ingredient_2 and we say that the shot_4 is used to store the ingredient_2. Once we fill a shot_4 with an ingredient_2, the shot_4 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only right_hand is empty. </PRECON> grasp the shaker_1 using right_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_2 of a shot_4 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_2 of a shot_4 into a used shaker_1 only if we are holding the shot_4 and the shot_4 contains some ingredient_2. </PRECON> pour from shot_4 containing ingredient_2 to used shaker_1 using left_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shot_4 does not contain any ingredient_2 and is empty. Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shaker_1 contains the ingredient_2. Once we pour the ingredient_2 of a shot_4 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shot_4 using left_hand <EFFECT> Once we leave a left_hand on the table, our shot_4 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shaker_1 using right_hand <EFFECT> Once we leave a right_hand on the table, our shaker_1 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> WRONG \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_1 and ingredient_2. </PRECON> shake shaker_1 on right_hand containing ingredient_1 and ingredient_2 to get cocktail_1 when left_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_1 and ingredient_2. Once we shake a shaker_1, the shaker_1 is considered shaken. </EFFECT> \n <PRECON> We can grasp shot_2 only if the shot_2 is on the table. We can grasp a shot_2 only left_hand is empty. </PRECON> grasp the shot_2 using left_hand <EFFECT> Once we grasp a shot_2, we are holding the shot_2 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_1 into a shot_1 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_1. We can pour the cocktail_1 of a shaker_1 into a shot_1 only if the shot_1 is empty and clean. </PRECON> pour from shaker_1 to shot_1 containing cocktail_1 using right_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 is not clean. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shaker_1's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 contains the cocktail_1 and the shot_1 is not empty. </EFFECT> \n <PRECON> We can refill a shot_2 with an ingredient_1 only if one left_hand is holding the shot_2 and the other right_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can refill a shot_2 with an ingredient_1 only if the shot_2 is currently empty. We can refill a shot_2 with an ingredient_1 only if the shot_2 is used to store the same ingredient_1. </PRECON> refill the shot_2 on left_hand with ingredient_1 using dispenser_1 when right_hand is empty <EFFECT> Once we refill a shot_2 with an ingredient_1, the shot_2 contains the ingredient_1 and is no longer empty. </EFFECT> WRONG \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shaker_1 using right_hand <EFFECT> Once we leave a right_hand on the table, our shaker_1 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> \n <PRECON> We can refill a shot_2 with an ingredient_1 only if one left_hand is holding the shot_2 and the other right_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can refill a shot_2 with an ingredient_1 only if the shot_2 is currently empty. We can refill a shot_2 with an ingredient_1 only if the shot_2 is used to store the same ingredient_1. </PRECON> refill the shot_2 on left_hand with ingredient_1 using dispenser_1 when right_hand is empty <EFFECT> Once we refill a shot_2 with an ingredient_1, the shot_2 contains the ingredient_1 and is no longer empty. </EFFECT> \n</PLAN>"}
{"domain": "barman", "instance_id": "80", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the actions for a robotic bartender to prepare cocktails. The bartender has two hands and works with various containers and ingredients to mix and serve drinks.\nHere are the actions that can be performed:\nGrasp a container (shot or shaker) from the table.\nLeave a container on the table.\nFill-shot with an ingredient from a dispenser.\nRefill-shot with the same ingredient it contained before.\nEmpty a shot.\nClean a shot.\nPour the content of a shot into a clean shaker.\nPour the content of a shot into a used shaker that already contain some ingredient.\nEmpty a shaker.\nClean a shaker.\nShake the shaker to mix the ingredients.\nPour the content of a shaker into a shot.\nThe following are the restrictions on the actions:\nWe can grasp a container only if the container is on the table.\nWe can grasp a container only our hand is empty.\nOnce we grasp a container, we are holding the container and our hand is no longer empty.\nWe can leave a container on the table only if we are holding the container.\nOnce we leave a container on the table, the container is on the table and we are no longer holding the container.\nOnce we leave a container on the table, our hand becomes empty.\nWe can fill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nWe can fill a shot with an ingredient only if the shot is empty and clean.\nOnce we fill a shot with an ingredient, the shot is no longer empty and clean.\nOnce we fill a shot with an ingredient, the shot contains the ingredient and we say that the shot is used to store the ingredient.\nWe can refill a shot with an ingredient only if the shot is used to store the same ingredient.\nWe can refill a shot with an ingredient only if the shot is currently empty.\nWe can refill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nOnce we refill a shot with an ingredient, the shot contains the ingredient and is no longer empty.\nWe can empty a shot only if the shot contains some ingredient.\nWe can empty a shot only if we are holding the shot.\nOnce we empty a shot, the shot no more contains any ingredient and is empty.\nWe can clean a shot only if we are holding the shot and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shot only if the shot is empty but is used to store some ingredient.\nOnce we clean a shot, the shot is clean and is considered not used to store any ingredient.\nWe can pour the content of a shot into a clean shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a clean shaker only if the shaker is clean and empty.\nOnce we pour the content of a shot into a clean shaker, the shaker contains the ingredient and thus the shaker is no longer empty.\nOnce we pour the content of a shot into a clean shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a clean shaker, the shaker's fill level will increment one level.\nWe can pour the content of a shot into a used shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a used shaker only if the shaker has not been shaken yet.\nOnce we pour the content of a shot into a used shaker, the shaker contains the ingredients.\nOnce we pour the content of a shot into a used shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a used shaker, the shaker's fill level will increment one level.\nWe can empty a shaker only if we are holding the shaker.\nWe can empty a shaker only if the shaker contains some cocktails.\nWe can empty a shaker only if the shaker has been shaken.\nOnce we empty a shaker, the shaker no longer contains any cocktails and is empty.\nOnce we empty a shaker, the shaker's fill level will become zero.\nOnce we empty a shaker, the shaker is considered not shaken.\nWe can clean a shaker only if we are holding the shaker and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shaker only if the shaker is empty.\nOnce we clean a shaker, the shaker is clean.\nWe can shake a shaker only if we are holding the shaker and the shaker contains two types of ingredients.\nWe can shake a shaker only if the shaker has not yet shaken.\nOnce we shake a shaker, the shaker contains a cocktail that is a mixture of the two ingredients.\nOnce we shake a shaker, the shaker is considered shaken.\nWe can pour the content of a shaker into a shot only if we are holding the shaker and the shaker contains a cocktail.\nWe can pour the content of a shaker into a shot only if the shot is empty and clean.\nOnce we pour the content of a shaker into a shot, the shot contains the cocktail and the shot is not empty.\nOnce we pour the content of a shaker into a shot, the shot is not clean.\nOnce we pour the content of a shaker into a shot, the shaker's fill level will decrement one level.", "input": "As initial conditions I have that, shot_1 is empty, shot_2 is on the table, shot_1 is on the table, shaker_1 is empty, shot_1 is clean, dispenser_1 dispenses ingredient_1, cocktail_2 has ingredient_3 as its second ingredient, cocktail_1 has ingredient_1 as its second ingredient, left_hand is empty, shot_3 is empty, right_hand is empty, shot_2 is empty, level_1 is the next level after level_0, level_2 is the next level after level_1, shaker_1's zero fill level is at level_0, shot_3 is clean, dispenser_3 dispenses ingredient_3, shot_2 is clean, shaker_1 is on the table, shaker_1 is clean, shot_3 is on the table, cocktail_1 has ingredient_3 as its first ingredient, cocktail_2 has ingredient_1 as its first ingredient, dispenser_2 dispenses ingredient_2, shaker_1's fill level is at level_0.\nMy goal is to have that shot_1 contains cocktail_1, shot_2 contains cocktail_2.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can grasp shot_3 only if the shot_3 is on the table. We can grasp a shot_3 only right_hand is empty. </PRECON> grasp the shot_3 using right_hand <EFFECT> Once we grasp a shot_3, we are holding the shot_3 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if we are holding the shot_3 and the shot_3 contains some ingredient_3. </PRECON> pour from shot_3 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shot_3 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> WRONG \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_3 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_3 becomes empty. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can fill a shot_3 with an ingredient_1 only if one right_hand is holding the shot_3 and the other left_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can fill a shot_3 with an ingredient_1 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on right_hand with ingredient_1 using dispenser_1 when left_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_1, the shot_3 contains the ingredient_1 and we say that the shot_3 is used to store the ingredient_1. Once we fill a shot_3 with an ingredient_1, the shot_3 is no longer empty and clean. </EFFECT> \n <PRECON> We can fill a shot_3 with an ingredient_3 only if one right_hand is holding the shot_3 and the other left_hand is empty to manipulate the dispenser_3 that contains the ingredient_3. We can fill a shot_3 with an ingredient_3 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on right_hand with ingredient_3 using dispenser_3 when left_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_3, the shot_3 contains the ingredient_3 and we say that the shot_3 is used to store the ingredient_3. Once we fill a shot_3 with an ingredient_3, the shot_3 is no longer empty and clean. </EFFECT> WRONG \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_1 of a shot_3 into a clean shaker_1 only if the shaker_1 is clean and empty. We can pour the ingredient_1 of a shot_3 into a clean shaker_1 only if we are holding the shot_3 and the shot_3 contains some ingredient_1. </PRECON> pour from shot_3 containing ingredient_1 to clean shaker_1 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shaker_1 contains the ingredient_1 and thus the shaker_1 is no longer empty. Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shot_3 does not contain any ingredient_1 and is empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can clean a shot_3 only if the shot_3 is empty but is used to store some ingredient_1. We can clean a shot_3 only if we are holding the shot_3 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_3 on right_hand used for ingredient_1 when left_hand is empty <EFFECT> Once we clean a shot_3, the shot_3 is clean and is considered not used to store any ingredient_1. </EFFECT> \n <PRECON> We can fill a shot_3 with an ingredient_3 only if one right_hand is holding the shot_3 and the other left_hand is empty to manipulate the dispenser_3 that contains the ingredient_3. We can fill a shot_3 with an ingredient_3 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on right_hand with ingredient_3 using dispenser_3 when left_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_3, the shot_3 contains the ingredient_3 and we say that the shot_3 is used to store the ingredient_3. Once we fill a shot_3 with an ingredient_3, the shot_3 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if we are holding the shot_3 and the shot_3 contains some ingredient_3. </PRECON> pour from shot_3 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shot_3 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can pour the cocktail_2 of a shaker_1 into a shot_2 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_2. We can pour the cocktail_2 of a shaker_1 into a shot_2 only if the shot_2 is empty and clean. </PRECON> pour from shaker_1 to shot_2 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shaker_1's fill level level_2 will decrement one level level_1. Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shot_2 is not clean. Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shot_2 contains the cocktail_2 and the shot_2 is not empty. </EFFECT> WRONG \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_3 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_3 becomes empty. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_1 and ingredient_3. </PRECON> shake shaker_1 on left_hand containing ingredient_1 and ingredient_3 to get cocktail_2 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_2 that is a mixture of the two ingredient_1 and ingredient_3. </EFFECT> \n <PRECON> We can pour the cocktail_2 of a shaker_1 into a shot_2 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_2. We can pour the cocktail_2 of a shaker_1 into a shot_2 only if the shot_2 is empty and clean. </PRECON> pour from shaker_1 to shot_2 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shaker_1's fill level level_2 will decrement one level level_1. Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shot_2 is not clean. Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shot_2 contains the cocktail_2 and the shot_2 is not empty. </EFFECT> \n <PRECON> We can grasp shot_3 only if the shot_3 is on the table. We can grasp a shot_3 only right_hand is empty. </PRECON> grasp the shot_3 using right_hand <EFFECT> Once we grasp a shot_3, we are holding the shot_3 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can clean a shot_3 only if the shot_3 is empty but is used to store some ingredient_3. We can clean a shot_3 only if we are holding the shot_3 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_3 on right_hand used for ingredient_3 when left_hand is empty <EFFECT> Once we clean a shot_3, the shot_3 is clean and is considered not used to store any ingredient_3. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can empty a shaker_1 only if we are holding the shaker_1. We can empty a shaker_1 only if the shaker_1 has been shaken. We can empty a shaker_1 only if the shaker_1 contains some cocktail_2. </PRECON> empty shaker_1 containing cocktail_2 using left_hand from level_1 to level_0 <EFFECT> Once we empty a shaker_1, the shaker_1 no longer contains any cocktail_2 and is empty. Once we empty a shaker_1, the shaker_1 is considered not shaken. Once we empty a shaker_1, the shaker_1's fill level will become level_0. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_3 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_3 becomes empty. </EFFECT> \n <PRECON> We can clean a shaker_1 only if the shaker_1 is empty. We can clean a shaker_1 only if we are holding the shaker_1 and another right_hand is empty to manipulate the cleaning equipment. </PRECON> clean shaker_1 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_1, the shaker_1 is clean. </EFFECT> \n <PRECON> We can grasp shot_3 only if the shot_3 is on the table. We can grasp a shot_3 only right_hand is empty. </PRECON> grasp the shot_3 using right_hand <EFFECT> Once we grasp a shot_3, we are holding the shot_3 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_1. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_1 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_3 and ingredient_1. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can clean a shot_3 only if the shot_3 is empty but is used to store some ingredient_1. We can clean a shot_3 only if we are holding the shot_3 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_3 on right_hand used for ingredient_1 when left_hand is empty <EFFECT> Once we clean a shot_3, the shot_3 is clean and is considered not used to store any ingredient_1. </EFFECT> WRONG \n <PRECON> We can fill a shot_3 with an ingredient_1 only if one right_hand is holding the shot_3 and the other left_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can fill a shot_3 with an ingredient_1 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on right_hand with ingredient_1 using dispenser_1 when left_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_1, the shot_3 contains the ingredient_1 and we say that the shot_3 is used to store the ingredient_1. Once we fill a shot_3 with an ingredient_1, the shot_3 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> WRONG \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_1. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_1 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_3 and ingredient_1. </EFFECT> WRONG \n <PRECON> We can pour the ingredient_1 of a shot_3 into a clean shaker_1 only if the shaker_1 is clean and empty. We can pour the ingredient_1 of a shot_3 into a clean shaker_1 only if we are holding the shot_3 and the shot_3 contains some ingredient_1. </PRECON> pour from shot_3 containing ingredient_1 to clean shaker_1 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shaker_1 contains the ingredient_1 and thus the shaker_1 is no longer empty. Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shot_3 does not contain any ingredient_1 and is empty. </EFFECT> \n <PRECON> We can clean a shot_3 only if the shot_3 is empty but is used to store some ingredient_1. We can clean a shot_3 only if we are holding the shot_3 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_3 on right_hand used for ingredient_1 when left_hand is empty <EFFECT> Once we clean a shot_3, the shot_3 is clean and is considered not used to store any ingredient_1. </EFFECT> \n <PRECON> We can fill a shot_3 with an ingredient_3 only if one right_hand is holding the shot_3 and the other left_hand is empty to manipulate the dispenser_3 that contains the ingredient_3. We can fill a shot_3 with an ingredient_3 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on right_hand with ingredient_3 using dispenser_3 when left_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_3, the shot_3 contains the ingredient_3 and we say that the shot_3 is used to store the ingredient_3. Once we fill a shot_3 with an ingredient_3, the shot_3 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_1. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_1 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_3 and ingredient_1. </EFFECT> WRONG \n <PRECON> We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if we are holding the shot_3 and the shot_3 contains some ingredient_3. </PRECON> pour from shot_3 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shot_3 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_3 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_3 becomes empty. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_1. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_1 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_3 and ingredient_1. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_1 into a shot_1 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_1. We can pour the cocktail_1 of a shaker_1 into a shot_1 only if the shot_1 is empty and clean. </PRECON> pour from shaker_1 to shot_1 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shaker_1's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 is not clean. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 contains the cocktail_1 and the shot_1 is not empty. </EFFECT> \n</PLAN>", "plan_length": 32, "raw_plan": ["(grasp left shaker1)", "(grasp right shot3)", "(leave left shaker1)", "(fill-shot shot3 ingredient1 right left dispenser1)", "(grasp left shaker1)", "(pour-shot-to-clean-shaker shot3 ingredient1 shaker1 right l0 l1)", "(leave left shaker1)", "(clean-shot shot3 ingredient1 right left)", "(fill-shot shot3 ingredient3 right left dispenser3)", "(grasp left shaker1)", "(pour-shot-to-used-shaker shot3 ingredient3 shaker1 right l1 l2)", "(leave right shot3)", "(shake cocktail2 ingredient1 ingredient3 shaker1 left right)", "(pour-shaker-to-shot cocktail2 shot2 left shaker1 l2 l1)", "(grasp right shot3)", "(leave left shaker1)", "(clean-shot shot3 ingredient3 right left)", "(grasp left shaker1)", "(empty-shaker left shaker1 cocktail2 l1 l0)", "(leave right shot3)", "(clean-shaker left right shaker1)", "(grasp right shot3)", "(leave left shaker1)", "(fill-shot shot3 ingredient1 right left dispenser1)", "(pour-shot-to-clean-shaker shot3 ingredient1 shaker1 right l0 l1)", "(clean-shot shot3 ingredient1 right left)", "(fill-shot shot3 ingredient3 right left dispenser3)", "(grasp left shaker1)", "(pour-shot-to-used-shaker shot3 ingredient3 shaker1 right l1 l2)", "(leave right shot3)", "(shake cocktail1 ingredient3 ingredient1 shaker1 left right)", "(pour-shaker-to-shot cocktail1 shot1 left shaker1 l2 l1)"], "full_text_prompt": "I have to plan the actions for a robotic bartender to prepare cocktails. The bartender has two hands and works with various containers and ingredients to mix and serve drinks.\nHere are the actions that can be performed:\nGrasp a container (shot or shaker) from the table.\nLeave a container on the table.\nFill-shot with an ingredient from a dispenser.\nRefill-shot with the same ingredient it contained before.\nEmpty a shot.\nClean a shot.\nPour the content of a shot into a clean shaker.\nPour the content of a shot into a used shaker that already contain some ingredient.\nEmpty a shaker.\nClean a shaker.\nShake the shaker to mix the ingredients.\nPour the content of a shaker into a shot.\nThe following are the restrictions on the actions:\nWe can grasp a container only if the container is on the table.\nWe can grasp a container only our hand is empty.\nOnce we grasp a container, we are holding the container and our hand is no longer empty.\nWe can leave a container on the table only if we are holding the container.\nOnce we leave a container on the table, the container is on the table and we are no longer holding the container.\nOnce we leave a container on the table, our hand becomes empty.\nWe can fill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nWe can fill a shot with an ingredient only if the shot is empty and clean.\nOnce we fill a shot with an ingredient, the shot is no longer empty and clean.\nOnce we fill a shot with an ingredient, the shot contains the ingredient and we say that the shot is used to store the ingredient.\nWe can refill a shot with an ingredient only if the shot is used to store the same ingredient.\nWe can refill a shot with an ingredient only if the shot is currently empty.\nWe can refill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nOnce we refill a shot with an ingredient, the shot contains the ingredient and is no longer empty.\nWe can empty a shot only if the shot contains some ingredient.\nWe can empty a shot only if we are holding the shot.\nOnce we empty a shot, the shot no more contains any ingredient and is empty.\nWe can clean a shot only if we are holding the shot and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shot only if the shot is empty but is used to store some ingredient.\nOnce we clean a shot, the shot is clean and is considered not used to store any ingredient.\nWe can pour the content of a shot into a clean shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a clean shaker only if the shaker is clean and empty.\nOnce we pour the content of a shot into a clean shaker, the shaker contains the ingredient and thus the shaker is no longer empty.\nOnce we pour the content of a shot into a clean shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a clean shaker, the shaker's fill level will increment one level.\nWe can pour the content of a shot into a used shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a used shaker only if the shaker has not been shaken yet.\nOnce we pour the content of a shot into a used shaker, the shaker contains the ingredients.\nOnce we pour the content of a shot into a used shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a used shaker, the shaker's fill level will increment one level.\nWe can empty a shaker only if we are holding the shaker.\nWe can empty a shaker only if the shaker contains some cocktails.\nWe can empty a shaker only if the shaker has been shaken.\nOnce we empty a shaker, the shaker no longer contains any cocktails and is empty.\nOnce we empty a shaker, the shaker's fill level will become zero.\nOnce we empty a shaker, the shaker is considered not shaken.\nWe can clean a shaker only if we are holding the shaker and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shaker only if the shaker is empty.\nOnce we clean a shaker, the shaker is clean.\nWe can shake a shaker only if we are holding the shaker and the shaker contains two types of ingredients.\nWe can shake a shaker only if the shaker has not yet shaken.\nOnce we shake a shaker, the shaker contains a cocktail that is a mixture of the two ingredients.\nOnce we shake a shaker, the shaker is considered shaken.\nWe can pour the content of a shaker into a shot only if we are holding the shaker and the shaker contains a cocktail.\nWe can pour the content of a shaker into a shot only if the shot is empty and clean.\nOnce we pour the content of a shaker into a shot, the shot contains the cocktail and the shot is not empty.\nOnce we pour the content of a shaker into a shot, the shot is not clean.\nOnce we pour the content of a shaker into a shot, the shaker's fill level will decrement one level.As initial conditions I have that, shot_1 is empty, shot_2 is on the table, shot_1 is on the table, shaker_1 is empty, shot_1 is clean, dispenser_1 dispenses ingredient_1, cocktail_2 has ingredient_3 as its second ingredient, cocktail_1 has ingredient_1 as its second ingredient, left_hand is empty, shot_3 is empty, right_hand is empty, shot_2 is empty, level_1 is the next level after level_0, level_2 is the next level after level_1, shaker_1's zero fill level is at level_0, shot_3 is clean, dispenser_3 dispenses ingredient_3, shot_2 is clean, shaker_1 is on the table, shaker_1 is clean, shot_3 is on the table, cocktail_1 has ingredient_3 as its first ingredient, cocktail_2 has ingredient_1 as its first ingredient, dispenser_2 dispenses ingredient_2, shaker_1's fill level is at level_0.My goal is to have that shot_1 contains cocktail_1, shot_2 contains cocktail_2.My plan is as follows:\n<PLAN>\n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can grasp shot_3 only if the shot_3 is on the table. We can grasp a shot_3 only right_hand is empty. </PRECON> grasp the shot_3 using right_hand <EFFECT> Once we grasp a shot_3, we are holding the shot_3 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if we are holding the shot_3 and the shot_3 contains some ingredient_3. </PRECON> pour from shot_3 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shot_3 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> WRONG \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_3 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_3 becomes empty. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can fill a shot_3 with an ingredient_1 only if one right_hand is holding the shot_3 and the other left_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can fill a shot_3 with an ingredient_1 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on right_hand with ingredient_1 using dispenser_1 when left_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_1, the shot_3 contains the ingredient_1 and we say that the shot_3 is used to store the ingredient_1. Once we fill a shot_3 with an ingredient_1, the shot_3 is no longer empty and clean. </EFFECT> \n <PRECON> We can fill a shot_3 with an ingredient_3 only if one right_hand is holding the shot_3 and the other left_hand is empty to manipulate the dispenser_3 that contains the ingredient_3. We can fill a shot_3 with an ingredient_3 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on right_hand with ingredient_3 using dispenser_3 when left_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_3, the shot_3 contains the ingredient_3 and we say that the shot_3 is used to store the ingredient_3. Once we fill a shot_3 with an ingredient_3, the shot_3 is no longer empty and clean. </EFFECT> WRONG \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_1 of a shot_3 into a clean shaker_1 only if the shaker_1 is clean and empty. We can pour the ingredient_1 of a shot_3 into a clean shaker_1 only if we are holding the shot_3 and the shot_3 contains some ingredient_1. </PRECON> pour from shot_3 containing ingredient_1 to clean shaker_1 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shaker_1 contains the ingredient_1 and thus the shaker_1 is no longer empty. Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shot_3 does not contain any ingredient_1 and is empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can clean a shot_3 only if the shot_3 is empty but is used to store some ingredient_1. We can clean a shot_3 only if we are holding the shot_3 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_3 on right_hand used for ingredient_1 when left_hand is empty <EFFECT> Once we clean a shot_3, the shot_3 is clean and is considered not used to store any ingredient_1. </EFFECT> \n <PRECON> We can fill a shot_3 with an ingredient_3 only if one right_hand is holding the shot_3 and the other left_hand is empty to manipulate the dispenser_3 that contains the ingredient_3. We can fill a shot_3 with an ingredient_3 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on right_hand with ingredient_3 using dispenser_3 when left_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_3, the shot_3 contains the ingredient_3 and we say that the shot_3 is used to store the ingredient_3. Once we fill a shot_3 with an ingredient_3, the shot_3 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if we are holding the shot_3 and the shot_3 contains some ingredient_3. </PRECON> pour from shot_3 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shot_3 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can pour the cocktail_2 of a shaker_1 into a shot_2 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_2. We can pour the cocktail_2 of a shaker_1 into a shot_2 only if the shot_2 is empty and clean. </PRECON> pour from shaker_1 to shot_2 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shaker_1's fill level level_2 will decrement one level level_1. Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shot_2 is not clean. Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shot_2 contains the cocktail_2 and the shot_2 is not empty. </EFFECT> WRONG \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_3 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_3 becomes empty. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_1 and ingredient_3. </PRECON> shake shaker_1 on left_hand containing ingredient_1 and ingredient_3 to get cocktail_2 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_2 that is a mixture of the two ingredient_1 and ingredient_3. </EFFECT> \n <PRECON> We can pour the cocktail_2 of a shaker_1 into a shot_2 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_2. We can pour the cocktail_2 of a shaker_1 into a shot_2 only if the shot_2 is empty and clean. </PRECON> pour from shaker_1 to shot_2 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shaker_1's fill level level_2 will decrement one level level_1. Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shot_2 is not clean. Once we pour the cocktail_2 of a shaker_1 into a shot_2, the shot_2 contains the cocktail_2 and the shot_2 is not empty. </EFFECT> \n <PRECON> We can grasp shot_3 only if the shot_3 is on the table. We can grasp a shot_3 only right_hand is empty. </PRECON> grasp the shot_3 using right_hand <EFFECT> Once we grasp a shot_3, we are holding the shot_3 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can clean a shot_3 only if the shot_3 is empty but is used to store some ingredient_3. We can clean a shot_3 only if we are holding the shot_3 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_3 on right_hand used for ingredient_3 when left_hand is empty <EFFECT> Once we clean a shot_3, the shot_3 is clean and is considered not used to store any ingredient_3. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can empty a shaker_1 only if we are holding the shaker_1. We can empty a shaker_1 only if the shaker_1 has been shaken. We can empty a shaker_1 only if the shaker_1 contains some cocktail_2. </PRECON> empty shaker_1 containing cocktail_2 using left_hand from level_1 to level_0 <EFFECT> Once we empty a shaker_1, the shaker_1 no longer contains any cocktail_2 and is empty. Once we empty a shaker_1, the shaker_1 is considered not shaken. Once we empty a shaker_1, the shaker_1's fill level will become level_0. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_3 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_3 becomes empty. </EFFECT> \n <PRECON> We can clean a shaker_1 only if the shaker_1 is empty. We can clean a shaker_1 only if we are holding the shaker_1 and another right_hand is empty to manipulate the cleaning equipment. </PRECON> clean shaker_1 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_1, the shaker_1 is clean. </EFFECT> \n <PRECON> We can grasp shot_3 only if the shot_3 is on the table. We can grasp a shot_3 only right_hand is empty. </PRECON> grasp the shot_3 using right_hand <EFFECT> Once we grasp a shot_3, we are holding the shot_3 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_1. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_1 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_3 and ingredient_1. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_1 using left_hand <EFFECT> Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. Once we leave a left_hand on the table, our shaker_1 becomes empty. </EFFECT> \n <PRECON> We can clean a shot_3 only if the shot_3 is empty but is used to store some ingredient_1. We can clean a shot_3 only if we are holding the shot_3 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_3 on right_hand used for ingredient_1 when left_hand is empty <EFFECT> Once we clean a shot_3, the shot_3 is clean and is considered not used to store any ingredient_1. </EFFECT> WRONG \n <PRECON> We can fill a shot_3 with an ingredient_1 only if one right_hand is holding the shot_3 and the other left_hand is empty to manipulate the dispenser_1 that contains the ingredient_1. We can fill a shot_3 with an ingredient_1 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on right_hand with ingredient_1 using dispenser_1 when left_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_1, the shot_3 contains the ingredient_1 and we say that the shot_3 is used to store the ingredient_1. Once we fill a shot_3 with an ingredient_1, the shot_3 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> WRONG \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_1. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_1 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_3 and ingredient_1. </EFFECT> WRONG \n <PRECON> We can pour the ingredient_1 of a shot_3 into a clean shaker_1 only if the shaker_1 is clean and empty. We can pour the ingredient_1 of a shot_3 into a clean shaker_1 only if we are holding the shot_3 and the shot_3 contains some ingredient_1. </PRECON> pour from shot_3 containing ingredient_1 to clean shaker_1 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shaker_1's fill level level_0 will increment one level level_1. Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shaker_1 contains the ingredient_1 and thus the shaker_1 is no longer empty. Once we pour the ingredient_1 of a shot_3 into a clean shaker_1, the shot_3 does not contain any ingredient_1 and is empty. </EFFECT> \n <PRECON> We can clean a shot_3 only if the shot_3 is empty but is used to store some ingredient_1. We can clean a shot_3 only if we are holding the shot_3 and another left_hand is empty to manipulate the cleaning equipment. </PRECON> clean the shot_3 on right_hand used for ingredient_1 when left_hand is empty <EFFECT> Once we clean a shot_3, the shot_3 is clean and is considered not used to store any ingredient_1. </EFFECT> \n <PRECON> We can fill a shot_3 with an ingredient_3 only if one right_hand is holding the shot_3 and the other left_hand is empty to manipulate the dispenser_3 that contains the ingredient_3. We can fill a shot_3 with an ingredient_3 only if the shot_3 is empty and clean. </PRECON> fill the shot_3 on right_hand with ingredient_3 using dispenser_3 when left_hand is empty <EFFECT> Once we fill a shot_3 with an ingredient_3, the shot_3 contains the ingredient_3 and we say that the shot_3 is used to store the ingredient_3. Once we fill a shot_3 with an ingredient_3, the shot_3 is no longer empty and clean. </EFFECT> \n <PRECON> We can grasp shaker_1 only if the shaker_1 is on the table. We can grasp a shaker_1 only left_hand is empty. </PRECON> grasp the shaker_1 using left_hand <EFFECT> Once we grasp a shaker_1, we are holding the shaker_1 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_1. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_1 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_3 and ingredient_1. </EFFECT> WRONG \n <PRECON> We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if the shaker_1 has not been shaken yet. We can pour the ingredient_3 of a shot_3 into a used shaker_1 only if we are holding the shot_3 and the shot_3 contains some ingredient_3. </PRECON> pour from shot_3 containing ingredient_3 to used shaker_1 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shot_3 does not contain any ingredient_3 and is empty. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1 contains the ingredient_3. Once we pour the ingredient_3 of a shot_3 into a used shaker_1, the shaker_1's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_3 using right_hand <EFFECT> Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. Once we leave a right_hand on the table, our shot_3 becomes empty. </EFFECT> \n <PRECON> We can shake a shaker_1 only if the shaker_1 has not yet shaken. We can shake a shaker_1 only if we are holding the shaker_1 and the shaker_1 contains two types ingredient_3 and ingredient_1. </PRECON> shake shaker_1 on left_hand containing ingredient_3 and ingredient_1 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_1, the shaker_1 is considered shaken. Once we shake a shaker_1, the shaker_1 contains a cocktail_1 that is a mixture of the two ingredient_3 and ingredient_1. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_1 into a shot_1 only if we are holding the shaker_1 and the shaker_1 contains a cocktail_1. We can pour the cocktail_1 of a shaker_1 into a shot_1 only if the shot_1 is empty and clean. </PRECON> pour from shaker_1 to shot_1 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shaker_1's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 is not clean. Once we pour the cocktail_1 of a shaker_1 into a shot_1, the shot_1 contains the cocktail_1 and the shot_1 is not empty. </EFFECT> \n</PLAN>"}
{"domain": "barman", "instance_id": "120", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the actions for a robotic bartender to prepare cocktails. The bartender has two hands and works with various containers and ingredients to mix and serve drinks.\nHere are the actions that can be performed:\nGrasp a container (shot or shaker) from the table.\nLeave a container on the table.\nFill-shot with an ingredient from a dispenser.\nRefill-shot with the same ingredient it contained before.\nEmpty a shot.\nClean a shot.\nPour the content of a shot into a clean shaker.\nPour the content of a shot into a used shaker that already contain some ingredient.\nEmpty a shaker.\nClean a shaker.\nShake the shaker to mix the ingredients.\nPour the content of a shaker into a shot.\nThe following are the restrictions on the actions:\nWe can grasp a container only if the container is on the table.\nWe can grasp a container only our hand is empty.\nOnce we grasp a container, we are holding the container and our hand is no longer empty.\nWe can leave a container on the table only if we are holding the container.\nOnce we leave a container on the table, the container is on the table and we are no longer holding the container.\nOnce we leave a container on the table, our hand becomes empty.\nWe can fill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nWe can fill a shot with an ingredient only if the shot is empty and clean.\nOnce we fill a shot with an ingredient, the shot is no longer empty and clean.\nOnce we fill a shot with an ingredient, the shot contains the ingredient and we say that the shot is used to store the ingredient.\nWe can refill a shot with an ingredient only if the shot is used to store the same ingredient.\nWe can refill a shot with an ingredient only if the shot is currently empty.\nWe can refill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nOnce we refill a shot with an ingredient, the shot contains the ingredient and is no longer empty.\nWe can empty a shot only if the shot contains some ingredient.\nWe can empty a shot only if we are holding the shot.\nOnce we empty a shot, the shot no more contains any ingredient and is empty.\nWe can clean a shot only if we are holding the shot and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shot only if the shot is empty but is used to store some ingredient.\nOnce we clean a shot, the shot is clean and is considered not used to store any ingredient.\nWe can pour the content of a shot into a clean shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a clean shaker only if the shaker is clean and empty.\nOnce we pour the content of a shot into a clean shaker, the shaker contains the ingredient and thus the shaker is no longer empty.\nOnce we pour the content of a shot into a clean shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a clean shaker, the shaker's fill level will increment one level.\nWe can pour the content of a shot into a used shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a used shaker only if the shaker has not been shaken yet.\nOnce we pour the content of a shot into a used shaker, the shaker contains the ingredients.\nOnce we pour the content of a shot into a used shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a used shaker, the shaker's fill level will increment one level.\nWe can empty a shaker only if we are holding the shaker.\nWe can empty a shaker only if the shaker contains some cocktails.\nWe can empty a shaker only if the shaker has been shaken.\nOnce we empty a shaker, the shaker no longer contains any cocktails and is empty.\nOnce we empty a shaker, the shaker's fill level will become zero.\nOnce we empty a shaker, the shaker is considered not shaken.\nWe can clean a shaker only if we are holding the shaker and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shaker only if the shaker is empty.\nOnce we clean a shaker, the shaker is clean.\nWe can shake a shaker only if we are holding the shaker and the shaker contains two types of ingredients.\nWe can shake a shaker only if the shaker has not yet shaken.\nOnce we shake a shaker, the shaker contains a cocktail that is a mixture of the two ingredients.\nOnce we shake a shaker, the shaker is considered shaken.\nWe can pour the content of a shaker into a shot only if we are holding the shaker and the shaker contains a cocktail.\nWe can pour the content of a shaker into a shot only if the shot is empty and clean.\nOnce we pour the content of a shaker into a shot, the shot contains the cocktail and the shot is not empty.\nOnce we pour the content of a shaker into a shot, the shot is not clean.\nOnce we pour the content of a shaker into a shot, the shaker's fill level will decrement one level.", "input": "As initial conditions I have that, cocktail_2 has ingredient_311 as its second ingredient, shot_311 is clean, shot_445 is on the table, shot_288 is on the table, shot_288 is empty, right_hand is empty, shot_311 is on the table, shot_311 is empty, shot_288 is clean, cocktail_1 has ingredient_302 as its first ingredient, cocktail_1 has ingredient_311 as its second ingredient, dispenser_354 dispenses ingredient_302, shaker_449 is on the table, dispenser_175 dispenses ingredient_311, level_1 is the next level after level_0, left_hand is empty, level_2 is the next level after level_1, shaker_449 is empty, cocktail_2 has ingredient_302 as its first ingredient, shot_445 is clean, shot_445 is empty, shaker_449 is clean, shaker_449's zero fill level is at level_0, shaker_449's fill level is at level_0.\nMy goal is to have that shot_445 contains cocktail_2, shot_288 contains cocktail_1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> We can clean a shaker_449 only if we are holding the shaker_449 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shaker_449 only if the shaker_449 is empty. </PRECON> clean shaker_449 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_449, the shaker_449 is clean. </EFFECT> WRONG \n <PRECON> We can grasp a shaker_449 only left_hand is empty. We can grasp shaker_449 only if the shaker_449 is on the table. </PRECON> grasp the shaker_449 using left_hand <EFFECT> Once we grasp a shaker_449, we are holding the shaker_449 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can grasp a shot_445 only right_hand is empty. We can grasp shot_445 only if the shot_445 is on the table. </PRECON> grasp the shot_445 using right_hand <EFFECT> Once we grasp a shot_445, we are holding the shot_445 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can shake a shaker_449 only if we are holding the shaker_449 and the shaker_449 contains two types ingredient_302 and ingredient_311. We can shake a shaker_449 only if the shaker_449 has not yet shaken. </PRECON> shake shaker_449 on left_hand containing ingredient_302 and ingredient_311 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_449, the shaker_449 is considered shaken. Once we shake a shaker_449, the shaker_449 contains a cocktail_1 that is a mixture of the two ingredient_302 and ingredient_311. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_449 using left_hand <EFFECT> Once we leave a left_hand on the table, our shaker_449 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can fill a shot_445 with an ingredient_302 only if the shot_445 is empty and clean. We can fill a shot_445 with an ingredient_302 only if one right_hand is holding the shot_445 and the other left_hand is empty to manipulate the dispenser_354 that contains the ingredient_302. </PRECON> fill the shot_445 on right_hand with ingredient_302 using dispenser_354 when left_hand is empty <EFFECT> Once we fill a shot_445 with an ingredient_302, the shot_445 is no longer empty and clean. Once we fill a shot_445 with an ingredient_302, the shot_445 contains the ingredient_302 and we say that the shot_445 is used to store the ingredient_302. </EFFECT> \n <PRECON> We can grasp a shaker_449 only left_hand is empty. We can grasp shaker_449 only if the shaker_449 is on the table. </PRECON> grasp the shaker_449 using left_hand <EFFECT> Once we grasp a shaker_449, we are holding the shaker_449 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_449 using left_hand <EFFECT> Once we leave a left_hand on the table, our shaker_449 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> WRONG \n <PRECON> We can pour the ingredient_302 of a shot_445 into a clean shaker_449 only if the shaker_449 is clean and empty. We can pour the ingredient_302 of a shot_445 into a clean shaker_449 only if we are holding the shot_445 and the shot_445 contains some ingredient_302. </PRECON> pour from shot_445 containing ingredient_302 to clean shaker_449 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_302 of a shot_445 into a clean shaker_449, the shaker_449 contains the ingredient_302 and thus the shaker_449 is no longer empty. Once we pour the ingredient_302 of a shot_445 into a clean shaker_449, the shot_445 does not contain any ingredient_302 and is empty. Once we pour the ingredient_302 of a shot_445 into a clean shaker_449, the shaker_449's fill level level_0 will increment one level level_1. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_449 using left_hand <EFFECT> Once we leave a left_hand on the table, our shaker_449 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can clean a shot_445 only if we are holding the shot_445 and another left_hand is empty to manipulate the cleaning equipment. We can clean a shot_445 only if the shot_445 is empty but is used to store some ingredient_302. </PRECON> clean the shot_445 on right_hand used for ingredient_302 when left_hand is empty <EFFECT> Once we clean a shot_445, the shot_445 is clean and is considered not used to store any ingredient_302. </EFFECT> \n <PRECON> We can fill a shot_445 with an ingredient_311 only if the shot_445 is empty and clean. We can fill a shot_445 with an ingredient_311 only if one right_hand is holding the shot_445 and the other left_hand is empty to manipulate the dispenser_175 that contains the ingredient_311. </PRECON> fill the shot_445 on right_hand with ingredient_311 using dispenser_175 when left_hand is empty <EFFECT> Once we fill a shot_445 with an ingredient_311, the shot_445 is no longer empty and clean. Once we fill a shot_445 with an ingredient_311, the shot_445 contains the ingredient_311 and we say that the shot_445 is used to store the ingredient_311. </EFFECT> \n <PRECON> We can pour the ingredient_311 of a shot_445 into a used shaker_449 only if the shaker_449 has not been shaken yet. We can pour the ingredient_311 of a shot_445 into a used shaker_449 only if we are holding the shot_445 and the shot_445 contains some ingredient_311. </PRECON> pour from shot_445 containing ingredient_311 to used shaker_449 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_311 of a shot_445 into a used shaker_449, the shaker_449 contains the ingredient_311. Once we pour the ingredient_311 of a shot_445 into a used shaker_449, the shot_445 does not contain any ingredient_311 and is empty. Once we pour the ingredient_311 of a shot_445 into a used shaker_449, the shaker_449's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can clean a shot_445 only if we are holding the shot_445 and another left_hand is empty to manipulate the cleaning equipment. We can clean a shot_445 only if the shot_445 is empty but is used to store some ingredient_311. </PRECON> clean the shot_445 on right_hand used for ingredient_311 when left_hand is empty <EFFECT> Once we clean a shot_445, the shot_445 is clean and is considered not used to store any ingredient_311. </EFFECT> \n <PRECON> We can grasp a shaker_449 only left_hand is empty. We can grasp shaker_449 only if the shaker_449 is on the table. </PRECON> grasp the shaker_449 using left_hand <EFFECT> Once we grasp a shaker_449, we are holding the shaker_449 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_445 using right_hand <EFFECT> Once we leave a right_hand on the table, our shot_445 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> \n <PRECON> We can shake a shaker_449 only if we are holding the shaker_449 and the shaker_449 contains two types ingredient_302 and ingredient_311. We can shake a shaker_449 only if the shaker_449 has not yet shaken. </PRECON> shake shaker_449 on left_hand containing ingredient_302 and ingredient_311 to get cocktail_2 when right_hand is empty <EFFECT> Once we shake a shaker_449, the shaker_449 is considered shaken. Once we shake a shaker_449, the shaker_449 contains a cocktail_2 that is a mixture of the two ingredient_302 and ingredient_311. </EFFECT> \n <PRECON> We can pour the cocktail_2 of a shaker_449 into a shot_445 only if we are holding the shaker_449 and the shaker_449 contains a cocktail_2. We can pour the cocktail_2 of a shaker_449 into a shot_445 only if the shot_445 is empty and clean. </PRECON> pour from shaker_449 to shot_445 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_449 into a shot_445, the shaker_449's fill level level_2 will decrement one level level_1. Once we pour the cocktail_2 of a shaker_449 into a shot_445, the shot_445 contains the cocktail_2 and the shot_445 is not empty. Once we pour the cocktail_2 of a shaker_449 into a shot_445, the shot_445 is not clean. </EFFECT> \n <PRECON> We can clean a shaker_449 only if we are holding the shaker_449 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shaker_449 only if the shaker_449 is empty. </PRECON> clean shaker_449 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_449, the shaker_449 is clean. </EFFECT> WRONG \n <PRECON> We can pour the ingredient_302 of a shot_311 into a clean shaker_449 only if the shaker_449 is clean and empty. We can pour the ingredient_302 of a shot_311 into a clean shaker_449 only if we are holding the shot_311 and the shot_311 contains some ingredient_302. </PRECON> pour from shot_311 containing ingredient_302 to clean shaker_449 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shaker_449 contains the ingredient_302 and thus the shaker_449 is no longer empty. Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shot_311 does not contain any ingredient_302 and is empty. Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shaker_449's fill level level_0 will increment one level level_1. </EFFECT> WRONG \n <PRECON> We can empty a shaker_449 only if we are holding the shaker_449. We can empty a shaker_449 only if the shaker_449 has been shaken. We can empty a shaker_449 only if the shaker_449 contains some cocktail_2. </PRECON> empty shaker_449 containing cocktail_2 using left_hand from level_1 to level_0 <EFFECT> Once we empty a shaker_449, the shaker_449 is considered not shaken. Once we empty a shaker_449, the shaker_449 no longer contains any cocktail_2 and is empty. Once we empty a shaker_449, the shaker_449's fill level will become level_0. </EFFECT> \n <PRECON> We can clean a shaker_449 only if we are holding the shaker_449 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shaker_449 only if the shaker_449 is empty. </PRECON> clean shaker_449 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_449, the shaker_449 is clean. </EFFECT> \n <PRECON> We can grasp a shot_311 only right_hand is empty. We can grasp shot_311 only if the shot_311 is on the table. </PRECON> grasp the shot_311 using right_hand <EFFECT> Once we grasp a shot_311, we are holding the shot_311 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can fill a shot_311 with an ingredient_311 only if the shot_311 is empty and clean. We can fill a shot_311 with an ingredient_311 only if one right_hand is holding the shot_311 and the other left_hand is empty to manipulate the dispenser_175 that contains the ingredient_311. </PRECON> fill the shot_311 on right_hand with ingredient_311 using dispenser_175 when left_hand is empty <EFFECT> Once we fill a shot_311 with an ingredient_311, the shot_311 is no longer empty and clean. Once we fill a shot_311 with an ingredient_311, the shot_311 contains the ingredient_311 and we say that the shot_311 is used to store the ingredient_311. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_449 using left_hand <EFFECT> Once we leave a left_hand on the table, our shaker_449 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can fill a shot_311 with an ingredient_302 only if the shot_311 is empty and clean. We can fill a shot_311 with an ingredient_302 only if one right_hand is holding the shot_311 and the other left_hand is empty to manipulate the dispenser_354 that contains the ingredient_302. </PRECON> fill the shot_311 on right_hand with ingredient_302 using dispenser_354 when left_hand is empty <EFFECT> Once we fill a shot_311 with an ingredient_302, the shot_311 is no longer empty and clean. Once we fill a shot_311 with an ingredient_302, the shot_311 contains the ingredient_302 and we say that the shot_311 is used to store the ingredient_302. </EFFECT> \n <PRECON> We can pour the ingredient_302 of a shot_311 into a clean shaker_449 only if the shaker_449 is clean and empty. We can pour the ingredient_302 of a shot_311 into a clean shaker_449 only if we are holding the shot_311 and the shot_311 contains some ingredient_302. </PRECON> pour from shot_311 containing ingredient_302 to clean shaker_449 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shaker_449 contains the ingredient_302 and thus the shaker_449 is no longer empty. Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shot_311 does not contain any ingredient_302 and is empty. Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shaker_449's fill level level_0 will increment one level level_1. </EFFECT> \n <PRECON> We can clean a shot_311 only if we are holding the shot_311 and another left_hand is empty to manipulate the cleaning equipment. We can clean a shot_311 only if the shot_311 is empty but is used to store some ingredient_302. </PRECON> clean the shot_311 on right_hand used for ingredient_302 when left_hand is empty <EFFECT> Once we clean a shot_311, the shot_311 is clean and is considered not used to store any ingredient_302. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_449 into a shot_288 only if we are holding the shaker_449 and the shaker_449 contains a cocktail_1. We can pour the cocktail_1 of a shaker_449 into a shot_288 only if the shot_288 is empty and clean. </PRECON> pour from shaker_449 to shot_288 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shaker_449's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 contains the cocktail_1 and the shot_288 is not empty. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 is not clean. </EFFECT> WRONG \n <PRECON> We can fill a shot_311 with an ingredient_311 only if the shot_311 is empty and clean. We can fill a shot_311 with an ingredient_311 only if one right_hand is holding the shot_311 and the other left_hand is empty to manipulate the dispenser_175 that contains the ingredient_311. </PRECON> fill the shot_311 on right_hand with ingredient_311 using dispenser_175 when left_hand is empty <EFFECT> Once we fill a shot_311 with an ingredient_311, the shot_311 is no longer empty and clean. Once we fill a shot_311 with an ingredient_311, the shot_311 contains the ingredient_311 and we say that the shot_311 is used to store the ingredient_311. </EFFECT> \n <PRECON> We can shake a shaker_449 only if we are holding the shaker_449 and the shaker_449 contains two types ingredient_302 and ingredient_311. We can shake a shaker_449 only if the shaker_449 has not yet shaken. </PRECON> shake shaker_449 on left_hand containing ingredient_302 and ingredient_311 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_449, the shaker_449 is considered shaken. Once we shake a shaker_449, the shaker_449 contains a cocktail_1 that is a mixture of the two ingredient_302 and ingredient_311. </EFFECT> WRONG \n <PRECON> We can grasp a shaker_449 only left_hand is empty. We can grasp shaker_449 only if the shaker_449 is on the table. </PRECON> grasp the shaker_449 using left_hand <EFFECT> Once we grasp a shaker_449, we are holding the shaker_449 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_311 of a shot_311 into a used shaker_449 only if the shaker_449 has not been shaken yet. We can pour the ingredient_311 of a shot_311 into a used shaker_449 only if we are holding the shot_311 and the shot_311 contains some ingredient_311. </PRECON> pour from shot_311 containing ingredient_311 to used shaker_449 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_311 of a shot_311 into a used shaker_449, the shaker_449 contains the ingredient_311. Once we pour the ingredient_311 of a shot_311 into a used shaker_449, the shot_311 does not contain any ingredient_311 and is empty. Once we pour the ingredient_311 of a shot_311 into a used shaker_449, the shaker_449's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_311 using right_hand <EFFECT> Once we leave a right_hand on the table, our shot_311 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_449 into a shot_288 only if we are holding the shaker_449 and the shaker_449 contains a cocktail_1. We can pour the cocktail_1 of a shaker_449 into a shot_288 only if the shot_288 is empty and clean. </PRECON> pour from shaker_449 to shot_288 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shaker_449's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 contains the cocktail_1 and the shot_288 is not empty. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 is not clean. </EFFECT> WRONG \n <PRECON> We can shake a shaker_449 only if we are holding the shaker_449 and the shaker_449 contains two types ingredient_302 and ingredient_311. We can shake a shaker_449 only if the shaker_449 has not yet shaken. </PRECON> shake shaker_449 on left_hand containing ingredient_302 and ingredient_311 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_449, the shaker_449 is considered shaken. Once we shake a shaker_449, the shaker_449 contains a cocktail_1 that is a mixture of the two ingredient_302 and ingredient_311. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_449 into a shot_288 only if we are holding the shaker_449 and the shaker_449 contains a cocktail_1. We can pour the cocktail_1 of a shaker_449 into a shot_288 only if the shot_288 is empty and clean. </PRECON> pour from shaker_449 to shot_288 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shaker_449's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 contains the cocktail_1 and the shot_288 is not empty. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 is not clean. </EFFECT> \n</PLAN>", "plan_length": 28, "raw_plan": ["(grasp left shaker449)", "(grasp right shot445)", "(leave left shaker449)", "(fill-shot shot445 ingredient302 right left dispenser354)", "(grasp left shaker449)", "(pour-shot-to-clean-shaker shot445 ingredient302 shaker449 right l0 l1)", "(leave left shaker449)", "(clean-shot shot445 ingredient302 right left)", "(fill-shot shot445 ingredient311 right left dispenser175)", "(pour-shot-to-used-shaker shot445 ingredient311 shaker449 right l1 l2)", "(clean-shot shot445 ingredient311 right left)", "(grasp left shaker449)", "(leave right shot445)", "(shake cocktail2 ingredient302 ingredient311 shaker449 left right)", "(pour-shaker-to-shot cocktail2 shot445 left shaker449 l2 l1)", "(empty-shaker left shaker449 cocktail2 l1 l0)", "(clean-shaker left right shaker449)", "(grasp right shot311)", "(leave left shaker449)", "(fill-shot shot311 ingredient302 right left dispenser354)", "(pour-shot-to-clean-shaker shot311 ingredient302 shaker449 right l0 l1)", "(clean-shot shot311 ingredient302 right left)", "(fill-shot shot311 ingredient311 right left dispenser175)", "(grasp left shaker449)", "(pour-shot-to-used-shaker shot311 ingredient311 shaker449 right l1 l2)", "(leave right shot311)", "(shake cocktail1 ingredient302 ingredient311 shaker449 left right)", "(pour-shaker-to-shot cocktail1 shot288 left shaker449 l2 l1)"], "full_text_prompt": "I have to plan the actions for a robotic bartender to prepare cocktails. The bartender has two hands and works with various containers and ingredients to mix and serve drinks.\nHere are the actions that can be performed:\nGrasp a container (shot or shaker) from the table.\nLeave a container on the table.\nFill-shot with an ingredient from a dispenser.\nRefill-shot with the same ingredient it contained before.\nEmpty a shot.\nClean a shot.\nPour the content of a shot into a clean shaker.\nPour the content of a shot into a used shaker that already contain some ingredient.\nEmpty a shaker.\nClean a shaker.\nShake the shaker to mix the ingredients.\nPour the content of a shaker into a shot.\nThe following are the restrictions on the actions:\nWe can grasp a container only if the container is on the table.\nWe can grasp a container only our hand is empty.\nOnce we grasp a container, we are holding the container and our hand is no longer empty.\nWe can leave a container on the table only if we are holding the container.\nOnce we leave a container on the table, the container is on the table and we are no longer holding the container.\nOnce we leave a container on the table, our hand becomes empty.\nWe can fill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nWe can fill a shot with an ingredient only if the shot is empty and clean.\nOnce we fill a shot with an ingredient, the shot is no longer empty and clean.\nOnce we fill a shot with an ingredient, the shot contains the ingredient and we say that the shot is used to store the ingredient.\nWe can refill a shot with an ingredient only if the shot is used to store the same ingredient.\nWe can refill a shot with an ingredient only if the shot is currently empty.\nWe can refill a shot with an ingredient only if one hand is holding the shot and the other hand is empty to manipulate the dispenser that contains the ingredient.\nOnce we refill a shot with an ingredient, the shot contains the ingredient and is no longer empty.\nWe can empty a shot only if the shot contains some ingredient.\nWe can empty a shot only if we are holding the shot.\nOnce we empty a shot, the shot no more contains any ingredient and is empty.\nWe can clean a shot only if we are holding the shot and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shot only if the shot is empty but is used to store some ingredient.\nOnce we clean a shot, the shot is clean and is considered not used to store any ingredient.\nWe can pour the content of a shot into a clean shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a clean shaker only if the shaker is clean and empty.\nOnce we pour the content of a shot into a clean shaker, the shaker contains the ingredient and thus the shaker is no longer empty.\nOnce we pour the content of a shot into a clean shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a clean shaker, the shaker's fill level will increment one level.\nWe can pour the content of a shot into a used shaker only if we are holding the shot and the shot contains some ingredient.\nWe can pour the content of a shot into a used shaker only if the shaker has not been shaken yet.\nOnce we pour the content of a shot into a used shaker, the shaker contains the ingredients.\nOnce we pour the content of a shot into a used shaker, the shot does not contain any ingredient and is empty.\nOnce we pour the content of a shot into a used shaker, the shaker's fill level will increment one level.\nWe can empty a shaker only if we are holding the shaker.\nWe can empty a shaker only if the shaker contains some cocktails.\nWe can empty a shaker only if the shaker has been shaken.\nOnce we empty a shaker, the shaker no longer contains any cocktails and is empty.\nOnce we empty a shaker, the shaker's fill level will become zero.\nOnce we empty a shaker, the shaker is considered not shaken.\nWe can clean a shaker only if we are holding the shaker and another hand is empty to manipulate the cleaning equipment.\nWe can clean a shaker only if the shaker is empty.\nOnce we clean a shaker, the shaker is clean.\nWe can shake a shaker only if we are holding the shaker and the shaker contains two types of ingredients.\nWe can shake a shaker only if the shaker has not yet shaken.\nOnce we shake a shaker, the shaker contains a cocktail that is a mixture of the two ingredients.\nOnce we shake a shaker, the shaker is considered shaken.\nWe can pour the content of a shaker into a shot only if we are holding the shaker and the shaker contains a cocktail.\nWe can pour the content of a shaker into a shot only if the shot is empty and clean.\nOnce we pour the content of a shaker into a shot, the shot contains the cocktail and the shot is not empty.\nOnce we pour the content of a shaker into a shot, the shot is not clean.\nOnce we pour the content of a shaker into a shot, the shaker's fill level will decrement one level.As initial conditions I have that, cocktail_2 has ingredient_311 as its second ingredient, shot_311 is clean, shot_445 is on the table, shot_288 is on the table, shot_288 is empty, right_hand is empty, shot_311 is on the table, shot_311 is empty, shot_288 is clean, cocktail_1 has ingredient_302 as its first ingredient, cocktail_1 has ingredient_311 as its second ingredient, dispenser_354 dispenses ingredient_302, shaker_449 is on the table, dispenser_175 dispenses ingredient_311, level_1 is the next level after level_0, left_hand is empty, level_2 is the next level after level_1, shaker_449 is empty, cocktail_2 has ingredient_302 as its first ingredient, shot_445 is clean, shot_445 is empty, shaker_449 is clean, shaker_449's zero fill level is at level_0, shaker_449's fill level is at level_0.My goal is to have that shot_445 contains cocktail_2, shot_288 contains cocktail_1.My plan is as follows:\n<PLAN>\n <PRECON> We can clean a shaker_449 only if we are holding the shaker_449 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shaker_449 only if the shaker_449 is empty. </PRECON> clean shaker_449 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_449, the shaker_449 is clean. </EFFECT> WRONG \n <PRECON> We can grasp a shaker_449 only left_hand is empty. We can grasp shaker_449 only if the shaker_449 is on the table. </PRECON> grasp the shaker_449 using left_hand <EFFECT> Once we grasp a shaker_449, we are holding the shaker_449 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can grasp a shot_445 only right_hand is empty. We can grasp shot_445 only if the shot_445 is on the table. </PRECON> grasp the shot_445 using right_hand <EFFECT> Once we grasp a shot_445, we are holding the shot_445 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can shake a shaker_449 only if we are holding the shaker_449 and the shaker_449 contains two types ingredient_302 and ingredient_311. We can shake a shaker_449 only if the shaker_449 has not yet shaken. </PRECON> shake shaker_449 on left_hand containing ingredient_302 and ingredient_311 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_449, the shaker_449 is considered shaken. Once we shake a shaker_449, the shaker_449 contains a cocktail_1 that is a mixture of the two ingredient_302 and ingredient_311. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_449 using left_hand <EFFECT> Once we leave a left_hand on the table, our shaker_449 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can fill a shot_445 with an ingredient_302 only if the shot_445 is empty and clean. We can fill a shot_445 with an ingredient_302 only if one right_hand is holding the shot_445 and the other left_hand is empty to manipulate the dispenser_354 that contains the ingredient_302. </PRECON> fill the shot_445 on right_hand with ingredient_302 using dispenser_354 when left_hand is empty <EFFECT> Once we fill a shot_445 with an ingredient_302, the shot_445 is no longer empty and clean. Once we fill a shot_445 with an ingredient_302, the shot_445 contains the ingredient_302 and we say that the shot_445 is used to store the ingredient_302. </EFFECT> \n <PRECON> We can grasp a shaker_449 only left_hand is empty. We can grasp shaker_449 only if the shaker_449 is on the table. </PRECON> grasp the shaker_449 using left_hand <EFFECT> Once we grasp a shaker_449, we are holding the shaker_449 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_449 using left_hand <EFFECT> Once we leave a left_hand on the table, our shaker_449 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> WRONG \n <PRECON> We can pour the ingredient_302 of a shot_445 into a clean shaker_449 only if the shaker_449 is clean and empty. We can pour the ingredient_302 of a shot_445 into a clean shaker_449 only if we are holding the shot_445 and the shot_445 contains some ingredient_302. </PRECON> pour from shot_445 containing ingredient_302 to clean shaker_449 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_302 of a shot_445 into a clean shaker_449, the shaker_449 contains the ingredient_302 and thus the shaker_449 is no longer empty. Once we pour the ingredient_302 of a shot_445 into a clean shaker_449, the shot_445 does not contain any ingredient_302 and is empty. Once we pour the ingredient_302 of a shot_445 into a clean shaker_449, the shaker_449's fill level level_0 will increment one level level_1. </EFFECT> \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_449 using left_hand <EFFECT> Once we leave a left_hand on the table, our shaker_449 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can clean a shot_445 only if we are holding the shot_445 and another left_hand is empty to manipulate the cleaning equipment. We can clean a shot_445 only if the shot_445 is empty but is used to store some ingredient_302. </PRECON> clean the shot_445 on right_hand used for ingredient_302 when left_hand is empty <EFFECT> Once we clean a shot_445, the shot_445 is clean and is considered not used to store any ingredient_302. </EFFECT> \n <PRECON> We can fill a shot_445 with an ingredient_311 only if the shot_445 is empty and clean. We can fill a shot_445 with an ingredient_311 only if one right_hand is holding the shot_445 and the other left_hand is empty to manipulate the dispenser_175 that contains the ingredient_311. </PRECON> fill the shot_445 on right_hand with ingredient_311 using dispenser_175 when left_hand is empty <EFFECT> Once we fill a shot_445 with an ingredient_311, the shot_445 is no longer empty and clean. Once we fill a shot_445 with an ingredient_311, the shot_445 contains the ingredient_311 and we say that the shot_445 is used to store the ingredient_311. </EFFECT> \n <PRECON> We can pour the ingredient_311 of a shot_445 into a used shaker_449 only if the shaker_449 has not been shaken yet. We can pour the ingredient_311 of a shot_445 into a used shaker_449 only if we are holding the shot_445 and the shot_445 contains some ingredient_311. </PRECON> pour from shot_445 containing ingredient_311 to used shaker_449 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_311 of a shot_445 into a used shaker_449, the shaker_449 contains the ingredient_311. Once we pour the ingredient_311 of a shot_445 into a used shaker_449, the shot_445 does not contain any ingredient_311 and is empty. Once we pour the ingredient_311 of a shot_445 into a used shaker_449, the shaker_449's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can clean a shot_445 only if we are holding the shot_445 and another left_hand is empty to manipulate the cleaning equipment. We can clean a shot_445 only if the shot_445 is empty but is used to store some ingredient_311. </PRECON> clean the shot_445 on right_hand used for ingredient_311 when left_hand is empty <EFFECT> Once we clean a shot_445, the shot_445 is clean and is considered not used to store any ingredient_311. </EFFECT> \n <PRECON> We can grasp a shaker_449 only left_hand is empty. We can grasp shaker_449 only if the shaker_449 is on the table. </PRECON> grasp the shaker_449 using left_hand <EFFECT> Once we grasp a shaker_449, we are holding the shaker_449 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_445 using right_hand <EFFECT> Once we leave a right_hand on the table, our shot_445 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> \n <PRECON> We can shake a shaker_449 only if we are holding the shaker_449 and the shaker_449 contains two types ingredient_302 and ingredient_311. We can shake a shaker_449 only if the shaker_449 has not yet shaken. </PRECON> shake shaker_449 on left_hand containing ingredient_302 and ingredient_311 to get cocktail_2 when right_hand is empty <EFFECT> Once we shake a shaker_449, the shaker_449 is considered shaken. Once we shake a shaker_449, the shaker_449 contains a cocktail_2 that is a mixture of the two ingredient_302 and ingredient_311. </EFFECT> \n <PRECON> We can pour the cocktail_2 of a shaker_449 into a shot_445 only if we are holding the shaker_449 and the shaker_449 contains a cocktail_2. We can pour the cocktail_2 of a shaker_449 into a shot_445 only if the shot_445 is empty and clean. </PRECON> pour from shaker_449 to shot_445 containing cocktail_2 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_2 of a shaker_449 into a shot_445, the shaker_449's fill level level_2 will decrement one level level_1. Once we pour the cocktail_2 of a shaker_449 into a shot_445, the shot_445 contains the cocktail_2 and the shot_445 is not empty. Once we pour the cocktail_2 of a shaker_449 into a shot_445, the shot_445 is not clean. </EFFECT> \n <PRECON> We can clean a shaker_449 only if we are holding the shaker_449 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shaker_449 only if the shaker_449 is empty. </PRECON> clean shaker_449 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_449, the shaker_449 is clean. </EFFECT> WRONG \n <PRECON> We can pour the ingredient_302 of a shot_311 into a clean shaker_449 only if the shaker_449 is clean and empty. We can pour the ingredient_302 of a shot_311 into a clean shaker_449 only if we are holding the shot_311 and the shot_311 contains some ingredient_302. </PRECON> pour from shot_311 containing ingredient_302 to clean shaker_449 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shaker_449 contains the ingredient_302 and thus the shaker_449 is no longer empty. Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shot_311 does not contain any ingredient_302 and is empty. Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shaker_449's fill level level_0 will increment one level level_1. </EFFECT> WRONG \n <PRECON> We can empty a shaker_449 only if we are holding the shaker_449. We can empty a shaker_449 only if the shaker_449 has been shaken. We can empty a shaker_449 only if the shaker_449 contains some cocktail_2. </PRECON> empty shaker_449 containing cocktail_2 using left_hand from level_1 to level_0 <EFFECT> Once we empty a shaker_449, the shaker_449 is considered not shaken. Once we empty a shaker_449, the shaker_449 no longer contains any cocktail_2 and is empty. Once we empty a shaker_449, the shaker_449's fill level will become level_0. </EFFECT> \n <PRECON> We can clean a shaker_449 only if we are holding the shaker_449 and another right_hand is empty to manipulate the cleaning equipment. We can clean a shaker_449 only if the shaker_449 is empty. </PRECON> clean shaker_449 on left_hand when right_hand is empty <EFFECT> Once we clean a shaker_449, the shaker_449 is clean. </EFFECT> \n <PRECON> We can grasp a shot_311 only right_hand is empty. We can grasp shot_311 only if the shot_311 is on the table. </PRECON> grasp the shot_311 using right_hand <EFFECT> Once we grasp a shot_311, we are holding the shot_311 and right_hand is no longer empty. </EFFECT> \n <PRECON> We can fill a shot_311 with an ingredient_311 only if the shot_311 is empty and clean. We can fill a shot_311 with an ingredient_311 only if one right_hand is holding the shot_311 and the other left_hand is empty to manipulate the dispenser_175 that contains the ingredient_311. </PRECON> fill the shot_311 on right_hand with ingredient_311 using dispenser_175 when left_hand is empty <EFFECT> Once we fill a shot_311 with an ingredient_311, the shot_311 is no longer empty and clean. Once we fill a shot_311 with an ingredient_311, the shot_311 contains the ingredient_311 and we say that the shot_311 is used to store the ingredient_311. </EFFECT> WRONG \n <PRECON> We can leave a left_hand on the table only if we are holding the left_hand. </PRECON> leave the shaker_449 using left_hand <EFFECT> Once we leave a left_hand on the table, our shaker_449 becomes empty. Once we leave a left_hand on the table, the left_hand is on the table and we are no longer holding the left_hand. </EFFECT> \n <PRECON> We can fill a shot_311 with an ingredient_302 only if the shot_311 is empty and clean. We can fill a shot_311 with an ingredient_302 only if one right_hand is holding the shot_311 and the other left_hand is empty to manipulate the dispenser_354 that contains the ingredient_302. </PRECON> fill the shot_311 on right_hand with ingredient_302 using dispenser_354 when left_hand is empty <EFFECT> Once we fill a shot_311 with an ingredient_302, the shot_311 is no longer empty and clean. Once we fill a shot_311 with an ingredient_302, the shot_311 contains the ingredient_302 and we say that the shot_311 is used to store the ingredient_302. </EFFECT> \n <PRECON> We can pour the ingredient_302 of a shot_311 into a clean shaker_449 only if the shaker_449 is clean and empty. We can pour the ingredient_302 of a shot_311 into a clean shaker_449 only if we are holding the shot_311 and the shot_311 contains some ingredient_302. </PRECON> pour from shot_311 containing ingredient_302 to clean shaker_449 using right_hand from level_0 to level_1 <EFFECT> Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shaker_449 contains the ingredient_302 and thus the shaker_449 is no longer empty. Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shot_311 does not contain any ingredient_302 and is empty. Once we pour the ingredient_302 of a shot_311 into a clean shaker_449, the shaker_449's fill level level_0 will increment one level level_1. </EFFECT> \n <PRECON> We can clean a shot_311 only if we are holding the shot_311 and another left_hand is empty to manipulate the cleaning equipment. We can clean a shot_311 only if the shot_311 is empty but is used to store some ingredient_302. </PRECON> clean the shot_311 on right_hand used for ingredient_302 when left_hand is empty <EFFECT> Once we clean a shot_311, the shot_311 is clean and is considered not used to store any ingredient_302. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_449 into a shot_288 only if we are holding the shaker_449 and the shaker_449 contains a cocktail_1. We can pour the cocktail_1 of a shaker_449 into a shot_288 only if the shot_288 is empty and clean. </PRECON> pour from shaker_449 to shot_288 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shaker_449's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 contains the cocktail_1 and the shot_288 is not empty. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 is not clean. </EFFECT> WRONG \n <PRECON> We can fill a shot_311 with an ingredient_311 only if the shot_311 is empty and clean. We can fill a shot_311 with an ingredient_311 only if one right_hand is holding the shot_311 and the other left_hand is empty to manipulate the dispenser_175 that contains the ingredient_311. </PRECON> fill the shot_311 on right_hand with ingredient_311 using dispenser_175 when left_hand is empty <EFFECT> Once we fill a shot_311 with an ingredient_311, the shot_311 is no longer empty and clean. Once we fill a shot_311 with an ingredient_311, the shot_311 contains the ingredient_311 and we say that the shot_311 is used to store the ingredient_311. </EFFECT> \n <PRECON> We can shake a shaker_449 only if we are holding the shaker_449 and the shaker_449 contains two types ingredient_302 and ingredient_311. We can shake a shaker_449 only if the shaker_449 has not yet shaken. </PRECON> shake shaker_449 on left_hand containing ingredient_302 and ingredient_311 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_449, the shaker_449 is considered shaken. Once we shake a shaker_449, the shaker_449 contains a cocktail_1 that is a mixture of the two ingredient_302 and ingredient_311. </EFFECT> WRONG \n <PRECON> We can grasp a shaker_449 only left_hand is empty. We can grasp shaker_449 only if the shaker_449 is on the table. </PRECON> grasp the shaker_449 using left_hand <EFFECT> Once we grasp a shaker_449, we are holding the shaker_449 and left_hand is no longer empty. </EFFECT> \n <PRECON> We can pour the ingredient_311 of a shot_311 into a used shaker_449 only if the shaker_449 has not been shaken yet. We can pour the ingredient_311 of a shot_311 into a used shaker_449 only if we are holding the shot_311 and the shot_311 contains some ingredient_311. </PRECON> pour from shot_311 containing ingredient_311 to used shaker_449 using right_hand from level_1 to level_2 <EFFECT> Once we pour the ingredient_311 of a shot_311 into a used shaker_449, the shaker_449 contains the ingredient_311. Once we pour the ingredient_311 of a shot_311 into a used shaker_449, the shot_311 does not contain any ingredient_311 and is empty. Once we pour the ingredient_311 of a shot_311 into a used shaker_449, the shaker_449's fill level level_1 will increment one level level_2. </EFFECT> \n <PRECON> We can leave a right_hand on the table only if we are holding the right_hand. </PRECON> leave the shot_311 using right_hand <EFFECT> Once we leave a right_hand on the table, our shot_311 becomes empty. Once we leave a right_hand on the table, the right_hand is on the table and we are no longer holding the right_hand. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_449 into a shot_288 only if we are holding the shaker_449 and the shaker_449 contains a cocktail_1. We can pour the cocktail_1 of a shaker_449 into a shot_288 only if the shot_288 is empty and clean. </PRECON> pour from shaker_449 to shot_288 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shaker_449's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 contains the cocktail_1 and the shot_288 is not empty. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 is not clean. </EFFECT> WRONG \n <PRECON> We can shake a shaker_449 only if we are holding the shaker_449 and the shaker_449 contains two types ingredient_302 and ingredient_311. We can shake a shaker_449 only if the shaker_449 has not yet shaken. </PRECON> shake shaker_449 on left_hand containing ingredient_302 and ingredient_311 to get cocktail_1 when right_hand is empty <EFFECT> Once we shake a shaker_449, the shaker_449 is considered shaken. Once we shake a shaker_449, the shaker_449 contains a cocktail_1 that is a mixture of the two ingredient_302 and ingredient_311. </EFFECT> \n <PRECON> We can pour the cocktail_1 of a shaker_449 into a shot_288 only if we are holding the shaker_449 and the shaker_449 contains a cocktail_1. We can pour the cocktail_1 of a shaker_449 into a shot_288 only if the shot_288 is empty and clean. </PRECON> pour from shaker_449 to shot_288 containing cocktail_1 using left_hand from level_2 to level_1 <EFFECT> Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shaker_449's fill level level_2 will decrement one level level_1. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 contains the cocktail_1 and the shot_288 is not empty. Once we pour the cocktail_1 of a shaker_449 into a shot_288, the shot_288 is not clean. </EFFECT> \n</PLAN>"}
{"domain": "blocksworld", "instance_id": "0", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I am playing with a set of blocks where I need to arrange the blocks into stacks.\nHere are the actions that can be performed:\nPick up a block\nUnstack a block from on top of another block\nPut down a block\nStack a block on top of another block\nThe following are the restrictions on the actions:\nI can only pick up or unstack one block at a time.\nI can only pick up or unstack a block if my hand is empty.\nI can only pick up a block if the block is on the table and the block is clear. A block is clear if the block has no other blocks on top of it and if the block is not picked up.\nI can only unstack a block from on top of another block if the block I am unstacking was really on top of the other block.\nI can only unstack a block from on top of another block if the block I am unstacking is clear.\nOnce I pick up or unstack a block, I am holding the block.\nI can only put down a block that I am holding.\nI can only stack a block on top of another block if I am holding the block being stacked.\nI can only stack a block on top of another block if the block onto which I am stacking is clear.\nOnce I put down or stack a block, my hand becomes empty.\nOnce you stack a block on top of a second block, the second block is no longer clear.", "input": "As initial conditions I have that, the hand is empty, the white block is clear, the blue block is on top of the yellow block, the white block is on top of the magenta block, the orange block is on top of the red block, the magenta block is on top of the blue block, the yellow block is on top of the orange block, the red block is on the table.\nMy goal is to have that the magenta block is on top of the orange block, the yellow block is on top of the magenta block, the red block is on top of the blue block, the white block is on top of the yellow block.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> I can only unstack a white block from on top of another magenta block if the white block I am unstacking is clear. I can only unstack a white block from on top of another magenta block if the white block I am unstacking was really on top of the other magenta block. </PRECON> unstack the white block from on top of the magenta block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. I can only put down a white block that I am holding. I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. </PRECON> put down the white block <EFFECT> Once I put down a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a magenta block from on top of another blue block if the magenta block I am unstacking is clear. I can only unstack a magenta block from on top of another blue block if the magenta block I am unstacking was really on top of the other blue block. </PRECON> unstack the magenta block from on top of the blue block <EFFECT> Once unstack a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only pick up or unstack magenta block if my hand is empty. I can only pick up or unstack one block magenta block at a time. I can only put down a magenta block that I am holding. I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. </PRECON> put down the magenta block <EFFECT> Once I put down a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a blue block from on top of another yellow block if the blue block I am unstacking is clear. I can only unstack a blue block from on top of another yellow block if the blue block I am unstacking was really on top of the other yellow block. </PRECON> unstack the blue block from on top of the yellow block <EFFECT> Once unstack a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only pick up or unstack blue block if my hand is empty. I can only pick up or unstack one block blue block at a time. I can only put down a blue block that I am holding. I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. </PRECON> put down the blue block <EFFECT> Once I put down a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a yellow block from on top of another orange block if the yellow block I am unstacking is clear. I can only unstack a yellow block from on top of another orange block if the yellow block I am unstacking was really on top of the other orange block. </PRECON> unstack the yellow block from on top of the orange block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another magenta block if the magenta block onto which I am stacking is clear. I can only stack a yellow block on top of another magenta block if I am holding the yellow block being stacked. </PRECON> stack the yellow block on top of the magenta block <EFFECT> Once I stack a yellow block, my hand becomes empty. Once you stack a yellow block on top of a second magenta block, the second yellow block is no longer clear. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another red block if the orange block I am unstacking is clear. I can only unstack a orange block from on top of another red block if the orange block I am unstacking was really on top of the other red block. </PRECON> unstack the orange block from on top of the red block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. I can only put down a orange block that I am holding. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack red block if my hand is empty. I can only pick up or unstack one block red block at a time. </PRECON> pick up the red block <EFFECT> Once I pick up a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only stack a red block on top of another blue block if the blue block onto which I am stacking is clear. I can only stack a red block on top of another blue block if I am holding the red block being stacked. </PRECON> stack the red block on top of the blue block <EFFECT> Once I stack a red block, my hand becomes empty. Once you stack a red block on top of a second blue block, the second red block is no longer clear. </EFFECT> \n <PRECON> I can only unstack a yellow block from on top of another magenta block if the yellow block I am unstacking is clear. I can only unstack a yellow block from on top of another magenta block if the yellow block I am unstacking was really on top of the other magenta block. </PRECON> unstack the yellow block from on top of the magenta block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> WRONG \n <PRECON> I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. I can only put down a yellow block that I am holding. I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. </PRECON> put down the yellow block <EFFECT> Once I put down a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another yellow block if the yellow block onto which I am stacking is clear. I can only stack a white block on top of another yellow block if I am holding the white block being stacked. </PRECON> stack the white block on top of the yellow block <EFFECT> Once I stack a white block, my hand becomes empty. Once you stack a white block on top of a second yellow block, the second white block is no longer clear. </EFFECT> \n <PRECON> I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack magenta block if my hand is empty. I can only pick up or unstack one block magenta block at a time. </PRECON> pick up the magenta block <EFFECT> Once I pick up a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another orange block if the orange block onto which I am stacking is clear. I can only stack a magenta block on top of another orange block if I am holding the magenta block being stacked. </PRECON> stack the magenta block on top of the orange block <EFFECT> Once I stack a magenta block, my hand becomes empty. Once you stack a magenta block on top of a second orange block, the second magenta block is no longer clear. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> WRONG \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> WRONG \n <PRECON> I can only unstack a white block from on top of another yellow block if the white block I am unstacking is clear. I can only unstack a white block from on top of another yellow block if the white block I am unstacking was really on top of the other yellow block. </PRECON> unstack the white block from on top of the yellow block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. I can only put down a white block that I am holding. I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. </PRECON> put down the white block <EFFECT> Once I put down a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another magenta block if the magenta block onto which I am stacking is clear. I can only stack a yellow block on top of another magenta block if I am holding the yellow block being stacked. </PRECON> stack the yellow block on top of the magenta block <EFFECT> Once I stack a yellow block, my hand becomes empty. Once you stack a yellow block on top of a second magenta block, the second yellow block is no longer clear. </EFFECT> \n <PRECON> I can only stack a white block on top of another yellow block if the yellow block onto which I am stacking is clear. I can only stack a white block on top of another yellow block if I am holding the white block being stacked. </PRECON> stack the white block on top of the yellow block <EFFECT> Once I stack a white block, my hand becomes empty. Once you stack a white block on top of a second yellow block, the second white block is no longer clear. </EFFECT> WRONG \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another yellow block if the yellow block onto which I am stacking is clear. I can only stack a white block on top of another yellow block if I am holding the white block being stacked. </PRECON> stack the white block on top of the yellow block <EFFECT> Once I stack a white block, my hand becomes empty. Once you stack a white block on top of a second yellow block, the second white block is no longer clear. </EFFECT> \n</PLAN>", "plan_length": 24, "raw_plan": ["(unstack e f)", "(put-down e)", "(unstack f b)", "(put-down f)", "(unstack b d)", "(put-down b)", "(unstack d c)", "(stack d f)", "(unstack c a)", "(put-down c)", "(pick-up a)", "(stack a b)", "(unstack d f)", "(put-down d)", "(pick-up e)", "(stack e d)", "(pick-up f)", "(stack f c)", "(unstack e d)", "(put-down e)", "(pick-up d)", "(stack d f)", "(pick-up e)", "(stack e d)"], "full_text_prompt": "I am playing with a set of blocks where I need to arrange the blocks into stacks.\nHere are the actions that can be performed:\nPick up a block\nUnstack a block from on top of another block\nPut down a block\nStack a block on top of another block\nThe following are the restrictions on the actions:\nI can only pick up or unstack one block at a time.\nI can only pick up or unstack a block if my hand is empty.\nI can only pick up a block if the block is on the table and the block is clear. A block is clear if the block has no other blocks on top of it and if the block is not picked up.\nI can only unstack a block from on top of another block if the block I am unstacking was really on top of the other block.\nI can only unstack a block from on top of another block if the block I am unstacking is clear.\nOnce I pick up or unstack a block, I am holding the block.\nI can only put down a block that I am holding.\nI can only stack a block on top of another block if I am holding the block being stacked.\nI can only stack a block on top of another block if the block onto which I am stacking is clear.\nOnce I put down or stack a block, my hand becomes empty.\nOnce you stack a block on top of a second block, the second block is no longer clear.As initial conditions I have that, the hand is empty, the white block is clear, the blue block is on top of the yellow block, the white block is on top of the magenta block, the orange block is on top of the red block, the magenta block is on top of the blue block, the yellow block is on top of the orange block, the red block is on the table.My goal is to have that the magenta block is on top of the orange block, the yellow block is on top of the magenta block, the red block is on top of the blue block, the white block is on top of the yellow block.My plan is as follows:\n<PLAN>\n <PRECON> I can only unstack a white block from on top of another magenta block if the white block I am unstacking is clear. I can only unstack a white block from on top of another magenta block if the white block I am unstacking was really on top of the other magenta block. </PRECON> unstack the white block from on top of the magenta block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. I can only put down a white block that I am holding. I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. </PRECON> put down the white block <EFFECT> Once I put down a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a magenta block from on top of another blue block if the magenta block I am unstacking is clear. I can only unstack a magenta block from on top of another blue block if the magenta block I am unstacking was really on top of the other blue block. </PRECON> unstack the magenta block from on top of the blue block <EFFECT> Once unstack a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only pick up or unstack magenta block if my hand is empty. I can only pick up or unstack one block magenta block at a time. I can only put down a magenta block that I am holding. I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. </PRECON> put down the magenta block <EFFECT> Once I put down a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a blue block from on top of another yellow block if the blue block I am unstacking is clear. I can only unstack a blue block from on top of another yellow block if the blue block I am unstacking was really on top of the other yellow block. </PRECON> unstack the blue block from on top of the yellow block <EFFECT> Once unstack a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only pick up or unstack blue block if my hand is empty. I can only pick up or unstack one block blue block at a time. I can only put down a blue block that I am holding. I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. </PRECON> put down the blue block <EFFECT> Once I put down a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a yellow block from on top of another orange block if the yellow block I am unstacking is clear. I can only unstack a yellow block from on top of another orange block if the yellow block I am unstacking was really on top of the other orange block. </PRECON> unstack the yellow block from on top of the orange block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another magenta block if the magenta block onto which I am stacking is clear. I can only stack a yellow block on top of another magenta block if I am holding the yellow block being stacked. </PRECON> stack the yellow block on top of the magenta block <EFFECT> Once I stack a yellow block, my hand becomes empty. Once you stack a yellow block on top of a second magenta block, the second yellow block is no longer clear. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another red block if the orange block I am unstacking is clear. I can only unstack a orange block from on top of another red block if the orange block I am unstacking was really on top of the other red block. </PRECON> unstack the orange block from on top of the red block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. I can only put down a orange block that I am holding. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack red block if my hand is empty. I can only pick up or unstack one block red block at a time. </PRECON> pick up the red block <EFFECT> Once I pick up a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only stack a red block on top of another blue block if the blue block onto which I am stacking is clear. I can only stack a red block on top of another blue block if I am holding the red block being stacked. </PRECON> stack the red block on top of the blue block <EFFECT> Once I stack a red block, my hand becomes empty. Once you stack a red block on top of a second blue block, the second red block is no longer clear. </EFFECT> \n <PRECON> I can only unstack a yellow block from on top of another magenta block if the yellow block I am unstacking is clear. I can only unstack a yellow block from on top of another magenta block if the yellow block I am unstacking was really on top of the other magenta block. </PRECON> unstack the yellow block from on top of the magenta block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> WRONG \n <PRECON> I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. I can only put down a yellow block that I am holding. I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. </PRECON> put down the yellow block <EFFECT> Once I put down a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another yellow block if the yellow block onto which I am stacking is clear. I can only stack a white block on top of another yellow block if I am holding the white block being stacked. </PRECON> stack the white block on top of the yellow block <EFFECT> Once I stack a white block, my hand becomes empty. Once you stack a white block on top of a second yellow block, the second white block is no longer clear. </EFFECT> \n <PRECON> I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack magenta block if my hand is empty. I can only pick up or unstack one block magenta block at a time. </PRECON> pick up the magenta block <EFFECT> Once I pick up a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another orange block if the orange block onto which I am stacking is clear. I can only stack a magenta block on top of another orange block if I am holding the magenta block being stacked. </PRECON> stack the magenta block on top of the orange block <EFFECT> Once I stack a magenta block, my hand becomes empty. Once you stack a magenta block on top of a second orange block, the second magenta block is no longer clear. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> WRONG \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> WRONG \n <PRECON> I can only unstack a white block from on top of another yellow block if the white block I am unstacking is clear. I can only unstack a white block from on top of another yellow block if the white block I am unstacking was really on top of the other yellow block. </PRECON> unstack the white block from on top of the yellow block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. I can only put down a white block that I am holding. I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. </PRECON> put down the white block <EFFECT> Once I put down a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another magenta block if the magenta block onto which I am stacking is clear. I can only stack a yellow block on top of another magenta block if I am holding the yellow block being stacked. </PRECON> stack the yellow block on top of the magenta block <EFFECT> Once I stack a yellow block, my hand becomes empty. Once you stack a yellow block on top of a second magenta block, the second yellow block is no longer clear. </EFFECT> \n <PRECON> I can only stack a white block on top of another yellow block if the yellow block onto which I am stacking is clear. I can only stack a white block on top of another yellow block if I am holding the white block being stacked. </PRECON> stack the white block on top of the yellow block <EFFECT> Once I stack a white block, my hand becomes empty. Once you stack a white block on top of a second yellow block, the second white block is no longer clear. </EFFECT> WRONG \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another yellow block if the yellow block onto which I am stacking is clear. I can only stack a white block on top of another yellow block if I am holding the white block being stacked. </PRECON> stack the white block on top of the yellow block <EFFECT> Once I stack a white block, my hand becomes empty. Once you stack a white block on top of a second yellow block, the second white block is no longer clear. </EFFECT> \n</PLAN>"}
{"domain": "blocksworld", "instance_id": "40", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I am playing with a set of blocks where I need to arrange the blocks into stacks.\nHere are the actions that can be performed:\nPick up a block\nUnstack a block from on top of another block\nPut down a block\nStack a block on top of another block\nThe following are the restrictions on the actions:\nI can only pick up or unstack one block at a time.\nI can only pick up or unstack a block if my hand is empty.\nI can only pick up a block if the block is on the table and the block is clear. A block is clear if the block has no other blocks on top of it and if the block is not picked up.\nI can only unstack a block from on top of another block if the block I am unstacking was really on top of the other block.\nI can only unstack a block from on top of another block if the block I am unstacking is clear.\nOnce I pick up or unstack a block, I am holding the block.\nI can only put down a block that I am holding.\nI can only stack a block on top of another block if I am holding the block being stacked.\nI can only stack a block on top of another block if the block onto which I am stacking is clear.\nOnce I put down or stack a block, my hand becomes empty.\nOnce you stack a block on top of a second block, the second block is no longer clear.", "input": "As initial conditions I have that, the orange block is on top of the blue block, the black block is on top of the yellow block, the red block is on top of the magenta block, the yellow block is on top of the red block, the white block is on top of the orange block, the blue block is on top of the black block, the magenta block is on the table, the white block is clear, the hand is empty.\nMy goal is to have that the white block is on top of the orange block, the orange block is on top of the magenta block, the black block is on top of the blue block, the blue block is on top of the yellow block, the magenta block is on top of the red block.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> I can only unstack a white block from on top of another orange block if the white block I am unstacking was really on top of the other orange block. I can only unstack a white block from on top of another orange block if the white block I am unstacking is clear. </PRECON> unstack the white block from on top of the orange block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only put down a white block that I am holding. I can only pick up or unstack one block white block at a time. I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. </PRECON> put down the white block <EFFECT> Once I put down a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another blue block if the orange block I am unstacking was really on top of the other blue block. I can only unstack a orange block from on top of another blue block if the orange block I am unstacking is clear. </PRECON> unstack the orange block from on top of the blue block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only put down a orange block that I am holding. I can only pick up or unstack one block orange block at a time. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack orange block if my hand is empty. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another red block if the red block onto which I am stacking is clear. I can only stack a magenta block on top of another red block if I am holding the magenta block being stacked. </PRECON> stack the magenta block on top of the red block <EFFECT> Once I stack a magenta block, my hand becomes empty. Once you stack a magenta block on top of a second red block, the second magenta block is no longer clear. </EFFECT> WRONG \n <PRECON> I can only unstack a blue block from on top of another black block if the blue block I am unstacking was really on top of the other black block. I can only unstack a blue block from on top of another black block if the blue block I am unstacking is clear. </PRECON> unstack the blue block from on top of the black block <EFFECT> Once unstack a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only put down a blue block that I am holding. I can only pick up or unstack one block blue block at a time. I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. I can only pick up or unstack blue block if my hand is empty. </PRECON> put down the blue block <EFFECT> Once I put down a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a black block from on top of another yellow block if the black block I am unstacking was really on top of the other yellow block. I can only unstack a black block from on top of another yellow block if the black block I am unstacking is clear. </PRECON> unstack the black block from on top of the yellow block <EFFECT> Once unstack a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only stack a black block on top of another blue block if the blue block onto which I am stacking is clear. I can only stack a black block on top of another blue block if I am holding the black block being stacked. </PRECON> stack the black block on top of the blue block <EFFECT> Once I stack a black block, my hand becomes empty. Once you stack a black block on top of a second blue block, the second black block is no longer clear. </EFFECT> \n <PRECON> I can only unstack a yellow block from on top of another red block if the yellow block I am unstacking was really on top of the other red block. I can only unstack a yellow block from on top of another red block if the yellow block I am unstacking is clear. </PRECON> unstack the yellow block from on top of the red block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only put down a yellow block that I am holding. I can only pick up or unstack one block yellow block at a time. I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. </PRECON> put down the yellow block <EFFECT> Once I put down a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a red block from on top of another magenta block if the red block I am unstacking was really on top of the other magenta block. I can only unstack a red block from on top of another magenta block if the red block I am unstacking is clear. </PRECON> unstack the red block from on top of the magenta block <EFFECT> Once unstack a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only put down a red block that I am holding. I can only pick up or unstack one block red block at a time. I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack red block if my hand is empty. </PRECON> put down the red block <EFFECT> Once I put down a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up or unstack one block magenta block at a time. I can only pick up or unstack magenta block if my hand is empty. I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. </PRECON> pick up the magenta block <EFFECT> Once I pick up a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another red block if the red block onto which I am stacking is clear. I can only stack a magenta block on top of another red block if I am holding the magenta block being stacked. </PRECON> stack the magenta block on top of the red block <EFFECT> Once I stack a magenta block, my hand becomes empty. Once you stack a magenta block on top of a second red block, the second magenta block is no longer clear. </EFFECT> \n <PRECON> I can only pick up or unstack one block orange block at a time. I can only pick up or unstack orange block if my hand is empty. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a orange block on top of another magenta block if the magenta block onto which I am stacking is clear. I can only stack a orange block on top of another magenta block if I am holding the orange block being stacked. </PRECON> stack the orange block on top of the magenta block <EFFECT> Once I stack a orange block, my hand becomes empty. Once you stack a orange block on top of a second magenta block, the second orange block is no longer clear. </EFFECT> \n <PRECON> I can only pick up or unstack one block white block at a time. I can only pick up or unstack white block if my hand is empty. I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a blue block on top of another yellow block if the yellow block onto which I am stacking is clear. I can only stack a blue block on top of another yellow block if I am holding the blue block being stacked. </PRECON> stack the blue block on top of the yellow block <EFFECT> Once I stack a blue block, my hand becomes empty. Once you stack a blue block on top of a second yellow block, the second blue block is no longer clear. </EFFECT> WRONG \n <PRECON> I can only stack a white block on top of another orange block if the orange block onto which I am stacking is clear. I can only stack a white block on top of another orange block if I am holding the white block being stacked. </PRECON> stack the white block on top of the orange block <EFFECT> Once I stack a white block, my hand becomes empty. Once you stack a white block on top of a second orange block, the second white block is no longer clear. </EFFECT> \n <PRECON> I can only pick up or unstack one block black block at a time. I can only pick up or unstack black block if my hand is empty. I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> WRONG \n <PRECON> I can only unstack a black block from on top of another blue block if the black block I am unstacking was really on top of the other blue block. I can only unstack a black block from on top of another blue block if the black block I am unstacking is clear. </PRECON> unstack the black block from on top of the blue block <EFFECT> Once unstack a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only put down a black block that I am holding. I can only pick up or unstack one block black block at a time. I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack black block if my hand is empty. </PRECON> put down the black block <EFFECT> Once I put down a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up or unstack one block blue block at a time. I can only pick up or unstack blue block if my hand is empty. I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. </PRECON> pick up the blue block <EFFECT> Once I pick up a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only stack a blue block on top of another yellow block if the yellow block onto which I am stacking is clear. I can only stack a blue block on top of another yellow block if I am holding the blue block being stacked. </PRECON> stack the blue block on top of the yellow block <EFFECT> Once I stack a blue block, my hand becomes empty. Once you stack a blue block on top of a second yellow block, the second blue block is no longer clear. </EFFECT> \n <PRECON> I can only stack a black block on top of another blue block if the blue block onto which I am stacking is clear. I can only stack a black block on top of another blue block if I am holding the black block being stacked. </PRECON> stack the black block on top of the blue block <EFFECT> Once I stack a black block, my hand becomes empty. Once you stack a black block on top of a second blue block, the second black block is no longer clear. </EFFECT> WRONG \n <PRECON> I can only pick up or unstack one block black block at a time. I can only pick up or unstack black block if my hand is empty. I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only stack a black block on top of another blue block if the blue block onto which I am stacking is clear. I can only stack a black block on top of another blue block if I am holding the black block being stacked. </PRECON> stack the black block on top of the blue block <EFFECT> Once I stack a black block, my hand becomes empty. Once you stack a black block on top of a second blue block, the second black block is no longer clear. </EFFECT> \n</PLAN>", "plan_length": 24, "raw_plan": ["(unstack e c)", "(put-down e)", "(unstack c b)", "(put-down c)", "(unstack b g)", "(put-down b)", "(unstack g d)", "(stack g b)", "(unstack d a)", "(put-down d)", "(unstack a f)", "(put-down a)", "(pick-up f)", "(stack f a)", "(pick-up c)", "(stack c f)", "(pick-up e)", "(stack e c)", "(unstack g b)", "(put-down g)", "(pick-up b)", "(stack b d)", "(pick-up g)", "(stack g b)"], "full_text_prompt": "I am playing with a set of blocks where I need to arrange the blocks into stacks.\nHere are the actions that can be performed:\nPick up a block\nUnstack a block from on top of another block\nPut down a block\nStack a block on top of another block\nThe following are the restrictions on the actions:\nI can only pick up or unstack one block at a time.\nI can only pick up or unstack a block if my hand is empty.\nI can only pick up a block if the block is on the table and the block is clear. A block is clear if the block has no other blocks on top of it and if the block is not picked up.\nI can only unstack a block from on top of another block if the block I am unstacking was really on top of the other block.\nI can only unstack a block from on top of another block if the block I am unstacking is clear.\nOnce I pick up or unstack a block, I am holding the block.\nI can only put down a block that I am holding.\nI can only stack a block on top of another block if I am holding the block being stacked.\nI can only stack a block on top of another block if the block onto which I am stacking is clear.\nOnce I put down or stack a block, my hand becomes empty.\nOnce you stack a block on top of a second block, the second block is no longer clear.As initial conditions I have that, the orange block is on top of the blue block, the black block is on top of the yellow block, the red block is on top of the magenta block, the yellow block is on top of the red block, the white block is on top of the orange block, the blue block is on top of the black block, the magenta block is on the table, the white block is clear, the hand is empty.My goal is to have that the white block is on top of the orange block, the orange block is on top of the magenta block, the black block is on top of the blue block, the blue block is on top of the yellow block, the magenta block is on top of the red block.My plan is as follows:\n<PLAN>\n <PRECON> I can only unstack a white block from on top of another orange block if the white block I am unstacking was really on top of the other orange block. I can only unstack a white block from on top of another orange block if the white block I am unstacking is clear. </PRECON> unstack the white block from on top of the orange block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only put down a white block that I am holding. I can only pick up or unstack one block white block at a time. I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. </PRECON> put down the white block <EFFECT> Once I put down a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another blue block if the orange block I am unstacking was really on top of the other blue block. I can only unstack a orange block from on top of another blue block if the orange block I am unstacking is clear. </PRECON> unstack the orange block from on top of the blue block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only put down a orange block that I am holding. I can only pick up or unstack one block orange block at a time. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack orange block if my hand is empty. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another red block if the red block onto which I am stacking is clear. I can only stack a magenta block on top of another red block if I am holding the magenta block being stacked. </PRECON> stack the magenta block on top of the red block <EFFECT> Once I stack a magenta block, my hand becomes empty. Once you stack a magenta block on top of a second red block, the second magenta block is no longer clear. </EFFECT> WRONG \n <PRECON> I can only unstack a blue block from on top of another black block if the blue block I am unstacking was really on top of the other black block. I can only unstack a blue block from on top of another black block if the blue block I am unstacking is clear. </PRECON> unstack the blue block from on top of the black block <EFFECT> Once unstack a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only put down a blue block that I am holding. I can only pick up or unstack one block blue block at a time. I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. I can only pick up or unstack blue block if my hand is empty. </PRECON> put down the blue block <EFFECT> Once I put down a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a black block from on top of another yellow block if the black block I am unstacking was really on top of the other yellow block. I can only unstack a black block from on top of another yellow block if the black block I am unstacking is clear. </PRECON> unstack the black block from on top of the yellow block <EFFECT> Once unstack a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only stack a black block on top of another blue block if the blue block onto which I am stacking is clear. I can only stack a black block on top of another blue block if I am holding the black block being stacked. </PRECON> stack the black block on top of the blue block <EFFECT> Once I stack a black block, my hand becomes empty. Once you stack a black block on top of a second blue block, the second black block is no longer clear. </EFFECT> \n <PRECON> I can only unstack a yellow block from on top of another red block if the yellow block I am unstacking was really on top of the other red block. I can only unstack a yellow block from on top of another red block if the yellow block I am unstacking is clear. </PRECON> unstack the yellow block from on top of the red block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only put down a yellow block that I am holding. I can only pick up or unstack one block yellow block at a time. I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. </PRECON> put down the yellow block <EFFECT> Once I put down a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a red block from on top of another magenta block if the red block I am unstacking was really on top of the other magenta block. I can only unstack a red block from on top of another magenta block if the red block I am unstacking is clear. </PRECON> unstack the red block from on top of the magenta block <EFFECT> Once unstack a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only put down a red block that I am holding. I can only pick up or unstack one block red block at a time. I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack red block if my hand is empty. </PRECON> put down the red block <EFFECT> Once I put down a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up or unstack one block magenta block at a time. I can only pick up or unstack magenta block if my hand is empty. I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. </PRECON> pick up the magenta block <EFFECT> Once I pick up a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another red block if the red block onto which I am stacking is clear. I can only stack a magenta block on top of another red block if I am holding the magenta block being stacked. </PRECON> stack the magenta block on top of the red block <EFFECT> Once I stack a magenta block, my hand becomes empty. Once you stack a magenta block on top of a second red block, the second magenta block is no longer clear. </EFFECT> \n <PRECON> I can only pick up or unstack one block orange block at a time. I can only pick up or unstack orange block if my hand is empty. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a orange block on top of another magenta block if the magenta block onto which I am stacking is clear. I can only stack a orange block on top of another magenta block if I am holding the orange block being stacked. </PRECON> stack the orange block on top of the magenta block <EFFECT> Once I stack a orange block, my hand becomes empty. Once you stack a orange block on top of a second magenta block, the second orange block is no longer clear. </EFFECT> \n <PRECON> I can only pick up or unstack one block white block at a time. I can only pick up or unstack white block if my hand is empty. I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a blue block on top of another yellow block if the yellow block onto which I am stacking is clear. I can only stack a blue block on top of another yellow block if I am holding the blue block being stacked. </PRECON> stack the blue block on top of the yellow block <EFFECT> Once I stack a blue block, my hand becomes empty. Once you stack a blue block on top of a second yellow block, the second blue block is no longer clear. </EFFECT> WRONG \n <PRECON> I can only stack a white block on top of another orange block if the orange block onto which I am stacking is clear. I can only stack a white block on top of another orange block if I am holding the white block being stacked. </PRECON> stack the white block on top of the orange block <EFFECT> Once I stack a white block, my hand becomes empty. Once you stack a white block on top of a second orange block, the second white block is no longer clear. </EFFECT> \n <PRECON> I can only pick up or unstack one block black block at a time. I can only pick up or unstack black block if my hand is empty. I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> WRONG \n <PRECON> I can only unstack a black block from on top of another blue block if the black block I am unstacking was really on top of the other blue block. I can only unstack a black block from on top of another blue block if the black block I am unstacking is clear. </PRECON> unstack the black block from on top of the blue block <EFFECT> Once unstack a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only put down a black block that I am holding. I can only pick up or unstack one block black block at a time. I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack black block if my hand is empty. </PRECON> put down the black block <EFFECT> Once I put down a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up or unstack one block blue block at a time. I can only pick up or unstack blue block if my hand is empty. I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. </PRECON> pick up the blue block <EFFECT> Once I pick up a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only stack a blue block on top of another yellow block if the yellow block onto which I am stacking is clear. I can only stack a blue block on top of another yellow block if I am holding the blue block being stacked. </PRECON> stack the blue block on top of the yellow block <EFFECT> Once I stack a blue block, my hand becomes empty. Once you stack a blue block on top of a second yellow block, the second blue block is no longer clear. </EFFECT> \n <PRECON> I can only stack a black block on top of another blue block if the blue block onto which I am stacking is clear. I can only stack a black block on top of another blue block if I am holding the black block being stacked. </PRECON> stack the black block on top of the blue block <EFFECT> Once I stack a black block, my hand becomes empty. Once you stack a black block on top of a second blue block, the second black block is no longer clear. </EFFECT> WRONG \n <PRECON> I can only pick up or unstack one block black block at a time. I can only pick up or unstack black block if my hand is empty. I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only stack a black block on top of another blue block if the blue block onto which I am stacking is clear. I can only stack a black block on top of another blue block if I am holding the black block being stacked. </PRECON> stack the black block on top of the blue block <EFFECT> Once I stack a black block, my hand becomes empty. Once you stack a black block on top of a second blue block, the second black block is no longer clear. </EFFECT> \n</PLAN>"}
{"domain": "blocksworld", "instance_id": "160", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I am playing with a set of blocks where I need to arrange the blocks into stacks.\nHere are the actions that can be performed:\nPick up a block\nUnstack a block from on top of another block\nPut down a block\nStack a block on top of another block\nThe following are the restrictions on the actions:\nI can only pick up or unstack one block at a time.\nI can only pick up or unstack a block if my hand is empty.\nI can only pick up a block if the block is on the table and the block is clear. A block is clear if the block has no other blocks on top of it and if the block is not picked up.\nI can only unstack a block from on top of another block if the block I am unstacking was really on top of the other block.\nI can only unstack a block from on top of another block if the block I am unstacking is clear.\nOnce I pick up or unstack a block, I am holding the block.\nI can only put down a block that I am holding.\nI can only stack a block on top of another block if I am holding the block being stacked.\nI can only stack a block on top of another block if the block onto which I am stacking is clear.\nOnce I put down or stack a block, my hand becomes empty.\nOnce you stack a block on top of a second block, the second block is no longer clear.", "input": "As initial conditions I have that, the blue block is on the table, the yellow block is on top of the cyan block, the black block is on top of the magenta block, the white block is on top of the yellow block, the orange block is on top of the black block, the green block is on top of the red block, the red block is on top of the blue block, the magenta block is on top of the green block, the white block is clear, the hand is empty, the cyan block is on top of the orange block.\nMy goal is to have that the magenta block is on top of the yellow block, the cyan block is on top of the red block, the yellow block is on top of the white block, the red block is on top of the orange block, the white block is on top of the blue block, the green block is on top of the magenta block, the orange block is on top of the green block.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> I can only unstack a white block from on top of another yellow block if the white block I am unstacking is clear. I can only unstack a white block from on top of another yellow block if the white block I am unstacking was really on top of the other yellow block. </PRECON> unstack the white block from on top of the yellow block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only put down a white block that I am holding. I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack one block white block at a time. I can only pick up or unstack white block if my hand is empty. </PRECON> put down the white block <EFFECT> Once I put down a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a yellow block from on top of another cyan block if the yellow block I am unstacking is clear. I can only unstack a yellow block from on top of another cyan block if the yellow block I am unstacking was really on top of the other cyan block. </PRECON> unstack the yellow block from on top of the cyan block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only put down a yellow block that I am holding. I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack one block yellow block at a time. I can only pick up or unstack yellow block if my hand is empty. </PRECON> put down the yellow block <EFFECT> Once I put down a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack one block cyan block at a time. I can only pick up or unstack cyan block if my hand is empty. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> WRONG \n <PRECON> I can only unstack a cyan block from on top of another orange block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another orange block if the cyan block I am unstacking was really on top of the other orange block. </PRECON> unstack the cyan block from on top of the orange block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only put down a cyan block that I am holding. I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack one block cyan block at a time. I can only pick up or unstack cyan block if my hand is empty. </PRECON> put down the cyan block <EFFECT> Once I put down a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another black block if the orange block I am unstacking is clear. I can only unstack a orange block from on top of another black block if the orange block I am unstacking was really on top of the other black block. </PRECON> unstack the orange block from on top of the black block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only put down a orange block that I am holding. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack one block orange block at a time. I can only pick up or unstack orange block if my hand is empty. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a black block from on top of another magenta block if the black block I am unstacking is clear. I can only unstack a black block from on top of another magenta block if the black block I am unstacking was really on top of the other magenta block. </PRECON> unstack the black block from on top of the magenta block <EFFECT> Once unstack a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only put down a black block that I am holding. I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack one block black block at a time. I can only pick up or unstack black block if my hand is empty. </PRECON> put down the black block <EFFECT> Once I put down a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a magenta block from on top of another green block if the magenta block I am unstacking is clear. I can only unstack a magenta block from on top of another green block if the magenta block I am unstacking was really on top of the other green block. </PRECON> unstack the magenta block from on top of the green block <EFFECT> Once unstack a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only put down a magenta block that I am holding. I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack one block magenta block at a time. I can only pick up or unstack magenta block if my hand is empty. </PRECON> put down the magenta block <EFFECT> Once I put down a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a green block from on top of another red block if the green block I am unstacking is clear. I can only unstack a green block from on top of another red block if the green block I am unstacking was really on top of the other red block. </PRECON> unstack the green block from on top of the red block <EFFECT> Once unstack a green block, I am holding the green block. </EFFECT> \n <PRECON> I can only put down a green block that I am holding. I can only pick up a green block if the green block is on the table and the green block is clear. A green block is clear if the green block has no other blocks on top of it and if the green block is not picked up. I can only pick up or unstack one block green block at a time. I can only pick up or unstack green block if my hand is empty. </PRECON> put down the green block <EFFECT> Once I put down a green block, my hand becomes empty. </EFFECT> \n <PRECON> I can only stack a cyan block on top of another red block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the red block <EFFECT> Once you stack a cyan block on top of a second red block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack one block orange block at a time. I can only pick up or unstack orange block if my hand is empty. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> WRONG \n <PRECON> I can only unstack a red block from on top of another blue block if the red block I am unstacking is clear. I can only unstack a red block from on top of another blue block if the red block I am unstacking was really on top of the other blue block. </PRECON> unstack the red block from on top of the blue block <EFFECT> Once unstack a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only put down a red block that I am holding. I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack one block red block at a time. I can only pick up or unstack red block if my hand is empty. </PRECON> put down the red block <EFFECT> Once I put down a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack one block white block at a time. I can only pick up or unstack white block if my hand is empty. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another blue block if I am holding the white block being stacked. I can only stack a white block on top of another blue block if the blue block onto which I am stacking is clear. </PRECON> stack the white block on top of the blue block <EFFECT> Once you stack a white block on top of a second blue block, the second white block is no longer clear. Once I stack a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack one block yellow block at a time. I can only pick up or unstack yellow block if my hand is empty. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another white block if I am holding the yellow block being stacked. I can only stack a yellow block on top of another white block if the white block onto which I am stacking is clear. </PRECON> stack the yellow block on top of the white block <EFFECT> Once you stack a yellow block on top of a second white block, the second yellow block is no longer clear. Once I stack a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another yellow block if I am holding the magenta block being stacked. I can only stack a magenta block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the magenta block on top of the yellow block <EFFECT> Once you stack a magenta block on top of a second yellow block, the second magenta block is no longer clear. Once I stack a magenta block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack one block magenta block at a time. I can only pick up or unstack magenta block if my hand is empty. </PRECON> pick up the magenta block <EFFECT> Once I pick up a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another yellow block if I am holding the magenta block being stacked. I can only stack a magenta block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the magenta block on top of the yellow block <EFFECT> Once you stack a magenta block on top of a second yellow block, the second magenta block is no longer clear. Once I stack a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a green block if the green block is on the table and the green block is clear. A green block is clear if the green block has no other blocks on top of it and if the green block is not picked up. I can only pick up or unstack one block green block at a time. I can only pick up or unstack green block if my hand is empty. </PRECON> pick up the green block <EFFECT> Once I pick up a green block, I am holding the green block. </EFFECT> \n <PRECON> I can only stack a green block on top of another magenta block if I am holding the green block being stacked. I can only stack a green block on top of another magenta block if the magenta block onto which I am stacking is clear. </PRECON> stack the green block on top of the magenta block <EFFECT> Once you stack a green block on top of a second magenta block, the second green block is no longer clear. Once I stack a green block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack one block cyan block at a time. I can only pick up or unstack cyan block if my hand is empty. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only unstack a cyan block from on top of another red block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another red block if the cyan block I am unstacking was really on top of the other red block. </PRECON> unstack the cyan block from on top of the red block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> WRONG \n <PRECON> I can only stack a cyan block on top of another red block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the red block <EFFECT> Once you stack a cyan block on top of a second red block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack one block orange block at a time. I can only pick up or unstack orange block if my hand is empty. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack one block red block at a time. I can only pick up or unstack red block if my hand is empty. </PRECON> pick up the red block <EFFECT> Once I pick up a red block, I am holding the red block. </EFFECT> WRONG \n <PRECON> I can only stack a orange block on top of another green block if I am holding the orange block being stacked. I can only stack a orange block on top of another green block if the green block onto which I am stacking is clear. </PRECON> stack the orange block on top of the green block <EFFECT> Once you stack a orange block on top of a second green block, the second orange block is no longer clear. Once I stack a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a cyan block from on top of another red block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another red block if the cyan block I am unstacking was really on top of the other red block. </PRECON> unstack the cyan block from on top of the red block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only put down a cyan block that I am holding. I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack one block cyan block at a time. I can only pick up or unstack cyan block if my hand is empty. </PRECON> put down the cyan block <EFFECT> Once I put down a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack one block red block at a time. I can only pick up or unstack red block if my hand is empty. </PRECON> pick up the red block <EFFECT> Once I pick up a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only stack a red block on top of another orange block if I am holding the red block being stacked. I can only stack a red block on top of another orange block if the orange block onto which I am stacking is clear. </PRECON> stack the red block on top of the orange block <EFFECT> Once you stack a red block on top of a second orange block, the second red block is no longer clear. Once I stack a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack one block cyan block at a time. I can only pick up or unstack cyan block if my hand is empty. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only stack a cyan block on top of another red block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the red block <EFFECT> Once you stack a cyan block on top of a second red block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> \n</PLAN>", "plan_length": 34, "raw_plan": ["(unstack e d)", "(put-down e)", "(unstack d h)", "(put-down d)", "(unstack h c)", "(put-down h)", "(unstack c g)", "(put-down c)", "(unstack g f)", "(put-down g)", "(unstack f i)", "(put-down f)", "(unstack i a)", "(put-down i)", "(unstack a b)", "(put-down a)", "(pick-up e)", "(stack e b)", "(pick-up d)", "(stack d e)", "(pick-up f)", "(stack f d)", "(pick-up i)", "(stack i f)", "(pick-up h)", "(stack h a)", "(pick-up c)", "(stack c i)", "(unstack h a)", "(put-down h)", "(pick-up a)", "(stack a c)", "(pick-up h)", "(stack h a)"], "full_text_prompt": "I am playing with a set of blocks where I need to arrange the blocks into stacks.\nHere are the actions that can be performed:\nPick up a block\nUnstack a block from on top of another block\nPut down a block\nStack a block on top of another block\nThe following are the restrictions on the actions:\nI can only pick up or unstack one block at a time.\nI can only pick up or unstack a block if my hand is empty.\nI can only pick up a block if the block is on the table and the block is clear. A block is clear if the block has no other blocks on top of it and if the block is not picked up.\nI can only unstack a block from on top of another block if the block I am unstacking was really on top of the other block.\nI can only unstack a block from on top of another block if the block I am unstacking is clear.\nOnce I pick up or unstack a block, I am holding the block.\nI can only put down a block that I am holding.\nI can only stack a block on top of another block if I am holding the block being stacked.\nI can only stack a block on top of another block if the block onto which I am stacking is clear.\nOnce I put down or stack a block, my hand becomes empty.\nOnce you stack a block on top of a second block, the second block is no longer clear.As initial conditions I have that, the blue block is on the table, the yellow block is on top of the cyan block, the black block is on top of the magenta block, the white block is on top of the yellow block, the orange block is on top of the black block, the green block is on top of the red block, the red block is on top of the blue block, the magenta block is on top of the green block, the white block is clear, the hand is empty, the cyan block is on top of the orange block.My goal is to have that the magenta block is on top of the yellow block, the cyan block is on top of the red block, the yellow block is on top of the white block, the red block is on top of the orange block, the white block is on top of the blue block, the green block is on top of the magenta block, the orange block is on top of the green block.My plan is as follows:\n<PLAN>\n <PRECON> I can only unstack a white block from on top of another yellow block if the white block I am unstacking is clear. I can only unstack a white block from on top of another yellow block if the white block I am unstacking was really on top of the other yellow block. </PRECON> unstack the white block from on top of the yellow block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only put down a white block that I am holding. I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack one block white block at a time. I can only pick up or unstack white block if my hand is empty. </PRECON> put down the white block <EFFECT> Once I put down a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a yellow block from on top of another cyan block if the yellow block I am unstacking is clear. I can only unstack a yellow block from on top of another cyan block if the yellow block I am unstacking was really on top of the other cyan block. </PRECON> unstack the yellow block from on top of the cyan block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only put down a yellow block that I am holding. I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack one block yellow block at a time. I can only pick up or unstack yellow block if my hand is empty. </PRECON> put down the yellow block <EFFECT> Once I put down a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack one block cyan block at a time. I can only pick up or unstack cyan block if my hand is empty. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> WRONG \n <PRECON> I can only unstack a cyan block from on top of another orange block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another orange block if the cyan block I am unstacking was really on top of the other orange block. </PRECON> unstack the cyan block from on top of the orange block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only put down a cyan block that I am holding. I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack one block cyan block at a time. I can only pick up or unstack cyan block if my hand is empty. </PRECON> put down the cyan block <EFFECT> Once I put down a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another black block if the orange block I am unstacking is clear. I can only unstack a orange block from on top of another black block if the orange block I am unstacking was really on top of the other black block. </PRECON> unstack the orange block from on top of the black block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only put down a orange block that I am holding. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack one block orange block at a time. I can only pick up or unstack orange block if my hand is empty. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a black block from on top of another magenta block if the black block I am unstacking is clear. I can only unstack a black block from on top of another magenta block if the black block I am unstacking was really on top of the other magenta block. </PRECON> unstack the black block from on top of the magenta block <EFFECT> Once unstack a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only put down a black block that I am holding. I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack one block black block at a time. I can only pick up or unstack black block if my hand is empty. </PRECON> put down the black block <EFFECT> Once I put down a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a magenta block from on top of another green block if the magenta block I am unstacking is clear. I can only unstack a magenta block from on top of another green block if the magenta block I am unstacking was really on top of the other green block. </PRECON> unstack the magenta block from on top of the green block <EFFECT> Once unstack a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only put down a magenta block that I am holding. I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack one block magenta block at a time. I can only pick up or unstack magenta block if my hand is empty. </PRECON> put down the magenta block <EFFECT> Once I put down a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a green block from on top of another red block if the green block I am unstacking is clear. I can only unstack a green block from on top of another red block if the green block I am unstacking was really on top of the other red block. </PRECON> unstack the green block from on top of the red block <EFFECT> Once unstack a green block, I am holding the green block. </EFFECT> \n <PRECON> I can only put down a green block that I am holding. I can only pick up a green block if the green block is on the table and the green block is clear. A green block is clear if the green block has no other blocks on top of it and if the green block is not picked up. I can only pick up or unstack one block green block at a time. I can only pick up or unstack green block if my hand is empty. </PRECON> put down the green block <EFFECT> Once I put down a green block, my hand becomes empty. </EFFECT> \n <PRECON> I can only stack a cyan block on top of another red block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the red block <EFFECT> Once you stack a cyan block on top of a second red block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack one block orange block at a time. I can only pick up or unstack orange block if my hand is empty. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> WRONG \n <PRECON> I can only unstack a red block from on top of another blue block if the red block I am unstacking is clear. I can only unstack a red block from on top of another blue block if the red block I am unstacking was really on top of the other blue block. </PRECON> unstack the red block from on top of the blue block <EFFECT> Once unstack a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only put down a red block that I am holding. I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack one block red block at a time. I can only pick up or unstack red block if my hand is empty. </PRECON> put down the red block <EFFECT> Once I put down a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack one block white block at a time. I can only pick up or unstack white block if my hand is empty. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another blue block if I am holding the white block being stacked. I can only stack a white block on top of another blue block if the blue block onto which I am stacking is clear. </PRECON> stack the white block on top of the blue block <EFFECT> Once you stack a white block on top of a second blue block, the second white block is no longer clear. Once I stack a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack one block yellow block at a time. I can only pick up or unstack yellow block if my hand is empty. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another white block if I am holding the yellow block being stacked. I can only stack a yellow block on top of another white block if the white block onto which I am stacking is clear. </PRECON> stack the yellow block on top of the white block <EFFECT> Once you stack a yellow block on top of a second white block, the second yellow block is no longer clear. Once I stack a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another yellow block if I am holding the magenta block being stacked. I can only stack a magenta block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the magenta block on top of the yellow block <EFFECT> Once you stack a magenta block on top of a second yellow block, the second magenta block is no longer clear. Once I stack a magenta block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack one block magenta block at a time. I can only pick up or unstack magenta block if my hand is empty. </PRECON> pick up the magenta block <EFFECT> Once I pick up a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another yellow block if I am holding the magenta block being stacked. I can only stack a magenta block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the magenta block on top of the yellow block <EFFECT> Once you stack a magenta block on top of a second yellow block, the second magenta block is no longer clear. Once I stack a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a green block if the green block is on the table and the green block is clear. A green block is clear if the green block has no other blocks on top of it and if the green block is not picked up. I can only pick up or unstack one block green block at a time. I can only pick up or unstack green block if my hand is empty. </PRECON> pick up the green block <EFFECT> Once I pick up a green block, I am holding the green block. </EFFECT> \n <PRECON> I can only stack a green block on top of another magenta block if I am holding the green block being stacked. I can only stack a green block on top of another magenta block if the magenta block onto which I am stacking is clear. </PRECON> stack the green block on top of the magenta block <EFFECT> Once you stack a green block on top of a second magenta block, the second green block is no longer clear. Once I stack a green block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack one block cyan block at a time. I can only pick up or unstack cyan block if my hand is empty. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only unstack a cyan block from on top of another red block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another red block if the cyan block I am unstacking was really on top of the other red block. </PRECON> unstack the cyan block from on top of the red block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> WRONG \n <PRECON> I can only stack a cyan block on top of another red block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the red block <EFFECT> Once you stack a cyan block on top of a second red block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack one block orange block at a time. I can only pick up or unstack orange block if my hand is empty. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack one block red block at a time. I can only pick up or unstack red block if my hand is empty. </PRECON> pick up the red block <EFFECT> Once I pick up a red block, I am holding the red block. </EFFECT> WRONG \n <PRECON> I can only stack a orange block on top of another green block if I am holding the orange block being stacked. I can only stack a orange block on top of another green block if the green block onto which I am stacking is clear. </PRECON> stack the orange block on top of the green block <EFFECT> Once you stack a orange block on top of a second green block, the second orange block is no longer clear. Once I stack a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a cyan block from on top of another red block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another red block if the cyan block I am unstacking was really on top of the other red block. </PRECON> unstack the cyan block from on top of the red block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only put down a cyan block that I am holding. I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack one block cyan block at a time. I can only pick up or unstack cyan block if my hand is empty. </PRECON> put down the cyan block <EFFECT> Once I put down a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack one block red block at a time. I can only pick up or unstack red block if my hand is empty. </PRECON> pick up the red block <EFFECT> Once I pick up a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only stack a red block on top of another orange block if I am holding the red block being stacked. I can only stack a red block on top of another orange block if the orange block onto which I am stacking is clear. </PRECON> stack the red block on top of the orange block <EFFECT> Once you stack a red block on top of a second orange block, the second red block is no longer clear. Once I stack a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack one block cyan block at a time. I can only pick up or unstack cyan block if my hand is empty. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only stack a cyan block on top of another red block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the red block <EFFECT> Once you stack a cyan block on top of a second red block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> \n</PLAN>"}
{"domain": "blocksworld", "instance_id": "80", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I am playing with a set of blocks where I need to arrange the blocks into stacks.\nHere are the actions that can be performed:\nPick up a block\nUnstack a block from on top of another block\nPut down a block\nStack a block on top of another block\nThe following are the restrictions on the actions:\nI can only pick up or unstack one block at a time.\nI can only pick up or unstack a block if my hand is empty.\nI can only pick up a block if the block is on the table and the block is clear. A block is clear if the block has no other blocks on top of it and if the block is not picked up.\nI can only unstack a block from on top of another block if the block I am unstacking was really on top of the other block.\nI can only unstack a block from on top of another block if the block I am unstacking is clear.\nOnce I pick up or unstack a block, I am holding the block.\nI can only put down a block that I am holding.\nI can only stack a block on top of another block if I am holding the block being stacked.\nI can only stack a block on top of another block if the block onto which I am stacking is clear.\nOnce I put down or stack a block, my hand becomes empty.\nOnce you stack a block on top of a second block, the second block is no longer clear.", "input": "As initial conditions I have that, the hand is empty, the magenta block is clear, the orange block is on the table, the blue block is on top of the black block, the yellow block is on top of the blue block, the red block is on top of the orange block, the white block is on top of the red block, the magenta block is on top of the yellow block, the black block is on top of the white block.\nMy goal is to have that the white block is on top of the magenta block, the blue block is on top of the yellow block, the yellow block is on top of the red block, the magenta block is on top of the orange block, the black block is on top of the white block, the orange block is on top of the blue block.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> I can only unstack a magenta block from on top of another yellow block if the magenta block I am unstacking was really on top of the other yellow block. I can only unstack a magenta block from on top of another yellow block if the magenta block I am unstacking is clear. </PRECON> unstack the magenta block from on top of the yellow block <EFFECT> Once unstack a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack one block magenta block at a time. I can only pick up or unstack magenta block if my hand is empty. I can only put down a magenta block that I am holding. </PRECON> put down the magenta block <EFFECT> Once I put down a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack black block if my hand is empty. I can only pick up or unstack one block black block at a time. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> WRONG \n <PRECON> I can only unstack a yellow block from on top of another blue block if the yellow block I am unstacking was really on top of the other blue block. I can only unstack a yellow block from on top of another blue block if the yellow block I am unstacking is clear. </PRECON> unstack the yellow block from on top of the blue block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack one block yellow block at a time. I can only pick up or unstack yellow block if my hand is empty. I can only put down a yellow block that I am holding. </PRECON> put down the yellow block <EFFECT> Once I put down a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a blue block from on top of another black block if the blue block I am unstacking was really on top of the other black block. I can only unstack a blue block from on top of another black block if the blue block I am unstacking is clear. </PRECON> unstack the blue block from on top of the black block <EFFECT> Once unstack a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> WRONG \n <PRECON> I can only stack a blue block on top of another yellow block if I am holding the blue block being stacked. I can only stack a blue block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the blue block on top of the yellow block <EFFECT> Once you stack a blue block on top of a second yellow block, the second blue block is no longer clear. Once I stack a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a black block from on top of another white block if the black block I am unstacking was really on top of the other white block. I can only unstack a black block from on top of another white block if the black block I am unstacking is clear. </PRECON> unstack the black block from on top of the white block <EFFECT> Once unstack a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack one block black block at a time. I can only pick up or unstack black block if my hand is empty. I can only put down a black block that I am holding. </PRECON> put down the black block <EFFECT> Once I put down a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a white block from on top of another red block if the white block I am unstacking was really on top of the other red block. I can only unstack a white block from on top of another red block if the white block I am unstacking is clear. </PRECON> unstack the white block from on top of the red block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another magenta block if I am holding the white block being stacked. I can only stack a white block on top of another magenta block if the magenta block onto which I am stacking is clear. </PRECON> stack the white block on top of the magenta block <EFFECT> Once you stack a white block on top of a second magenta block, the second white block is no longer clear. Once I stack a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a red block from on top of another orange block if the red block I am unstacking was really on top of the other orange block. I can only unstack a red block from on top of another orange block if the red block I am unstacking is clear. </PRECON> unstack the red block from on top of the orange block <EFFECT> Once unstack a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack one block red block at a time. I can only pick up or unstack red block if my hand is empty. I can only put down a red block that I am holding. </PRECON> put down the red block <EFFECT> Once I put down a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a orange block on top of another blue block if I am holding the orange block being stacked. I can only stack a orange block on top of another blue block if the blue block onto which I am stacking is clear. </PRECON> stack the orange block on top of the blue block <EFFECT> Once you stack a orange block on top of a second blue block, the second orange block is no longer clear. Once I stack a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack black block if my hand is empty. I can only pick up or unstack one block black block at a time. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only stack a black block on top of another white block if I am holding the black block being stacked. I can only stack a black block on top of another white block if the white block onto which I am stacking is clear. </PRECON> stack the black block on top of the white block <EFFECT> Once you stack a black block on top of a second white block, the second black block is no longer clear. Once I stack a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another blue block if the orange block I am unstacking was really on top of the other blue block. I can only unstack a orange block from on top of another blue block if the orange block I am unstacking is clear. </PRECON> unstack the orange block from on top of the blue block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another red block if I am holding the yellow block being stacked. I can only stack a yellow block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the yellow block on top of the red block <EFFECT> Once you stack a yellow block on top of a second red block, the second yellow block is no longer clear. Once I stack a yellow block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack one block orange block at a time. I can only pick up or unstack orange block if my hand is empty. I can only put down a orange block that I am holding. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a blue block from on top of another yellow block if the blue block I am unstacking was really on top of the other yellow block. I can only unstack a blue block from on top of another yellow block if the blue block I am unstacking is clear. </PRECON> unstack the blue block from on top of the yellow block <EFFECT> Once unstack a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. I can only pick up or unstack one block blue block at a time. I can only pick up or unstack blue block if my hand is empty. I can only put down a blue block that I am holding. </PRECON> put down the blue block <EFFECT> Once I put down a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another orange block if I am holding the magenta block being stacked. I can only stack a magenta block on top of another orange block if the orange block onto which I am stacking is clear. </PRECON> stack the magenta block on top of the orange block <EFFECT> Once you stack a magenta block on top of a second orange block, the second magenta block is no longer clear. Once I stack a magenta block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only stack a yellow block on top of another red block if I am holding the yellow block being stacked. I can only stack a yellow block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the yellow block on top of the red block <EFFECT> Once you stack a yellow block on top of a second red block, the second yellow block is no longer clear. Once I stack a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> WRONG \n <PRECON> I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. I can only pick up or unstack blue block if my hand is empty. I can only pick up or unstack one block blue block at a time. </PRECON> pick up the blue block <EFFECT> Once I pick up a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only stack a blue block on top of another yellow block if I am holding the blue block being stacked. I can only stack a blue block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the blue block on top of the yellow block <EFFECT> Once you stack a blue block on top of a second yellow block, the second blue block is no longer clear. Once I stack a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack magenta block if my hand is empty. I can only pick up or unstack one block magenta block at a time. </PRECON> pick up the magenta block <EFFECT> Once I pick up a magenta block, I am holding the magenta block. </EFFECT> WRONG \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a orange block on top of another blue block if I am holding the orange block being stacked. I can only stack a orange block on top of another blue block if the blue block onto which I am stacking is clear. </PRECON> stack the orange block on top of the blue block <EFFECT> Once you stack a orange block on top of a second blue block, the second orange block is no longer clear. Once I stack a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a black block from on top of another white block if the black block I am unstacking was really on top of the other white block. I can only unstack a black block from on top of another white block if the black block I am unstacking is clear. </PRECON> unstack the black block from on top of the white block <EFFECT> Once unstack a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack one block black block at a time. I can only pick up or unstack black block if my hand is empty. I can only put down a black block that I am holding. </PRECON> put down the black block <EFFECT> Once I put down a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a white block from on top of another magenta block if the white block I am unstacking was really on top of the other magenta block. I can only unstack a white block from on top of another magenta block if the white block I am unstacking is clear. </PRECON> unstack the white block from on top of the magenta block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack one block white block at a time. I can only pick up or unstack white block if my hand is empty. I can only put down a white block that I am holding. </PRECON> put down the white block <EFFECT> Once I put down a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack magenta block if my hand is empty. I can only pick up or unstack one block magenta block at a time. </PRECON> pick up the magenta block <EFFECT> Once I pick up a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only stack a black block on top of another white block if I am holding the black block being stacked. I can only stack a black block on top of another white block if the white block onto which I am stacking is clear. </PRECON> stack the black block on top of the white block <EFFECT> Once you stack a black block on top of a second white block, the second black block is no longer clear. Once I stack a black block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only stack a magenta block on top of another orange block if I am holding the magenta block being stacked. I can only stack a magenta block on top of another orange block if the orange block onto which I am stacking is clear. </PRECON> stack the magenta block on top of the orange block <EFFECT> Once you stack a magenta block on top of a second orange block, the second magenta block is no longer clear. Once I stack a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another magenta block if I am holding the white block being stacked. I can only stack a white block on top of another magenta block if the magenta block onto which I am stacking is clear. </PRECON> stack the white block on top of the magenta block <EFFECT> Once you stack a white block on top of a second magenta block, the second white block is no longer clear. Once I stack a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack black block if my hand is empty. I can only pick up or unstack one block black block at a time. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only stack a black block on top of another white block if I am holding the black block being stacked. I can only stack a black block on top of another white block if the white block onto which I am stacking is clear. </PRECON> stack the black block on top of the white block <EFFECT> Once you stack a black block on top of a second white block, the second black block is no longer clear. Once I stack a black block, my hand becomes empty. </EFFECT> \n</PLAN>", "plan_length": 36, "raw_plan": ["(unstack f d)", "(put-down f)", "(unstack d b)", "(put-down d)", "(unstack b g)", "(stack b d)", "(unstack g e)", "(put-down g)", "(unstack e a)", "(stack e f)", "(unstack a c)", "(put-down a)", "(pick-up c)", "(stack c b)", "(pick-up g)", "(stack g e)", "(unstack c b)", "(put-down c)", "(unstack b d)", "(put-down b)", "(pick-up d)", "(stack d a)", "(pick-up b)", "(stack b d)", "(pick-up c)", "(stack c b)", "(unstack g e)", "(put-down g)", "(unstack e f)", "(put-down e)", "(pick-up f)", "(stack f c)", "(pick-up e)", "(stack e f)", "(pick-up g)", "(stack g e)"], "full_text_prompt": "I am playing with a set of blocks where I need to arrange the blocks into stacks.\nHere are the actions that can be performed:\nPick up a block\nUnstack a block from on top of another block\nPut down a block\nStack a block on top of another block\nThe following are the restrictions on the actions:\nI can only pick up or unstack one block at a time.\nI can only pick up or unstack a block if my hand is empty.\nI can only pick up a block if the block is on the table and the block is clear. A block is clear if the block has no other blocks on top of it and if the block is not picked up.\nI can only unstack a block from on top of another block if the block I am unstacking was really on top of the other block.\nI can only unstack a block from on top of another block if the block I am unstacking is clear.\nOnce I pick up or unstack a block, I am holding the block.\nI can only put down a block that I am holding.\nI can only stack a block on top of another block if I am holding the block being stacked.\nI can only stack a block on top of another block if the block onto which I am stacking is clear.\nOnce I put down or stack a block, my hand becomes empty.\nOnce you stack a block on top of a second block, the second block is no longer clear.As initial conditions I have that, the hand is empty, the magenta block is clear, the orange block is on the table, the blue block is on top of the black block, the yellow block is on top of the blue block, the red block is on top of the orange block, the white block is on top of the red block, the magenta block is on top of the yellow block, the black block is on top of the white block.My goal is to have that the white block is on top of the magenta block, the blue block is on top of the yellow block, the yellow block is on top of the red block, the magenta block is on top of the orange block, the black block is on top of the white block, the orange block is on top of the blue block.My plan is as follows:\n<PLAN>\n <PRECON> I can only unstack a magenta block from on top of another yellow block if the magenta block I am unstacking was really on top of the other yellow block. I can only unstack a magenta block from on top of another yellow block if the magenta block I am unstacking is clear. </PRECON> unstack the magenta block from on top of the yellow block <EFFECT> Once unstack a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack one block magenta block at a time. I can only pick up or unstack magenta block if my hand is empty. I can only put down a magenta block that I am holding. </PRECON> put down the magenta block <EFFECT> Once I put down a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack black block if my hand is empty. I can only pick up or unstack one block black block at a time. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> WRONG \n <PRECON> I can only unstack a yellow block from on top of another blue block if the yellow block I am unstacking was really on top of the other blue block. I can only unstack a yellow block from on top of another blue block if the yellow block I am unstacking is clear. </PRECON> unstack the yellow block from on top of the blue block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack one block yellow block at a time. I can only pick up or unstack yellow block if my hand is empty. I can only put down a yellow block that I am holding. </PRECON> put down the yellow block <EFFECT> Once I put down a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a blue block from on top of another black block if the blue block I am unstacking was really on top of the other black block. I can only unstack a blue block from on top of another black block if the blue block I am unstacking is clear. </PRECON> unstack the blue block from on top of the black block <EFFECT> Once unstack a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> WRONG \n <PRECON> I can only stack a blue block on top of another yellow block if I am holding the blue block being stacked. I can only stack a blue block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the blue block on top of the yellow block <EFFECT> Once you stack a blue block on top of a second yellow block, the second blue block is no longer clear. Once I stack a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a black block from on top of another white block if the black block I am unstacking was really on top of the other white block. I can only unstack a black block from on top of another white block if the black block I am unstacking is clear. </PRECON> unstack the black block from on top of the white block <EFFECT> Once unstack a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack one block black block at a time. I can only pick up or unstack black block if my hand is empty. I can only put down a black block that I am holding. </PRECON> put down the black block <EFFECT> Once I put down a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a white block from on top of another red block if the white block I am unstacking was really on top of the other red block. I can only unstack a white block from on top of another red block if the white block I am unstacking is clear. </PRECON> unstack the white block from on top of the red block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another magenta block if I am holding the white block being stacked. I can only stack a white block on top of another magenta block if the magenta block onto which I am stacking is clear. </PRECON> stack the white block on top of the magenta block <EFFECT> Once you stack a white block on top of a second magenta block, the second white block is no longer clear. Once I stack a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a red block from on top of another orange block if the red block I am unstacking was really on top of the other orange block. I can only unstack a red block from on top of another orange block if the red block I am unstacking is clear. </PRECON> unstack the red block from on top of the orange block <EFFECT> Once unstack a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack one block red block at a time. I can only pick up or unstack red block if my hand is empty. I can only put down a red block that I am holding. </PRECON> put down the red block <EFFECT> Once I put down a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a orange block on top of another blue block if I am holding the orange block being stacked. I can only stack a orange block on top of another blue block if the blue block onto which I am stacking is clear. </PRECON> stack the orange block on top of the blue block <EFFECT> Once you stack a orange block on top of a second blue block, the second orange block is no longer clear. Once I stack a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack black block if my hand is empty. I can only pick up or unstack one block black block at a time. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only stack a black block on top of another white block if I am holding the black block being stacked. I can only stack a black block on top of another white block if the white block onto which I am stacking is clear. </PRECON> stack the black block on top of the white block <EFFECT> Once you stack a black block on top of a second white block, the second black block is no longer clear. Once I stack a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another blue block if the orange block I am unstacking was really on top of the other blue block. I can only unstack a orange block from on top of another blue block if the orange block I am unstacking is clear. </PRECON> unstack the orange block from on top of the blue block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another red block if I am holding the yellow block being stacked. I can only stack a yellow block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the yellow block on top of the red block <EFFECT> Once you stack a yellow block on top of a second red block, the second yellow block is no longer clear. Once I stack a yellow block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack one block orange block at a time. I can only pick up or unstack orange block if my hand is empty. I can only put down a orange block that I am holding. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a blue block from on top of another yellow block if the blue block I am unstacking was really on top of the other yellow block. I can only unstack a blue block from on top of another yellow block if the blue block I am unstacking is clear. </PRECON> unstack the blue block from on top of the yellow block <EFFECT> Once unstack a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. I can only pick up or unstack one block blue block at a time. I can only pick up or unstack blue block if my hand is empty. I can only put down a blue block that I am holding. </PRECON> put down the blue block <EFFECT> Once I put down a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a magenta block on top of another orange block if I am holding the magenta block being stacked. I can only stack a magenta block on top of another orange block if the orange block onto which I am stacking is clear. </PRECON> stack the magenta block on top of the orange block <EFFECT> Once you stack a magenta block on top of a second orange block, the second magenta block is no longer clear. Once I stack a magenta block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only stack a yellow block on top of another red block if I am holding the yellow block being stacked. I can only stack a yellow block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the yellow block on top of the red block <EFFECT> Once you stack a yellow block on top of a second red block, the second yellow block is no longer clear. Once I stack a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> WRONG \n <PRECON> I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. I can only pick up or unstack blue block if my hand is empty. I can only pick up or unstack one block blue block at a time. </PRECON> pick up the blue block <EFFECT> Once I pick up a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only stack a blue block on top of another yellow block if I am holding the blue block being stacked. I can only stack a blue block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the blue block on top of the yellow block <EFFECT> Once you stack a blue block on top of a second yellow block, the second blue block is no longer clear. Once I stack a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack magenta block if my hand is empty. I can only pick up or unstack one block magenta block at a time. </PRECON> pick up the magenta block <EFFECT> Once I pick up a magenta block, I am holding the magenta block. </EFFECT> WRONG \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a orange block on top of another blue block if I am holding the orange block being stacked. I can only stack a orange block on top of another blue block if the blue block onto which I am stacking is clear. </PRECON> stack the orange block on top of the blue block <EFFECT> Once you stack a orange block on top of a second blue block, the second orange block is no longer clear. Once I stack a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a black block from on top of another white block if the black block I am unstacking was really on top of the other white block. I can only unstack a black block from on top of another white block if the black block I am unstacking is clear. </PRECON> unstack the black block from on top of the white block <EFFECT> Once unstack a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack one block black block at a time. I can only pick up or unstack black block if my hand is empty. I can only put down a black block that I am holding. </PRECON> put down the black block <EFFECT> Once I put down a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a white block from on top of another magenta block if the white block I am unstacking was really on top of the other magenta block. I can only unstack a white block from on top of another magenta block if the white block I am unstacking is clear. </PRECON> unstack the white block from on top of the magenta block <EFFECT> Once unstack a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack one block white block at a time. I can only pick up or unstack white block if my hand is empty. I can only put down a white block that I am holding. </PRECON> put down the white block <EFFECT> Once I put down a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only pick up or unstack magenta block if my hand is empty. I can only pick up or unstack one block magenta block at a time. </PRECON> pick up the magenta block <EFFECT> Once I pick up a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only stack a black block on top of another white block if I am holding the black block being stacked. I can only stack a black block on top of another white block if the white block onto which I am stacking is clear. </PRECON> stack the black block on top of the white block <EFFECT> Once you stack a black block on top of a second white block, the second black block is no longer clear. Once I stack a black block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only stack a magenta block on top of another orange block if I am holding the magenta block being stacked. I can only stack a magenta block on top of another orange block if the orange block onto which I am stacking is clear. </PRECON> stack the magenta block on top of the orange block <EFFECT> Once you stack a magenta block on top of a second orange block, the second magenta block is no longer clear. Once I stack a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another magenta block if I am holding the white block being stacked. I can only stack a white block on top of another magenta block if the magenta block onto which I am stacking is clear. </PRECON> stack the white block on top of the magenta block <EFFECT> Once you stack a white block on top of a second magenta block, the second white block is no longer clear. Once I stack a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack black block if my hand is empty. I can only pick up or unstack one block black block at a time. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only stack a black block on top of another white block if I am holding the black block being stacked. I can only stack a black block on top of another white block if the white block onto which I am stacking is clear. </PRECON> stack the black block on top of the white block <EFFECT> Once you stack a black block on top of a second white block, the second black block is no longer clear. Once I stack a black block, my hand becomes empty. </EFFECT> \n</PLAN>"}
{"domain": "blocksworld", "instance_id": "120", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I am playing with a set of blocks where I need to arrange the blocks into stacks.\nHere are the actions that can be performed:\nPick up a block\nUnstack a block from on top of another block\nPut down a block\nStack a block on top of another block\nThe following are the restrictions on the actions:\nI can only pick up or unstack one block at a time.\nI can only pick up or unstack a block if my hand is empty.\nI can only pick up a block if the block is on the table and the block is clear. A block is clear if the block has no other blocks on top of it and if the block is not picked up.\nI can only unstack a block from on top of another block if the block I am unstacking was really on top of the other block.\nI can only unstack a block from on top of another block if the block I am unstacking is clear.\nOnce I pick up or unstack a block, I am holding the block.\nI can only put down a block that I am holding.\nI can only stack a block on top of another block if I am holding the block being stacked.\nI can only stack a block on top of another block if the block onto which I am stacking is clear.\nOnce I put down or stack a block, my hand becomes empty.\nOnce you stack a block on top of a second block, the second block is no longer clear.", "input": "As initial conditions I have that, the magenta block is on top of the yellow block, the hand is empty, the blue block is on top of the magenta block, the white block is on the table, the black block is on the table, the orange block is on top of the white block, the cyan block is on the table, the red block is clear, the yellow block is on top of the black block, the red block is on top of the orange block, the blue block is clear, the cyan block is clear.\nMy goal is to have that the black block is on top of the blue block, the yellow block is on top of the orange block, the orange block is on top of the red block, the red block is on top of the white block, the blue block is on top of the magenta block, the cyan block is on top of the yellow block, the white block is on top of the black block.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> I can only unstack a red block from on top of another orange block if the red block I am unstacking is clear. I can only unstack a red block from on top of another orange block if the red block I am unstacking was really on top of the other orange block. </PRECON> unstack the red block from on top of the orange block <EFFECT> Once unstack a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only pick up or unstack red block if my hand is empty. I can only pick up or unstack one block red block at a time. I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only put down a red block that I am holding. </PRECON> put down the red block <EFFECT> Once I put down a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking was really on top of the other yellow block. </PRECON> unstack the cyan block from on top of the yellow block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> WRONG \n <PRECON> I can only unstack a orange block from on top of another white block if the orange block I am unstacking is clear. I can only unstack a orange block from on top of another white block if the orange block I am unstacking was really on top of the other white block. </PRECON> unstack the orange block from on top of the white block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a orange block on top of another red block if I am holding the orange block being stacked. I can only stack a orange block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the orange block on top of the red block <EFFECT> Once you stack a orange block on top of a second red block, the second orange block is no longer clear. Once I stack a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only put down a orange block that I am holding. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only unstack a blue block from on top of another magenta block if the blue block I am unstacking is clear. I can only unstack a blue block from on top of another magenta block if the blue block I am unstacking was really on top of the other magenta block. </PRECON> unstack the blue block from on top of the magenta block <EFFECT> Once unstack a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only pick up or unstack blue block if my hand is empty. I can only pick up or unstack one block blue block at a time. I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. I can only put down a blue block that I am holding. </PRECON> put down the blue block <EFFECT> Once I put down a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a magenta block from on top of another yellow block if the magenta block I am unstacking is clear. I can only unstack a magenta block from on top of another yellow block if the magenta block I am unstacking was really on top of the other yellow block. </PRECON> unstack the magenta block from on top of the yellow block <EFFECT> Once unstack a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only pick up or unstack magenta block if my hand is empty. I can only pick up or unstack one block magenta block at a time. I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only put down a magenta block that I am holding. </PRECON> put down the magenta block <EFFECT> Once I put down a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a yellow block from on top of another black block if the yellow block I am unstacking is clear. I can only unstack a yellow block from on top of another black block if the yellow block I am unstacking was really on top of the other black block. </PRECON> unstack the yellow block from on top of the black block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another orange block if I am holding the yellow block being stacked. I can only stack a yellow block on top of another orange block if the orange block onto which I am stacking is clear. </PRECON> stack the yellow block on top of the orange block <EFFECT> Once you stack a yellow block on top of a second orange block, the second yellow block is no longer clear. Once I stack a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. I can only pick up or unstack blue block if my hand is empty. I can only pick up or unstack one block blue block at a time. </PRECON> pick up the blue block <EFFECT> Once I pick up a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only stack a blue block on top of another magenta block if I am holding the blue block being stacked. I can only stack a blue block on top of another magenta block if the magenta block onto which I am stacking is clear. </PRECON> stack the blue block on top of the magenta block <EFFECT> Once you stack a blue block on top of a second magenta block, the second blue block is no longer clear. Once I stack a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack cyan block if my hand is empty. I can only pick up or unstack one block cyan block at a time. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another red block if the orange block I am unstacking is clear. I can only unstack a orange block from on top of another red block if the orange block I am unstacking was really on top of the other red block. </PRECON> unstack the orange block from on top of the red block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> WRONG \n <PRECON> I can only stack a cyan block on top of another yellow block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the yellow block <EFFECT> Once you stack a cyan block on top of a second yellow block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack black block if my hand is empty. I can only pick up or unstack one block black block at a time. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only stack a black block on top of another blue block if I am holding the black block being stacked. I can only stack a black block on top of another blue block if the blue block onto which I am stacking is clear. </PRECON> stack the black block on top of the blue block <EFFECT> Once you stack a black block on top of a second blue block, the second black block is no longer clear. Once I stack a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another black block if I am holding the white block being stacked. I can only stack a white block on top of another black block if the black block onto which I am stacking is clear. </PRECON> stack the white block on top of the black block <EFFECT> Once you stack a white block on top of a second black block, the second white block is no longer clear. Once I stack a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only put down a orange block that I am holding. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking was really on top of the other yellow block. </PRECON> unstack the cyan block from on top of the yellow block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only pick up or unstack cyan block if my hand is empty. I can only pick up or unstack one block cyan block at a time. I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only put down a cyan block that I am holding. </PRECON> put down the cyan block <EFFECT> Once I put down a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only stack a cyan block on top of another yellow block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the yellow block <EFFECT> Once you stack a cyan block on top of a second yellow block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only unstack a yellow block from on top of another orange block if the yellow block I am unstacking is clear. I can only unstack a yellow block from on top of another orange block if the yellow block I am unstacking was really on top of the other orange block. </PRECON> unstack the yellow block from on top of the orange block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only put down a yellow block that I am holding. </PRECON> put down the yellow block <EFFECT> Once I put down a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack cyan block if my hand is empty. I can only pick up or unstack one block cyan block at a time. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only stack a cyan block on top of another yellow block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the yellow block <EFFECT> Once you stack a cyan block on top of a second yellow block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another red block if the orange block I am unstacking is clear. I can only unstack a orange block from on top of another red block if the orange block I am unstacking was really on top of the other red block. </PRECON> unstack the orange block from on top of the red block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only put down a orange block that I am holding. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack red block if my hand is empty. I can only pick up or unstack one block red block at a time. </PRECON> pick up the red block <EFFECT> Once I pick up a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only stack a red block on top of another white block if I am holding the red block being stacked. I can only stack a red block on top of another white block if the white block onto which I am stacking is clear. </PRECON> stack the red block on top of the white block <EFFECT> Once you stack a red block on top of a second white block, the second red block is no longer clear. Once I stack a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a orange block on top of another red block if I am holding the orange block being stacked. I can only stack a orange block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the orange block on top of the red block <EFFECT> Once you stack a orange block on top of a second red block, the second orange block is no longer clear. Once I stack a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking was really on top of the other yellow block. </PRECON> unstack the cyan block from on top of the yellow block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only pick up or unstack cyan block if my hand is empty. I can only pick up or unstack one block cyan block at a time. I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only put down a cyan block that I am holding. </PRECON> put down the cyan block <EFFECT> Once I put down a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another orange block if I am holding the yellow block being stacked. I can only stack a yellow block on top of another orange block if the orange block onto which I am stacking is clear. </PRECON> stack the yellow block on top of the orange block <EFFECT> Once you stack a yellow block on top of a second orange block, the second yellow block is no longer clear. Once I stack a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack cyan block if my hand is empty. I can only pick up or unstack one block cyan block at a time. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only stack a cyan block on top of another yellow block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the yellow block <EFFECT> Once you stack a cyan block on top of a second yellow block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> \n</PLAN>", "plan_length": 36, "raw_plan": ["(unstack a c)", "(put-down a)", "(unstack c e)", "(stack c a)", "(unstack b f)", "(put-down b)", "(unstack f d)", "(put-down f)", "(unstack d g)", "(stack d c)", "(pick-up b)", "(stack b f)", "(pick-up h)", "(stack h d)", "(pick-up g)", "(stack g b)", "(pick-up e)", "(stack e g)", "(unstack h d)", "(put-down h)", "(unstack d c)", "(put-down d)", "(pick-up h)", "(stack h d)", "(unstack c a)", "(put-down c)", "(pick-up a)", "(stack a e)", "(pick-up c)", "(stack c a)", "(unstack h d)", "(put-down h)", "(pick-up d)", "(stack d c)", "(pick-up h)", "(stack h d)"], "full_text_prompt": "I am playing with a set of blocks where I need to arrange the blocks into stacks.\nHere are the actions that can be performed:\nPick up a block\nUnstack a block from on top of another block\nPut down a block\nStack a block on top of another block\nThe following are the restrictions on the actions:\nI can only pick up or unstack one block at a time.\nI can only pick up or unstack a block if my hand is empty.\nI can only pick up a block if the block is on the table and the block is clear. A block is clear if the block has no other blocks on top of it and if the block is not picked up.\nI can only unstack a block from on top of another block if the block I am unstacking was really on top of the other block.\nI can only unstack a block from on top of another block if the block I am unstacking is clear.\nOnce I pick up or unstack a block, I am holding the block.\nI can only put down a block that I am holding.\nI can only stack a block on top of another block if I am holding the block being stacked.\nI can only stack a block on top of another block if the block onto which I am stacking is clear.\nOnce I put down or stack a block, my hand becomes empty.\nOnce you stack a block on top of a second block, the second block is no longer clear.As initial conditions I have that, the magenta block is on top of the yellow block, the hand is empty, the blue block is on top of the magenta block, the white block is on the table, the black block is on the table, the orange block is on top of the white block, the cyan block is on the table, the red block is clear, the yellow block is on top of the black block, the red block is on top of the orange block, the blue block is clear, the cyan block is clear.My goal is to have that the black block is on top of the blue block, the yellow block is on top of the orange block, the orange block is on top of the red block, the red block is on top of the white block, the blue block is on top of the magenta block, the cyan block is on top of the yellow block, the white block is on top of the black block.My plan is as follows:\n<PLAN>\n <PRECON> I can only unstack a red block from on top of another orange block if the red block I am unstacking is clear. I can only unstack a red block from on top of another orange block if the red block I am unstacking was really on top of the other orange block. </PRECON> unstack the red block from on top of the orange block <EFFECT> Once unstack a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only pick up or unstack red block if my hand is empty. I can only pick up or unstack one block red block at a time. I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only put down a red block that I am holding. </PRECON> put down the red block <EFFECT> Once I put down a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking was really on top of the other yellow block. </PRECON> unstack the cyan block from on top of the yellow block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> WRONG \n <PRECON> I can only unstack a orange block from on top of another white block if the orange block I am unstacking is clear. I can only unstack a orange block from on top of another white block if the orange block I am unstacking was really on top of the other white block. </PRECON> unstack the orange block from on top of the white block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a orange block on top of another red block if I am holding the orange block being stacked. I can only stack a orange block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the orange block on top of the red block <EFFECT> Once you stack a orange block on top of a second red block, the second orange block is no longer clear. Once I stack a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only put down a orange block that I am holding. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only unstack a blue block from on top of another magenta block if the blue block I am unstacking is clear. I can only unstack a blue block from on top of another magenta block if the blue block I am unstacking was really on top of the other magenta block. </PRECON> unstack the blue block from on top of the magenta block <EFFECT> Once unstack a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only pick up or unstack blue block if my hand is empty. I can only pick up or unstack one block blue block at a time. I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. I can only put down a blue block that I am holding. </PRECON> put down the blue block <EFFECT> Once I put down a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a magenta block from on top of another yellow block if the magenta block I am unstacking is clear. I can only unstack a magenta block from on top of another yellow block if the magenta block I am unstacking was really on top of the other yellow block. </PRECON> unstack the magenta block from on top of the yellow block <EFFECT> Once unstack a magenta block, I am holding the magenta block. </EFFECT> \n <PRECON> I can only pick up or unstack magenta block if my hand is empty. I can only pick up or unstack one block magenta block at a time. I can only pick up a magenta block if the magenta block is on the table and the magenta block is clear. A magenta block is clear if the magenta block has no other blocks on top of it and if the magenta block is not picked up. I can only put down a magenta block that I am holding. </PRECON> put down the magenta block <EFFECT> Once I put down a magenta block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a yellow block from on top of another black block if the yellow block I am unstacking is clear. I can only unstack a yellow block from on top of another black block if the yellow block I am unstacking was really on top of the other black block. </PRECON> unstack the yellow block from on top of the black block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another orange block if I am holding the yellow block being stacked. I can only stack a yellow block on top of another orange block if the orange block onto which I am stacking is clear. </PRECON> stack the yellow block on top of the orange block <EFFECT> Once you stack a yellow block on top of a second orange block, the second yellow block is no longer clear. Once I stack a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a blue block if the blue block is on the table and the blue block is clear. A blue block is clear if the blue block has no other blocks on top of it and if the blue block is not picked up. I can only pick up or unstack blue block if my hand is empty. I can only pick up or unstack one block blue block at a time. </PRECON> pick up the blue block <EFFECT> Once I pick up a blue block, I am holding the blue block. </EFFECT> \n <PRECON> I can only stack a blue block on top of another magenta block if I am holding the blue block being stacked. I can only stack a blue block on top of another magenta block if the magenta block onto which I am stacking is clear. </PRECON> stack the blue block on top of the magenta block <EFFECT> Once you stack a blue block on top of a second magenta block, the second blue block is no longer clear. Once I stack a blue block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack cyan block if my hand is empty. I can only pick up or unstack one block cyan block at a time. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another red block if the orange block I am unstacking is clear. I can only unstack a orange block from on top of another red block if the orange block I am unstacking was really on top of the other red block. </PRECON> unstack the orange block from on top of the red block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> WRONG \n <PRECON> I can only stack a cyan block on top of another yellow block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the yellow block <EFFECT> Once you stack a cyan block on top of a second yellow block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a black block if the black block is on the table and the black block is clear. A black block is clear if the black block has no other blocks on top of it and if the black block is not picked up. I can only pick up or unstack black block if my hand is empty. I can only pick up or unstack one block black block at a time. </PRECON> pick up the black block <EFFECT> Once I pick up a black block, I am holding the black block. </EFFECT> \n <PRECON> I can only stack a black block on top of another blue block if I am holding the black block being stacked. I can only stack a black block on top of another blue block if the blue block onto which I am stacking is clear. </PRECON> stack the black block on top of the blue block <EFFECT> Once you stack a black block on top of a second blue block, the second black block is no longer clear. Once I stack a black block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a white block if the white block is on the table and the white block is clear. A white block is clear if the white block has no other blocks on top of it and if the white block is not picked up. I can only pick up or unstack white block if my hand is empty. I can only pick up or unstack one block white block at a time. </PRECON> pick up the white block <EFFECT> Once I pick up a white block, I am holding the white block. </EFFECT> \n <PRECON> I can only stack a white block on top of another black block if I am holding the white block being stacked. I can only stack a white block on top of another black block if the black block onto which I am stacking is clear. </PRECON> stack the white block on top of the black block <EFFECT> Once you stack a white block on top of a second black block, the second white block is no longer clear. Once I stack a white block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only put down a orange block that I am holding. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking was really on top of the other yellow block. </PRECON> unstack the cyan block from on top of the yellow block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only pick up or unstack cyan block if my hand is empty. I can only pick up or unstack one block cyan block at a time. I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only put down a cyan block that I am holding. </PRECON> put down the cyan block <EFFECT> Once I put down a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only stack a cyan block on top of another yellow block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the yellow block <EFFECT> Once you stack a cyan block on top of a second yellow block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> WRONG \n <PRECON> I can only unstack a yellow block from on top of another orange block if the yellow block I am unstacking is clear. I can only unstack a yellow block from on top of another orange block if the yellow block I am unstacking was really on top of the other orange block. </PRECON> unstack the yellow block from on top of the orange block <EFFECT> Once unstack a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only put down a yellow block that I am holding. </PRECON> put down the yellow block <EFFECT> Once I put down a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack cyan block if my hand is empty. I can only pick up or unstack one block cyan block at a time. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only stack a cyan block on top of another yellow block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the yellow block <EFFECT> Once you stack a cyan block on top of a second yellow block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a orange block from on top of another red block if the orange block I am unstacking is clear. I can only unstack a orange block from on top of another red block if the orange block I am unstacking was really on top of the other red block. </PRECON> unstack the orange block from on top of the red block <EFFECT> Once unstack a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only put down a orange block that I am holding. </PRECON> put down the orange block <EFFECT> Once I put down a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a red block if the red block is on the table and the red block is clear. A red block is clear if the red block has no other blocks on top of it and if the red block is not picked up. I can only pick up or unstack red block if my hand is empty. I can only pick up or unstack one block red block at a time. </PRECON> pick up the red block <EFFECT> Once I pick up a red block, I am holding the red block. </EFFECT> \n <PRECON> I can only stack a red block on top of another white block if I am holding the red block being stacked. I can only stack a red block on top of another white block if the white block onto which I am stacking is clear. </PRECON> stack the red block on top of the white block <EFFECT> Once you stack a red block on top of a second white block, the second red block is no longer clear. Once I stack a red block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a orange block if the orange block is on the table and the orange block is clear. A orange block is clear if the orange block has no other blocks on top of it and if the orange block is not picked up. I can only pick up or unstack orange block if my hand is empty. I can only pick up or unstack one block orange block at a time. </PRECON> pick up the orange block <EFFECT> Once I pick up a orange block, I am holding the orange block. </EFFECT> \n <PRECON> I can only stack a orange block on top of another red block if I am holding the orange block being stacked. I can only stack a orange block on top of another red block if the red block onto which I am stacking is clear. </PRECON> stack the orange block on top of the red block <EFFECT> Once you stack a orange block on top of a second red block, the second orange block is no longer clear. Once I stack a orange block, my hand becomes empty. </EFFECT> \n <PRECON> I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking is clear. I can only unstack a cyan block from on top of another yellow block if the cyan block I am unstacking was really on top of the other yellow block. </PRECON> unstack the cyan block from on top of the yellow block <EFFECT> Once unstack a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only pick up or unstack cyan block if my hand is empty. I can only pick up or unstack one block cyan block at a time. I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only put down a cyan block that I am holding. </PRECON> put down the cyan block <EFFECT> Once I put down a cyan block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a yellow block if the yellow block is on the table and the yellow block is clear. A yellow block is clear if the yellow block has no other blocks on top of it and if the yellow block is not picked up. I can only pick up or unstack yellow block if my hand is empty. I can only pick up or unstack one block yellow block at a time. </PRECON> pick up the yellow block <EFFECT> Once I pick up a yellow block, I am holding the yellow block. </EFFECT> \n <PRECON> I can only stack a yellow block on top of another orange block if I am holding the yellow block being stacked. I can only stack a yellow block on top of another orange block if the orange block onto which I am stacking is clear. </PRECON> stack the yellow block on top of the orange block <EFFECT> Once you stack a yellow block on top of a second orange block, the second yellow block is no longer clear. Once I stack a yellow block, my hand becomes empty. </EFFECT> \n <PRECON> I can only pick up a cyan block if the cyan block is on the table and the cyan block is clear. A cyan block is clear if the cyan block has no other blocks on top of it and if the cyan block is not picked up. I can only pick up or unstack cyan block if my hand is empty. I can only pick up or unstack one block cyan block at a time. </PRECON> pick up the cyan block <EFFECT> Once I pick up a cyan block, I am holding the cyan block. </EFFECT> \n <PRECON> I can only stack a cyan block on top of another yellow block if I am holding the cyan block being stacked. I can only stack a cyan block on top of another yellow block if the yellow block onto which I am stacking is clear. </PRECON> stack the cyan block on top of the yellow block <EFFECT> Once you stack a cyan block on top of a second yellow block, the second cyan block is no longer clear. Once I stack a cyan block, my hand becomes empty. </EFFECT> \n</PLAN>"}
{"domain": "childsnack", "instance_id": "40", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to make and serve sandwiches for a group of children, taking into account that some of them are allergic to gluten. There are two types of sandwiches: regular and gluten-free.\nHere are the actions that can be performed:\nMake a gluten-free sandwich.\nMake a regular sandwich.\nPut a sandwich on a tray.\nServe a gluten-free sandwich to an allergic child.\nServe a regular sandwich to a child.\nMove a tray between kitchen and tables.\nThe following are the restrictions on the actions:\nWe can make a gluten-free sandwich only if there is a bread at kitchen and the bread is gluten-free.\nWe can make a gluten-free sandwich only if there is a content at kitchen and the content is gluten-free.\nOnce we make a gluten-free sandwich, the bread and content are no longer at kitchen.\nOnce we make a gluten-free sandwich, the sandwich is at kitchen and is gluten-free.\nWe can make a regular sandwich only if there is a bread at kitchen.\nWe can make a regular sandwich only if there is a content at kitchen.\nOnce we make a regular sandwich, the bread and content are no longer at kitchen.\nOnce we make a regular sandwich, the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the tray is also at kitchen.\nOnce we put a sandwich on a tray, the sandwich is no longer at kitchen but is on the tray.\nWe can serve a gluten-free sandwich to an allergic child only if the child is allergic to gluten.\nWe can serve a gluten-free sandwich to an allergic child only if the sandwich is on a tray and the sandwich is gluten-free.\nWe can serve a gluten-free sandwich to an allergic child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the tray is at the table where the child is waiting.\nOnce we serve a gluten-free sandwich to an allergic child, the sandwich is no longer on the tray.\nOnce we serve a gluten-free sandwich to an allergic child, we say the child has been served.\nWe can serve a regular sandwich to a child only if the child is not allergic to gluten.\nWe can serve a regular sandwich to a child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the sandwich is on a tray and the tray is at the table where the child is waiting.\nOnce we serve a regular sandwich to a child, the sandwich is no longer on the tray.\nOnce we serve a regular sandwich to a child, we say the child has been served.\nWe can move a tray from from-place to to-place only if the tray is at from-place.\nOnce we move a tray from from-place to to-place, the tray is no longer at from-place but is at to-place.", "input": "As initial conditions I have that, sandwich_5 is not ready yet, sandwich_1 is not ready yet, content_4 is at kitchen, bread_3 is at kitchen, child_2 is waiting for sandwich at table_3, sandwich_7 is not ready yet, sandwich_6 is not ready yet, bread_1 is at kitchen, tray_2 is at kitchen, content_2 is gluten-free, child_4 is waiting for sandwich at table_1, child_1 is waiting for sandwich at table_3, tray_1 is at kitchen, bread_4 is at kitchen, tray_3 is at kitchen, bread_4 is gluten-free, sandwich_2 is not ready yet, sandwich_4 is not ready yet, bread_2 is gluten-free, child_3 is allergic to gluten, sandwich_8 is not ready yet, sandwich_3 is not ready yet, content_2 is at kitchen, bread_2 is at kitchen, child_1 is not allergic to gluten, child_3 is waiting for sandwich at table_3, content_3 is at kitchen, child_2 is allergic to gluten, content_4 is gluten-free, child_4 is not allergic to gluten, content_1 is at kitchen.\nMy goal is to have that child_2 has been served, child_1 has been served, child_3 has been served, child_4 has been served.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> We can make a gluten-free sandwich_1 only if there is a content_2 at kitchen and the content_2 is gluten-free. We can make a gluten-free sandwich_1 only if there is a bread_2 at kitchen and the bread_2 is gluten-free. </PRECON> make a gluten-free sandwich_1 using bread_2 and content_2 <EFFECT> Once we make a gluten-free sandwich_1, the sandwich_1 is at kitchen and is gluten-free. Once we make a gluten-free sandwich_1, the bread_2 and content_2 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_3 from kitchen to table_1 only if the tray_3 is at kitchen. </PRECON> move tray_3 from kitchen to table_1 <EFFECT> Once we move a tray_3 from kitchen to table_1, the tray_3 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can put a sandwich_7 on a tray_2 only if the sandwich_7 is at kitchen. We can put a sandwich_7 on a tray_2 only if the tray_2 is also at kitchen. </PRECON> put sandwich_7 on tray_2 <EFFECT> Once we put a sandwich_7 on a tray_2, the sandwich_7 is no longer at kitchen but is on the tray_2. </EFFECT> WRONG \n <PRECON> We can put a sandwich_1 on a tray_2 only if the sandwich_1 is at kitchen. We can put a sandwich_1 on a tray_2 only if the tray_2 is also at kitchen. </PRECON> put sandwich_1 on tray_2 <EFFECT> Once we put a sandwich_1 on a tray_2, the sandwich_1 is no longer at kitchen but is on the tray_2. </EFFECT> \n <PRECON> We can move a tray_2 from kitchen to table_1 only if the tray_2 is at kitchen. </PRECON> move tray_2 from kitchen to table_1 <EFFECT> Once we move a tray_2 from kitchen to table_1, the tray_2 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_2 from table_1 to table_3 only if the tray_2 is at table_1. </PRECON> move tray_2 from table_1 to table_3 <EFFECT> Once we move a tray_2 from table_1 to table_3, the tray_2 is no longer at table_1 but is at table_3. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_2 only if the tray_2 is at the table_3 where the child_2 is waiting. We can serve a gluten-free sandwich_1 to an allergic child_2 only if the child_2 is allergic to gluten. We can serve a gluten-free sandwich_1 to an allergic child_2 only if the sandwich_1 is on a tray_2 and the sandwich_1 is gluten-free. We can serve a gluten-free sandwich_1 to an allergic child_2 only if the child_2 is waiting for the sandwich_1 at the table_3. </PRECON> use tray_2 to serve gluten-free sandwich_1 to child_2 at table_3 <EFFECT> Once we serve a gluten-free sandwich_1 to an allergic child_2, we say the child_2 has been served. Once we serve a gluten-free sandwich_1 to an allergic child_2, the sandwich_1 is no longer on the tray_2. </EFFECT> \n <PRECON> We can make a gluten-free sandwich_8 only if there is a content_4 at kitchen and the content_4 is gluten-free. We can make a gluten-free sandwich_8 only if there is a bread_4 at kitchen and the bread_4 is gluten-free. </PRECON> make a gluten-free sandwich_8 using bread_4 and content_4 <EFFECT> Once we make a gluten-free sandwich_8, the sandwich_8 is at kitchen and is gluten-free. Once we make a gluten-free sandwich_8, the bread_4 and content_4 are no longer at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_8 on a tray_1 only if the sandwich_8 is at kitchen. We can put a sandwich_8 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_8 on tray_1 <EFFECT> Once we put a sandwich_8 on a tray_1, the sandwich_8 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_3 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_3 <EFFECT> Once we move a tray_1 from table_1 to table_3, the tray_1 is no longer at table_1 but is at table_3. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_3 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_3 <EFFECT> Once we move a tray_1 from kitchen to table_3, the tray_1 is no longer at kitchen but is at table_3. </EFFECT> WRONG \n <PRECON> We can serve a regular sandwich_8 to a child_3 only if the tray_1 is at the table_3 where the child_3 is waiting. We can serve a gluten-free sandwich_8 to an allergic child_3 only if the child_3 is allergic to gluten. We can serve a gluten-free sandwich_8 to an allergic child_3 only if the sandwich_8 is on a tray_1 and the sandwich_8 is gluten-free. We can serve a gluten-free sandwich_8 to an allergic child_3 only if the child_3 is waiting for the sandwich_8 at the table_3. </PRECON> use tray_1 to serve gluten-free sandwich_8 to child_3 at table_3 <EFFECT> Once we serve a gluten-free sandwich_8 to an allergic child_3, we say the child_3 has been served. Once we serve a gluten-free sandwich_8 to an allergic child_3, the sandwich_8 is no longer on the tray_1. </EFFECT> \n <PRECON> We can move a tray_2 from table_3 to kitchen only if the tray_2 is at table_3. </PRECON> move tray_2 from table_3 to kitchen <EFFECT> Once we move a tray_2 from table_3 to kitchen, the tray_2 is no longer at table_3 but is at kitchen. </EFFECT> \n <PRECON> We can make a regular sandwich_7 only if there is a content_1 at kitchen. We can make a regular sandwich_7 only if there is a bread_1 at kitchen. </PRECON> make a regular sandwich_7 using bread_1 and content_1 <EFFECT> Once we make a regular sandwich_7, the bread_1 and content_1 are no longer at kitchen. Once we make a regular sandwich_7, the sandwich_7 is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> WRONG \n <PRECON> We can put a sandwich_7 on a tray_2 only if the sandwich_7 is at kitchen. We can put a sandwich_7 on a tray_2 only if the tray_2 is also at kitchen. </PRECON> put sandwich_7 on tray_2 <EFFECT> Once we put a sandwich_7 on a tray_2, the sandwich_7 is no longer at kitchen but is on the tray_2. </EFFECT> \n <PRECON> We can move a tray_2 from kitchen to table_1 only if the tray_2 is at kitchen. </PRECON> move tray_2 from kitchen to table_1 <EFFECT> Once we move a tray_2 from kitchen to table_1, the tray_2 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_7 to a child_4 only if the child is waiting for the sandwich_7 at the table_1. We can serve a regular sandwich_7 to a child_4 only if the child_4 is not allergic to gluten. We can serve a regular sandwich_7 to a child_4 only if the sandwich_7 is on a tray_2 and the tray_2 is at the table_1 where the child_4 is waiting. </PRECON> use tray_2 to serve regular sandwich_7 to child_4 at table_1 <EFFECT> Once we serve a regular sandwich_7 to a child_4, the sandwich_7 is no longer on the tray_2. Once we serve a regular sandwich_7 to a child_4, we say the child_4 has been served. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a content_3 at kitchen. We can make a regular sandwich_6 only if there is a bread_3 at kitchen. </PRECON> make a regular sandwich_6 using bread_3 and content_3 <EFFECT> Once we make a regular sandwich_6, the bread_3 and content_3 are no longer at kitchen. Once we make a regular sandwich_6, the sandwich_6 is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_3 to kitchen only if the tray_1 is at table_3. </PRECON> move tray_1 from table_3 to kitchen <EFFECT> Once we move a tray_1 from table_3 to kitchen, the tray_1 is no longer at table_3 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_1 only if the child is waiting for the sandwich_6 at the table_3. We can serve a regular sandwich_6 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_6 to a child_1 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_3 where the child_1 is waiting. </PRECON> use tray_1 to serve regular sandwich_6 to child_1 at table_3 <EFFECT> Once we serve a regular sandwich_6 to a child_1, the sandwich_6 is no longer on the tray_1. Once we serve a regular sandwich_6 to a child_1, we say the child_1 has been served. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from kitchen to table_3 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_3 <EFFECT> Once we move a tray_1 from kitchen to table_3, the tray_1 is no longer at kitchen but is at table_3. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_1 only if the child is waiting for the sandwich_6 at the table_3. We can serve a regular sandwich_6 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_6 to a child_1 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_3 where the child_1 is waiting. </PRECON> use tray_1 to serve regular sandwich_6 to child_1 at table_3 <EFFECT> Once we serve a regular sandwich_6 to a child_1, the sandwich_6 is no longer on the tray_1. Once we serve a regular sandwich_6 to a child_1, we say the child_1 has been served. </EFFECT> \n</PLAN>", "plan_length": 21, "raw_plan": ["(make_sandwich_no_gluten sandw1 bread2 content2)", "(move_tray tray3 kitchen table1)", "(put_on_tray sandw1 tray2)", "(move_tray tray2 kitchen table1)", "(move_tray tray2 table1 table3)", "(serve_sandwich_no_gluten sandw1 child2 tray2 table3)", "(make_sandwich_no_gluten sandw8 bread4 content4)", "(put_on_tray sandw8 tray1)", "(move_tray tray1 kitchen table1)", "(move_tray tray1 table1 table3)", "(serve_sandwich_no_gluten sandw8 child3 tray1 table3)", "(move_tray tray2 table3 kitchen)", "(make_sandwich sandw7 bread1 content1)", "(put_on_tray sandw7 tray2)", "(move_tray tray2 kitchen table1)", "(serve_sandwich sandw7 child4 tray2 table1)", "(make_sandwich sandw6 bread3 content3)", "(move_tray tray1 table3 kitchen)", "(put_on_tray sandw6 tray1)", "(move_tray tray1 kitchen table3)", "(serve_sandwich sandw6 child1 tray1 table3)"], "full_text_prompt": "I have to plan how to make and serve sandwiches for a group of children, taking into account that some of them are allergic to gluten. There are two types of sandwiches: regular and gluten-free.\nHere are the actions that can be performed:\nMake a gluten-free sandwich.\nMake a regular sandwich.\nPut a sandwich on a tray.\nServe a gluten-free sandwich to an allergic child.\nServe a regular sandwich to a child.\nMove a tray between kitchen and tables.\nThe following are the restrictions on the actions:\nWe can make a gluten-free sandwich only if there is a bread at kitchen and the bread is gluten-free.\nWe can make a gluten-free sandwich only if there is a content at kitchen and the content is gluten-free.\nOnce we make a gluten-free sandwich, the bread and content are no longer at kitchen.\nOnce we make a gluten-free sandwich, the sandwich is at kitchen and is gluten-free.\nWe can make a regular sandwich only if there is a bread at kitchen.\nWe can make a regular sandwich only if there is a content at kitchen.\nOnce we make a regular sandwich, the bread and content are no longer at kitchen.\nOnce we make a regular sandwich, the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the tray is also at kitchen.\nOnce we put a sandwich on a tray, the sandwich is no longer at kitchen but is on the tray.\nWe can serve a gluten-free sandwich to an allergic child only if the child is allergic to gluten.\nWe can serve a gluten-free sandwich to an allergic child only if the sandwich is on a tray and the sandwich is gluten-free.\nWe can serve a gluten-free sandwich to an allergic child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the tray is at the table where the child is waiting.\nOnce we serve a gluten-free sandwich to an allergic child, the sandwich is no longer on the tray.\nOnce we serve a gluten-free sandwich to an allergic child, we say the child has been served.\nWe can serve a regular sandwich to a child only if the child is not allergic to gluten.\nWe can serve a regular sandwich to a child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the sandwich is on a tray and the tray is at the table where the child is waiting.\nOnce we serve a regular sandwich to a child, the sandwich is no longer on the tray.\nOnce we serve a regular sandwich to a child, we say the child has been served.\nWe can move a tray from from-place to to-place only if the tray is at from-place.\nOnce we move a tray from from-place to to-place, the tray is no longer at from-place but is at to-place.As initial conditions I have that, sandwich_5 is not ready yet, sandwich_1 is not ready yet, content_4 is at kitchen, bread_3 is at kitchen, child_2 is waiting for sandwich at table_3, sandwich_7 is not ready yet, sandwich_6 is not ready yet, bread_1 is at kitchen, tray_2 is at kitchen, content_2 is gluten-free, child_4 is waiting for sandwich at table_1, child_1 is waiting for sandwich at table_3, tray_1 is at kitchen, bread_4 is at kitchen, tray_3 is at kitchen, bread_4 is gluten-free, sandwich_2 is not ready yet, sandwich_4 is not ready yet, bread_2 is gluten-free, child_3 is allergic to gluten, sandwich_8 is not ready yet, sandwich_3 is not ready yet, content_2 is at kitchen, bread_2 is at kitchen, child_1 is not allergic to gluten, child_3 is waiting for sandwich at table_3, content_3 is at kitchen, child_2 is allergic to gluten, content_4 is gluten-free, child_4 is not allergic to gluten, content_1 is at kitchen.My goal is to have that child_2 has been served, child_1 has been served, child_3 has been served, child_4 has been served.My plan is as follows:\n<PLAN>\n <PRECON> We can make a gluten-free sandwich_1 only if there is a content_2 at kitchen and the content_2 is gluten-free. We can make a gluten-free sandwich_1 only if there is a bread_2 at kitchen and the bread_2 is gluten-free. </PRECON> make a gluten-free sandwich_1 using bread_2 and content_2 <EFFECT> Once we make a gluten-free sandwich_1, the sandwich_1 is at kitchen and is gluten-free. Once we make a gluten-free sandwich_1, the bread_2 and content_2 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_3 from kitchen to table_1 only if the tray_3 is at kitchen. </PRECON> move tray_3 from kitchen to table_1 <EFFECT> Once we move a tray_3 from kitchen to table_1, the tray_3 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can put a sandwich_7 on a tray_2 only if the sandwich_7 is at kitchen. We can put a sandwich_7 on a tray_2 only if the tray_2 is also at kitchen. </PRECON> put sandwich_7 on tray_2 <EFFECT> Once we put a sandwich_7 on a tray_2, the sandwich_7 is no longer at kitchen but is on the tray_2. </EFFECT> WRONG \n <PRECON> We can put a sandwich_1 on a tray_2 only if the sandwich_1 is at kitchen. We can put a sandwich_1 on a tray_2 only if the tray_2 is also at kitchen. </PRECON> put sandwich_1 on tray_2 <EFFECT> Once we put a sandwich_1 on a tray_2, the sandwich_1 is no longer at kitchen but is on the tray_2. </EFFECT> \n <PRECON> We can move a tray_2 from kitchen to table_1 only if the tray_2 is at kitchen. </PRECON> move tray_2 from kitchen to table_1 <EFFECT> Once we move a tray_2 from kitchen to table_1, the tray_2 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_2 from table_1 to table_3 only if the tray_2 is at table_1. </PRECON> move tray_2 from table_1 to table_3 <EFFECT> Once we move a tray_2 from table_1 to table_3, the tray_2 is no longer at table_1 but is at table_3. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_2 only if the tray_2 is at the table_3 where the child_2 is waiting. We can serve a gluten-free sandwich_1 to an allergic child_2 only if the child_2 is allergic to gluten. We can serve a gluten-free sandwich_1 to an allergic child_2 only if the sandwich_1 is on a tray_2 and the sandwich_1 is gluten-free. We can serve a gluten-free sandwich_1 to an allergic child_2 only if the child_2 is waiting for the sandwich_1 at the table_3. </PRECON> use tray_2 to serve gluten-free sandwich_1 to child_2 at table_3 <EFFECT> Once we serve a gluten-free sandwich_1 to an allergic child_2, we say the child_2 has been served. Once we serve a gluten-free sandwich_1 to an allergic child_2, the sandwich_1 is no longer on the tray_2. </EFFECT> \n <PRECON> We can make a gluten-free sandwich_8 only if there is a content_4 at kitchen and the content_4 is gluten-free. We can make a gluten-free sandwich_8 only if there is a bread_4 at kitchen and the bread_4 is gluten-free. </PRECON> make a gluten-free sandwich_8 using bread_4 and content_4 <EFFECT> Once we make a gluten-free sandwich_8, the sandwich_8 is at kitchen and is gluten-free. Once we make a gluten-free sandwich_8, the bread_4 and content_4 are no longer at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_8 on a tray_1 only if the sandwich_8 is at kitchen. We can put a sandwich_8 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_8 on tray_1 <EFFECT> Once we put a sandwich_8 on a tray_1, the sandwich_8 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_3 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_3 <EFFECT> Once we move a tray_1 from table_1 to table_3, the tray_1 is no longer at table_1 but is at table_3. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_3 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_3 <EFFECT> Once we move a tray_1 from kitchen to table_3, the tray_1 is no longer at kitchen but is at table_3. </EFFECT> WRONG \n <PRECON> We can serve a regular sandwich_8 to a child_3 only if the tray_1 is at the table_3 where the child_3 is waiting. We can serve a gluten-free sandwich_8 to an allergic child_3 only if the child_3 is allergic to gluten. We can serve a gluten-free sandwich_8 to an allergic child_3 only if the sandwich_8 is on a tray_1 and the sandwich_8 is gluten-free. We can serve a gluten-free sandwich_8 to an allergic child_3 only if the child_3 is waiting for the sandwich_8 at the table_3. </PRECON> use tray_1 to serve gluten-free sandwich_8 to child_3 at table_3 <EFFECT> Once we serve a gluten-free sandwich_8 to an allergic child_3, we say the child_3 has been served. Once we serve a gluten-free sandwich_8 to an allergic child_3, the sandwich_8 is no longer on the tray_1. </EFFECT> \n <PRECON> We can move a tray_2 from table_3 to kitchen only if the tray_2 is at table_3. </PRECON> move tray_2 from table_3 to kitchen <EFFECT> Once we move a tray_2 from table_3 to kitchen, the tray_2 is no longer at table_3 but is at kitchen. </EFFECT> \n <PRECON> We can make a regular sandwich_7 only if there is a content_1 at kitchen. We can make a regular sandwich_7 only if there is a bread_1 at kitchen. </PRECON> make a regular sandwich_7 using bread_1 and content_1 <EFFECT> Once we make a regular sandwich_7, the bread_1 and content_1 are no longer at kitchen. Once we make a regular sandwich_7, the sandwich_7 is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> WRONG \n <PRECON> We can put a sandwich_7 on a tray_2 only if the sandwich_7 is at kitchen. We can put a sandwich_7 on a tray_2 only if the tray_2 is also at kitchen. </PRECON> put sandwich_7 on tray_2 <EFFECT> Once we put a sandwich_7 on a tray_2, the sandwich_7 is no longer at kitchen but is on the tray_2. </EFFECT> \n <PRECON> We can move a tray_2 from kitchen to table_1 only if the tray_2 is at kitchen. </PRECON> move tray_2 from kitchen to table_1 <EFFECT> Once we move a tray_2 from kitchen to table_1, the tray_2 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_7 to a child_4 only if the child is waiting for the sandwich_7 at the table_1. We can serve a regular sandwich_7 to a child_4 only if the child_4 is not allergic to gluten. We can serve a regular sandwich_7 to a child_4 only if the sandwich_7 is on a tray_2 and the tray_2 is at the table_1 where the child_4 is waiting. </PRECON> use tray_2 to serve regular sandwich_7 to child_4 at table_1 <EFFECT> Once we serve a regular sandwich_7 to a child_4, the sandwich_7 is no longer on the tray_2. Once we serve a regular sandwich_7 to a child_4, we say the child_4 has been served. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a content_3 at kitchen. We can make a regular sandwich_6 only if there is a bread_3 at kitchen. </PRECON> make a regular sandwich_6 using bread_3 and content_3 <EFFECT> Once we make a regular sandwich_6, the bread_3 and content_3 are no longer at kitchen. Once we make a regular sandwich_6, the sandwich_6 is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_3 to kitchen only if the tray_1 is at table_3. </PRECON> move tray_1 from table_3 to kitchen <EFFECT> Once we move a tray_1 from table_3 to kitchen, the tray_1 is no longer at table_3 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_1 only if the child is waiting for the sandwich_6 at the table_3. We can serve a regular sandwich_6 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_6 to a child_1 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_3 where the child_1 is waiting. </PRECON> use tray_1 to serve regular sandwich_6 to child_1 at table_3 <EFFECT> Once we serve a regular sandwich_6 to a child_1, the sandwich_6 is no longer on the tray_1. Once we serve a regular sandwich_6 to a child_1, we say the child_1 has been served. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from kitchen to table_3 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_3 <EFFECT> Once we move a tray_1 from kitchen to table_3, the tray_1 is no longer at kitchen but is at table_3. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_1 only if the child is waiting for the sandwich_6 at the table_3. We can serve a regular sandwich_6 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_6 to a child_1 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_3 where the child_1 is waiting. </PRECON> use tray_1 to serve regular sandwich_6 to child_1 at table_3 <EFFECT> Once we serve a regular sandwich_6 to a child_1, the sandwich_6 is no longer on the tray_1. Once we serve a regular sandwich_6 to a child_1, we say the child_1 has been served. </EFFECT> \n</PLAN>"}
{"domain": "childsnack", "instance_id": "0", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to make and serve sandwiches for a group of children, taking into account that some of them are allergic to gluten. There are two types of sandwiches: regular and gluten-free.\nHere are the actions that can be performed:\nMake a gluten-free sandwich.\nMake a regular sandwich.\nPut a sandwich on a tray.\nServe a gluten-free sandwich to an allergic child.\nServe a regular sandwich to a child.\nMove a tray between kitchen and tables.\nThe following are the restrictions on the actions:\nWe can make a gluten-free sandwich only if there is a bread at kitchen and the bread is gluten-free.\nWe can make a gluten-free sandwich only if there is a content at kitchen and the content is gluten-free.\nOnce we make a gluten-free sandwich, the bread and content are no longer at kitchen.\nOnce we make a gluten-free sandwich, the sandwich is at kitchen and is gluten-free.\nWe can make a regular sandwich only if there is a bread at kitchen.\nWe can make a regular sandwich only if there is a content at kitchen.\nOnce we make a regular sandwich, the bread and content are no longer at kitchen.\nOnce we make a regular sandwich, the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the tray is also at kitchen.\nOnce we put a sandwich on a tray, the sandwich is no longer at kitchen but is on the tray.\nWe can serve a gluten-free sandwich to an allergic child only if the child is allergic to gluten.\nWe can serve a gluten-free sandwich to an allergic child only if the sandwich is on a tray and the sandwich is gluten-free.\nWe can serve a gluten-free sandwich to an allergic child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the tray is at the table where the child is waiting.\nOnce we serve a gluten-free sandwich to an allergic child, the sandwich is no longer on the tray.\nOnce we serve a gluten-free sandwich to an allergic child, we say the child has been served.\nWe can serve a regular sandwich to a child only if the child is not allergic to gluten.\nWe can serve a regular sandwich to a child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the sandwich is on a tray and the tray is at the table where the child is waiting.\nOnce we serve a regular sandwich to a child, the sandwich is no longer on the tray.\nOnce we serve a regular sandwich to a child, we say the child has been served.\nWe can move a tray from from-place to to-place only if the tray is at from-place.\nOnce we move a tray from from-place to to-place, the tray is no longer at from-place but is at to-place.", "input": "As initial conditions I have that, bread_5 is at kitchen, content_1 is gluten-free, sandwich_5 is not ready yet, child_3 is allergic to gluten, bread_1 is at kitchen, bread_5 is gluten-free, bread_2 is at kitchen, child_2 is not allergic to gluten, bread_3 is gluten-free, bread_3 is at kitchen, child_3 is waiting for sandwich at table_2, sandwich_1 is not ready yet, sandwich_3 is not ready yet, content_2 is gluten-free, sandwich_2 is not ready yet, content_5 is at kitchen, tray_1 is at kitchen, bread_4 is at kitchen, sandwich_7 is not ready yet, child_5 is waiting for sandwich at table_1, child_1 is not allergic to gluten, child_2 is waiting for sandwich at table_2, child_1 is waiting for sandwich at table_1, sandwich_8 is not ready yet, bread_1 is gluten-free, content_1 is at kitchen, child_5 is allergic to gluten, sandwich_6 is not ready yet, content_3 is at kitchen, child_4 is waiting for sandwich at table_3, content_3 is gluten-free, sandwich_4 is not ready yet, child_4 is allergic to gluten, content_2 is at kitchen, content_4 is at kitchen.\nMy goal is to have that child_1 has been served, child_2 has been served, child_3 has been served, child_4 has been served, child_5 has been served.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> We can make a gluten-free sandwich_8 only if there is a bread_1 at kitchen and the bread_1 is gluten-free. We can make a gluten-free sandwich_8 only if there is a content_1 at kitchen and the content_1 is gluten-free. </PRECON> make a gluten-free sandwich_8 using bread_1 and content_1 <EFFECT> Once we make a gluten-free sandwich_8, the bread_1 and content_1 are no longer at kitchen. Once we make a gluten-free sandwich_8, the sandwich_8 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can put a sandwich_8 on a tray_1 only if the sandwich_8 is at kitchen. We can put a sandwich_8 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_8 on tray_1 <EFFECT> Once we put a sandwich_8 on a tray_1, the sandwich_8 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_8 to an allergic child_5 only if the child_5 is waiting for the sandwich_8 at the table_1. We can serve a regular sandwich_8 to a child_5 only if the tray_1 is at the table_1 where the child_5 is waiting. We can serve a gluten-free sandwich_8 to an allergic child_5 only if the child_5 is allergic to gluten. We can serve a gluten-free sandwich_8 to an allergic child_5 only if the sandwich_8 is on a tray_1 and the sandwich_8 is gluten-free. </PRECON> use tray_1 to serve gluten-free sandwich_8 to child_5 at table_1 <EFFECT> Once we serve a gluten-free sandwich_8 to an allergic child_5, we say the child_5 has been served. Once we serve a gluten-free sandwich_8 to an allergic child_5, the sandwich_8 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a gluten-free sandwich_7 only if there is a bread_3 at kitchen and the bread_3 is gluten-free. We can make a gluten-free sandwich_7 only if there is a content_2 at kitchen and the content_2 is gluten-free. </PRECON> make a gluten-free sandwich_7 using bread_3 and content_2 <EFFECT> Once we make a gluten-free sandwich_7, the bread_3 and content_2 are no longer at kitchen. Once we make a gluten-free sandwich_7, the sandwich_7 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_7 on a tray_1 only if the sandwich_7 is at kitchen. We can put a sandwich_7 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_7 on tray_1 <EFFECT> Once we put a sandwich_7 on a tray_1, the sandwich_7 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_7 to an allergic child_3 only if the child_3 is waiting for the sandwich_7 at the table_2. We can serve a regular sandwich_7 to a child_3 only if the tray_1 is at the table_2 where the child_3 is waiting. We can serve a gluten-free sandwich_7 to an allergic child_3 only if the child_3 is allergic to gluten. We can serve a gluten-free sandwich_7 to an allergic child_3 only if the sandwich_7 is on a tray_1 and the sandwich_7 is gluten-free. </PRECON> use tray_1 to serve gluten-free sandwich_7 to child_3 at table_2 <EFFECT> Once we serve a gluten-free sandwich_7 to an allergic child_3, we say the child_3 has been served. Once we serve a gluten-free sandwich_7 to an allergic child_3, the sandwich_7 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_1 only if there is a content_5 at kitchen. We can make a regular sandwich_1 only if there is a bread_4 at kitchen. </PRECON> make a regular sandwich_1 using bread_4 and content_5 <EFFECT> Once we make a regular sandwich_1, the sandwich_1 is at kitchen. Once we make a regular sandwich_1, the bread_4 and content_5 are no longer at kitchen. </EFFECT> WRONG \n <PRECON> We can make a gluten-free sandwich_6 only if there is a bread_5 at kitchen and the bread_5 is gluten-free. We can make a gluten-free sandwich_6 only if there is a content_3 at kitchen and the content_3 is gluten-free. </PRECON> make a gluten-free sandwich_6 using bread_5 and content_3 <EFFECT> Once we make a gluten-free sandwich_6, the bread_5 and content_3 are no longer at kitchen. Once we make a gluten-free sandwich_6, the sandwich_6 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_3 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_3 <EFFECT> Once we move a tray_1 from table_1 to table_3, the tray_1 is no longer at table_1 but is at table_3. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_5 to a child_2 only if the child is waiting for the sandwich_5 at the table_2. We can serve a regular sandwich_5 to a child_2 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. We can serve a regular sandwich_5 to a child_2 only if the child_2 is not allergic to gluten. </PRECON> use tray_1 to serve regular sandwich_5 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_5 to a child_2, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_2, we say the child_2 has been served. </EFFECT> WRONG \n <PRECON> We can serve a regular sandwich_5 to a child_2 only if the child is waiting for the sandwich_5 at the table_2. We can serve a regular sandwich_5 to a child_2 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. We can serve a regular sandwich_5 to a child_2 only if the child_2 is not allergic to gluten. </PRECON> use tray_1 to serve regular sandwich_5 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_5 to a child_2, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_2, we say the child_2 has been served. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_3 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_3 <EFFECT> Once we move a tray_1 from table_1 to table_3, the tray_1 is no longer at table_1 but is at table_3. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_6 to an allergic child_4 only if the child_4 is waiting for the sandwich_6 at the table_3. We can serve a regular sandwich_6 to a child_4 only if the tray_1 is at the table_3 where the child_4 is waiting. We can serve a gluten-free sandwich_6 to an allergic child_4 only if the child_4 is allergic to gluten. We can serve a gluten-free sandwich_6 to an allergic child_4 only if the sandwich_6 is on a tray_1 and the sandwich_6 is gluten-free. </PRECON> use tray_1 to serve gluten-free sandwich_6 to child_4 at table_3 <EFFECT> Once we serve a gluten-free sandwich_6 to an allergic child_4, we say the child_4 has been served. Once we serve a gluten-free sandwich_6 to an allergic child_4, the sandwich_6 is no longer on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_3 to table_1 only if the tray_1 is at table_3. </PRECON> move tray_1 from table_3 to table_1 <EFFECT> Once we move a tray_1 from table_3 to table_1, the tray_1 is no longer at table_3 but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> WRONG \n <PRECON> We can make a regular sandwich_1 only if there is a content_5 at kitchen. We can make a regular sandwich_1 only if there is a bread_4 at kitchen. </PRECON> make a regular sandwich_1 using bread_4 and content_5 <EFFECT> Once we make a regular sandwich_1, the sandwich_1 is at kitchen. Once we make a regular sandwich_1, the bread_4 and content_5 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_1 on a tray_1 only if the sandwich_1 is at kitchen. We can put a sandwich_1 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_1 on tray_1 <EFFECT> Once we put a sandwich_1 on a tray_1, the sandwich_1 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_1 only if the child is waiting for the sandwich_1 at the table_1. We can serve a regular sandwich_1 to a child_1 only if the sandwich_1 is on a tray_1 and the tray_1 is at the table_1 where the child_1 is waiting. We can serve a regular sandwich_1 to a child_1 only if the child_1 is not allergic to gluten. </PRECON> use tray_1 to serve regular sandwich_1 to child_1 at table_1 <EFFECT> Once we serve a regular sandwich_1 to a child_1, the sandwich_1 is no longer on the tray_1. Once we serve a regular sandwich_1 to a child_1, we say the child_1 has been served. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can make a regular sandwich_5 only if there is a content_4 at kitchen. We can make a regular sandwich_5 only if there is a bread_2 at kitchen. </PRECON> make a regular sandwich_5 using bread_2 and content_4 <EFFECT> Once we make a regular sandwich_5, the sandwich_5 is at kitchen. Once we make a regular sandwich_5, the bread_2 and content_4 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_5 on a tray_1 only if the sandwich_5 is at kitchen. We can put a sandwich_5 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_5 on tray_1 <EFFECT> Once we put a sandwich_5 on a tray_1, the sandwich_5 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_5 to a child_2 only if the child is waiting for the sandwich_5 at the table_2. We can serve a regular sandwich_5 to a child_2 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. We can serve a regular sandwich_5 to a child_2 only if the child_2 is not allergic to gluten. </PRECON> use tray_1 to serve regular sandwich_5 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_5 to a child_2, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_2, we say the child_2 has been served. </EFFECT> \n</PLAN>", "plan_length": 28, "raw_plan": ["(make_sandwich_no_gluten sandw8 bread1 content1)", "(put_on_tray sandw8 tray1)", "(move_tray tray1 kitchen table1)", "(serve_sandwich_no_gluten sandw8 child5 tray1 table1)", "(make_sandwich_no_gluten sandw7 bread3 content2)", "(move_tray tray1 table1 kitchen)", "(put_on_tray sandw7 tray1)", "(move_tray tray1 kitchen table1)", "(move_tray tray1 table1 table2)", "(serve_sandwich_no_gluten sandw7 child3 tray1 table2)", "(make_sandwich_no_gluten sandw6 bread5 content3)", "(move_tray tray1 table2 kitchen)", "(put_on_tray sandw6 tray1)", "(move_tray tray1 kitchen table1)", "(move_tray tray1 table1 table3)", "(serve_sandwich_no_gluten sandw6 child4 tray1 table3)", "(move_tray tray1 table3 table1)", "(make_sandwich sandw1 bread4 content5)", "(move_tray tray1 table1 kitchen)", "(put_on_tray sandw1 tray1)", "(move_tray tray1 kitchen table1)", "(serve_sandwich sandw1 child1 tray1 table1)", "(move_tray tray1 table1 table2)", "(make_sandwich sandw5 bread2 content4)", "(move_tray tray1 table2 kitchen)", "(put_on_tray sandw5 tray1)", "(move_tray tray1 kitchen table2)", "(serve_sandwich sandw5 child2 tray1 table2)"], "full_text_prompt": "I have to plan how to make and serve sandwiches for a group of children, taking into account that some of them are allergic to gluten. There are two types of sandwiches: regular and gluten-free.\nHere are the actions that can be performed:\nMake a gluten-free sandwich.\nMake a regular sandwich.\nPut a sandwich on a tray.\nServe a gluten-free sandwich to an allergic child.\nServe a regular sandwich to a child.\nMove a tray between kitchen and tables.\nThe following are the restrictions on the actions:\nWe can make a gluten-free sandwich only if there is a bread at kitchen and the bread is gluten-free.\nWe can make a gluten-free sandwich only if there is a content at kitchen and the content is gluten-free.\nOnce we make a gluten-free sandwich, the bread and content are no longer at kitchen.\nOnce we make a gluten-free sandwich, the sandwich is at kitchen and is gluten-free.\nWe can make a regular sandwich only if there is a bread at kitchen.\nWe can make a regular sandwich only if there is a content at kitchen.\nOnce we make a regular sandwich, the bread and content are no longer at kitchen.\nOnce we make a regular sandwich, the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the tray is also at kitchen.\nOnce we put a sandwich on a tray, the sandwich is no longer at kitchen but is on the tray.\nWe can serve a gluten-free sandwich to an allergic child only if the child is allergic to gluten.\nWe can serve a gluten-free sandwich to an allergic child only if the sandwich is on a tray and the sandwich is gluten-free.\nWe can serve a gluten-free sandwich to an allergic child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the tray is at the table where the child is waiting.\nOnce we serve a gluten-free sandwich to an allergic child, the sandwich is no longer on the tray.\nOnce we serve a gluten-free sandwich to an allergic child, we say the child has been served.\nWe can serve a regular sandwich to a child only if the child is not allergic to gluten.\nWe can serve a regular sandwich to a child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the sandwich is on a tray and the tray is at the table where the child is waiting.\nOnce we serve a regular sandwich to a child, the sandwich is no longer on the tray.\nOnce we serve a regular sandwich to a child, we say the child has been served.\nWe can move a tray from from-place to to-place only if the tray is at from-place.\nOnce we move a tray from from-place to to-place, the tray is no longer at from-place but is at to-place.As initial conditions I have that, bread_5 is at kitchen, content_1 is gluten-free, sandwich_5 is not ready yet, child_3 is allergic to gluten, bread_1 is at kitchen, bread_5 is gluten-free, bread_2 is at kitchen, child_2 is not allergic to gluten, bread_3 is gluten-free, bread_3 is at kitchen, child_3 is waiting for sandwich at table_2, sandwich_1 is not ready yet, sandwich_3 is not ready yet, content_2 is gluten-free, sandwich_2 is not ready yet, content_5 is at kitchen, tray_1 is at kitchen, bread_4 is at kitchen, sandwich_7 is not ready yet, child_5 is waiting for sandwich at table_1, child_1 is not allergic to gluten, child_2 is waiting for sandwich at table_2, child_1 is waiting for sandwich at table_1, sandwich_8 is not ready yet, bread_1 is gluten-free, content_1 is at kitchen, child_5 is allergic to gluten, sandwich_6 is not ready yet, content_3 is at kitchen, child_4 is waiting for sandwich at table_3, content_3 is gluten-free, sandwich_4 is not ready yet, child_4 is allergic to gluten, content_2 is at kitchen, content_4 is at kitchen.My goal is to have that child_1 has been served, child_2 has been served, child_3 has been served, child_4 has been served, child_5 has been served.My plan is as follows:\n<PLAN>\n <PRECON> We can make a gluten-free sandwich_8 only if there is a bread_1 at kitchen and the bread_1 is gluten-free. We can make a gluten-free sandwich_8 only if there is a content_1 at kitchen and the content_1 is gluten-free. </PRECON> make a gluten-free sandwich_8 using bread_1 and content_1 <EFFECT> Once we make a gluten-free sandwich_8, the bread_1 and content_1 are no longer at kitchen. Once we make a gluten-free sandwich_8, the sandwich_8 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can put a sandwich_8 on a tray_1 only if the sandwich_8 is at kitchen. We can put a sandwich_8 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_8 on tray_1 <EFFECT> Once we put a sandwich_8 on a tray_1, the sandwich_8 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_8 to an allergic child_5 only if the child_5 is waiting for the sandwich_8 at the table_1. We can serve a regular sandwich_8 to a child_5 only if the tray_1 is at the table_1 where the child_5 is waiting. We can serve a gluten-free sandwich_8 to an allergic child_5 only if the child_5 is allergic to gluten. We can serve a gluten-free sandwich_8 to an allergic child_5 only if the sandwich_8 is on a tray_1 and the sandwich_8 is gluten-free. </PRECON> use tray_1 to serve gluten-free sandwich_8 to child_5 at table_1 <EFFECT> Once we serve a gluten-free sandwich_8 to an allergic child_5, we say the child_5 has been served. Once we serve a gluten-free sandwich_8 to an allergic child_5, the sandwich_8 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a gluten-free sandwich_7 only if there is a bread_3 at kitchen and the bread_3 is gluten-free. We can make a gluten-free sandwich_7 only if there is a content_2 at kitchen and the content_2 is gluten-free. </PRECON> make a gluten-free sandwich_7 using bread_3 and content_2 <EFFECT> Once we make a gluten-free sandwich_7, the bread_3 and content_2 are no longer at kitchen. Once we make a gluten-free sandwich_7, the sandwich_7 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_7 on a tray_1 only if the sandwich_7 is at kitchen. We can put a sandwich_7 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_7 on tray_1 <EFFECT> Once we put a sandwich_7 on a tray_1, the sandwich_7 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_7 to an allergic child_3 only if the child_3 is waiting for the sandwich_7 at the table_2. We can serve a regular sandwich_7 to a child_3 only if the tray_1 is at the table_2 where the child_3 is waiting. We can serve a gluten-free sandwich_7 to an allergic child_3 only if the child_3 is allergic to gluten. We can serve a gluten-free sandwich_7 to an allergic child_3 only if the sandwich_7 is on a tray_1 and the sandwich_7 is gluten-free. </PRECON> use tray_1 to serve gluten-free sandwich_7 to child_3 at table_2 <EFFECT> Once we serve a gluten-free sandwich_7 to an allergic child_3, we say the child_3 has been served. Once we serve a gluten-free sandwich_7 to an allergic child_3, the sandwich_7 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_1 only if there is a content_5 at kitchen. We can make a regular sandwich_1 only if there is a bread_4 at kitchen. </PRECON> make a regular sandwich_1 using bread_4 and content_5 <EFFECT> Once we make a regular sandwich_1, the sandwich_1 is at kitchen. Once we make a regular sandwich_1, the bread_4 and content_5 are no longer at kitchen. </EFFECT> WRONG \n <PRECON> We can make a gluten-free sandwich_6 only if there is a bread_5 at kitchen and the bread_5 is gluten-free. We can make a gluten-free sandwich_6 only if there is a content_3 at kitchen and the content_3 is gluten-free. </PRECON> make a gluten-free sandwich_6 using bread_5 and content_3 <EFFECT> Once we make a gluten-free sandwich_6, the bread_5 and content_3 are no longer at kitchen. Once we make a gluten-free sandwich_6, the sandwich_6 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_3 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_3 <EFFECT> Once we move a tray_1 from table_1 to table_3, the tray_1 is no longer at table_1 but is at table_3. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_5 to a child_2 only if the child is waiting for the sandwich_5 at the table_2. We can serve a regular sandwich_5 to a child_2 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. We can serve a regular sandwich_5 to a child_2 only if the child_2 is not allergic to gluten. </PRECON> use tray_1 to serve regular sandwich_5 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_5 to a child_2, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_2, we say the child_2 has been served. </EFFECT> WRONG \n <PRECON> We can serve a regular sandwich_5 to a child_2 only if the child is waiting for the sandwich_5 at the table_2. We can serve a regular sandwich_5 to a child_2 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. We can serve a regular sandwich_5 to a child_2 only if the child_2 is not allergic to gluten. </PRECON> use tray_1 to serve regular sandwich_5 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_5 to a child_2, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_2, we say the child_2 has been served. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_3 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_3 <EFFECT> Once we move a tray_1 from table_1 to table_3, the tray_1 is no longer at table_1 but is at table_3. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_6 to an allergic child_4 only if the child_4 is waiting for the sandwich_6 at the table_3. We can serve a regular sandwich_6 to a child_4 only if the tray_1 is at the table_3 where the child_4 is waiting. We can serve a gluten-free sandwich_6 to an allergic child_4 only if the child_4 is allergic to gluten. We can serve a gluten-free sandwich_6 to an allergic child_4 only if the sandwich_6 is on a tray_1 and the sandwich_6 is gluten-free. </PRECON> use tray_1 to serve gluten-free sandwich_6 to child_4 at table_3 <EFFECT> Once we serve a gluten-free sandwich_6 to an allergic child_4, we say the child_4 has been served. Once we serve a gluten-free sandwich_6 to an allergic child_4, the sandwich_6 is no longer on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_3 to table_1 only if the tray_1 is at table_3. </PRECON> move tray_1 from table_3 to table_1 <EFFECT> Once we move a tray_1 from table_3 to table_1, the tray_1 is no longer at table_3 but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> WRONG \n <PRECON> We can make a regular sandwich_1 only if there is a content_5 at kitchen. We can make a regular sandwich_1 only if there is a bread_4 at kitchen. </PRECON> make a regular sandwich_1 using bread_4 and content_5 <EFFECT> Once we make a regular sandwich_1, the sandwich_1 is at kitchen. Once we make a regular sandwich_1, the bread_4 and content_5 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_1 on a tray_1 only if the sandwich_1 is at kitchen. We can put a sandwich_1 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_1 on tray_1 <EFFECT> Once we put a sandwich_1 on a tray_1, the sandwich_1 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_1 only if the child is waiting for the sandwich_1 at the table_1. We can serve a regular sandwich_1 to a child_1 only if the sandwich_1 is on a tray_1 and the tray_1 is at the table_1 where the child_1 is waiting. We can serve a regular sandwich_1 to a child_1 only if the child_1 is not allergic to gluten. </PRECON> use tray_1 to serve regular sandwich_1 to child_1 at table_1 <EFFECT> Once we serve a regular sandwich_1 to a child_1, the sandwich_1 is no longer on the tray_1. Once we serve a regular sandwich_1 to a child_1, we say the child_1 has been served. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can make a regular sandwich_5 only if there is a content_4 at kitchen. We can make a regular sandwich_5 only if there is a bread_2 at kitchen. </PRECON> make a regular sandwich_5 using bread_2 and content_4 <EFFECT> Once we make a regular sandwich_5, the sandwich_5 is at kitchen. Once we make a regular sandwich_5, the bread_2 and content_4 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_5 on a tray_1 only if the sandwich_5 is at kitchen. We can put a sandwich_5 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_5 on tray_1 <EFFECT> Once we put a sandwich_5 on a tray_1, the sandwich_5 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_5 to a child_2 only if the child is waiting for the sandwich_5 at the table_2. We can serve a regular sandwich_5 to a child_2 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. We can serve a regular sandwich_5 to a child_2 only if the child_2 is not allergic to gluten. </PRECON> use tray_1 to serve regular sandwich_5 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_5 to a child_2, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_2, we say the child_2 has been served. </EFFECT> \n</PLAN>"}
{"domain": "childsnack", "instance_id": "160", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to make and serve sandwiches for a group of children, taking into account that some of them are allergic to gluten. There are two types of sandwiches: regular and gluten-free.\nHere are the actions that can be performed:\nMake a gluten-free sandwich.\nMake a regular sandwich.\nPut a sandwich on a tray.\nServe a gluten-free sandwich to an allergic child.\nServe a regular sandwich to a child.\nMove a tray between kitchen and tables.\nThe following are the restrictions on the actions:\nWe can make a gluten-free sandwich only if there is a bread at kitchen and the bread is gluten-free.\nWe can make a gluten-free sandwich only if there is a content at kitchen and the content is gluten-free.\nOnce we make a gluten-free sandwich, the bread and content are no longer at kitchen.\nOnce we make a gluten-free sandwich, the sandwich is at kitchen and is gluten-free.\nWe can make a regular sandwich only if there is a bread at kitchen.\nWe can make a regular sandwich only if there is a content at kitchen.\nOnce we make a regular sandwich, the bread and content are no longer at kitchen.\nOnce we make a regular sandwich, the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the tray is also at kitchen.\nOnce we put a sandwich on a tray, the sandwich is no longer at kitchen but is on the tray.\nWe can serve a gluten-free sandwich to an allergic child only if the child is allergic to gluten.\nWe can serve a gluten-free sandwich to an allergic child only if the sandwich is on a tray and the sandwich is gluten-free.\nWe can serve a gluten-free sandwich to an allergic child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the tray is at the table where the child is waiting.\nOnce we serve a gluten-free sandwich to an allergic child, the sandwich is no longer on the tray.\nOnce we serve a gluten-free sandwich to an allergic child, we say the child has been served.\nWe can serve a regular sandwich to a child only if the child is not allergic to gluten.\nWe can serve a regular sandwich to a child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the sandwich is on a tray and the tray is at the table where the child is waiting.\nOnce we serve a regular sandwich to a child, the sandwich is no longer on the tray.\nOnce we serve a regular sandwich to a child, we say the child has been served.\nWe can move a tray from from-place to to-place only if the tray is at from-place.\nOnce we move a tray from from-place to to-place, the tray is no longer at from-place but is at to-place.", "input": "As initial conditions I have that, bread_1 is gluten-free, content_4 is at kitchen, child_5 is waiting for sandwich at table_2, content_1 is at kitchen, sandwich_1 is not ready yet, child_5 is allergic to gluten, child_2 is not allergic to gluten, child_4 is not allergic to gluten, child_1 is waiting for sandwich at table_2, child_4 is waiting for sandwich at table_2, bread_3 is at kitchen, bread_1 is at kitchen, bread_4 is at kitchen, content_3 is at kitchen, child_1 is not allergic to gluten, sandwich_7 is not ready yet, sandwich_4 is not ready yet, child_3 is waiting for sandwich at table_1, tray_1 is at kitchen, sandwich_8 is not ready yet, child_3 is not allergic to gluten, child_2 is waiting for sandwich at table_2, content_5 is at kitchen, content_4 is gluten-free, bread_5 is at kitchen, content_2 is at kitchen, sandwich_6 is not ready yet, sandwich_10 is not ready yet, bread_2 is at kitchen, sandwich_9 is not ready yet, sandwich_3 is not ready yet, sandwich_5 is not ready yet, sandwich_2 is not ready yet.\nMy goal is to have that child_2 has been served, child_3 has been served, child_5 has been served, child_1 has been served, child_4 has been served.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> We can make a gluten-free sandwich_1 only if there is a content_4 at kitchen and the content_4 is gluten-free. We can make a gluten-free sandwich_1 only if there is a bread_1 at kitchen and the bread_1 is gluten-free. </PRECON> make a gluten-free sandwich_1 using bread_1 and content_4 <EFFECT> Once we make a gluten-free sandwich_1, the bread_1 and content_4 are no longer at kitchen. Once we make a gluten-free sandwich_1, the sandwich_1 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can put a sandwich_1 on a tray_1 only if the sandwich_1 is at kitchen. We can put a sandwich_1 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_1 on tray_1 <EFFECT> Once we put a sandwich_1 on a tray_1, the sandwich_1 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_1 to an allergic child_5 only if the sandwich_1 is on a tray_1 and the sandwich_1 is gluten-free. We can serve a gluten-free sandwich_1 to an allergic child_5 only if the child_5 is allergic to gluten. We can serve a regular sandwich_1 to a child_5 only if the tray_1 is at the table_2 where the child_5 is waiting. We can serve a gluten-free sandwich_1 to an allergic child_5 only if the child_5 is waiting for the sandwich_1 at the table_2. </PRECON> use tray_1 to serve gluten-free sandwich_1 to child_5 at table_2 <EFFECT> Once we serve a gluten-free sandwich_1 to an allergic child_5, we say the child_5 has been served. Once we serve a gluten-free sandwich_1 to an allergic child_5, the sandwich_1 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_9 only if there is a content_1 at kitchen. We can make a regular sandwich_9 only if there is a bread_2 at kitchen. </PRECON> make a regular sandwich_9 using bread_2 and content_1 <EFFECT> Once we make a regular sandwich_9, the sandwich_9 is at kitchen. Once we make a regular sandwich_9, the bread_2 and content_1 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_9 on a tray_1 only if the sandwich_9 is at kitchen. We can put a sandwich_9 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_9 on tray_1 <EFFECT> Once we put a sandwich_9 on a tray_1, the sandwich_9 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_9 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_9 to a child_3 only if the child is waiting for the sandwich_9 at the table_1. We can serve a regular sandwich_9 to a child_3 only if the sandwich_9 is on a tray_1 and the tray_1 is at the table_1 where the child_3 is waiting. </PRECON> use tray_1 to serve regular sandwich_9 to child_3 at table_1 <EFFECT> Once we serve a regular sandwich_9 to a child_3, we say the child_3 has been served. Once we serve a regular sandwich_9 to a child_3, the sandwich_9 is no longer on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can make a regular sandwich_8 only if there is a content_2 at kitchen. We can make a regular sandwich_8 only if there is a bread_3 at kitchen. </PRECON> make a regular sandwich_8 using bread_3 and content_2 <EFFECT> Once we make a regular sandwich_8, the sandwich_8 is at kitchen. Once we make a regular sandwich_8, the bread_3 and content_2 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> WRONG \n <PRECON> We can put a sandwich_8 on a tray_1 only if the sandwich_8 is at kitchen. We can put a sandwich_8 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_8 on tray_1 <EFFECT> Once we put a sandwich_8 on a tray_1, the sandwich_8 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_7 to a child_2 only if the child_2 is not allergic to gluten. We can serve a regular sandwich_7 to a child_2 only if the child is waiting for the sandwich_7 at the table_2. We can serve a regular sandwich_7 to a child_2 only if the sandwich_7 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. </PRECON> use tray_1 to serve regular sandwich_7 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_7 to a child_2, we say the child_2 has been served. Once we serve a regular sandwich_7 to a child_2, the sandwich_7 is no longer on the tray_1. </EFFECT> WRONG \n <PRECON> We can serve a regular sandwich_8 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_8 to a child_1 only if the child is waiting for the sandwich_8 at the table_2. We can serve a regular sandwich_8 to a child_1 only if the sandwich_8 is on a tray_1 and the tray_1 is at the table_2 where the child_1 is waiting. </PRECON> use tray_1 to serve regular sandwich_8 to child_1 at table_2 <EFFECT> Once we serve a regular sandwich_8 to a child_1, we say the child_1 has been served. Once we serve a regular sandwich_8 to a child_1, the sandwich_8 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_7 only if there is a content_3 at kitchen. We can make a regular sandwich_7 only if there is a bread_4 at kitchen. </PRECON> make a regular sandwich_7 using bread_4 and content_3 <EFFECT> Once we make a regular sandwich_7, the sandwich_7 is at kitchen. Once we make a regular sandwich_7, the bread_4 and content_3 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_7 on a tray_1 only if the sandwich_7 is at kitchen. We can put a sandwich_7 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_7 on tray_1 <EFFECT> Once we put a sandwich_7 on a tray_1, the sandwich_7 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_7 to a child_2 only if the child_2 is not allergic to gluten. We can serve a regular sandwich_7 to a child_2 only if the child is waiting for the sandwich_7 at the table_2. We can serve a regular sandwich_7 to a child_2 only if the sandwich_7 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. </PRECON> use tray_1 to serve regular sandwich_7 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_7 to a child_2, we say the child_2 has been served. Once we serve a regular sandwich_7 to a child_2, the sandwich_7 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a content_5 at kitchen. We can make a regular sandwich_6 only if there is a bread_5 at kitchen. </PRECON> make a regular sandwich_6 using bread_5 and content_5 <EFFECT> Once we make a regular sandwich_6, the sandwich_6 is at kitchen. Once we make a regular sandwich_6, the bread_5 and content_5 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_4 only if the child_4 is not allergic to gluten. We can serve a regular sandwich_6 to a child_4 only if the child is waiting for the sandwich_6 at the table_2. We can serve a regular sandwich_6 to a child_4 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_2 where the child_4 is waiting. </PRECON> use tray_1 to serve regular sandwich_6 to child_4 at table_2 <EFFECT> Once we serve a regular sandwich_6 to a child_4, we say the child_4 has been served. Once we serve a regular sandwich_6 to a child_4, the sandwich_6 is no longer on the tray_1. </EFFECT> \n</PLAN>", "plan_length": 26, "raw_plan": ["(make_sandwich_no_gluten sandw1 bread1 content4)", "(put_on_tray sandw1 tray1)", "(move_tray tray1 kitchen table1)", "(move_tray tray1 table1 table2)", "(serve_sandwich_no_gluten sandw1 child5 tray1 table2)", "(make_sandwich sandw9 bread2 content1)", "(move_tray tray1 table2 kitchen)", "(put_on_tray sandw9 tray1)", "(move_tray tray1 kitchen table1)", "(serve_sandwich sandw9 child3 tray1 table1)", "(move_tray tray1 table1 table2)", "(make_sandwich sandw8 bread3 content2)", "(move_tray tray1 table2 kitchen)", "(put_on_tray sandw8 tray1)", "(move_tray tray1 kitchen table2)", "(serve_sandwich sandw8 child1 tray1 table2)", "(make_sandwich sandw7 bread4 content3)", "(move_tray tray1 table2 kitchen)", "(put_on_tray sandw7 tray1)", "(move_tray tray1 kitchen table2)", "(serve_sandwich sandw7 child2 tray1 table2)", "(make_sandwich sandw6 bread5 content5)", "(move_tray tray1 table2 kitchen)", "(put_on_tray sandw6 tray1)", "(move_tray tray1 kitchen table2)", "(serve_sandwich sandw6 child4 tray1 table2)"], "full_text_prompt": "I have to plan how to make and serve sandwiches for a group of children, taking into account that some of them are allergic to gluten. There are two types of sandwiches: regular and gluten-free.\nHere are the actions that can be performed:\nMake a gluten-free sandwich.\nMake a regular sandwich.\nPut a sandwich on a tray.\nServe a gluten-free sandwich to an allergic child.\nServe a regular sandwich to a child.\nMove a tray between kitchen and tables.\nThe following are the restrictions on the actions:\nWe can make a gluten-free sandwich only if there is a bread at kitchen and the bread is gluten-free.\nWe can make a gluten-free sandwich only if there is a content at kitchen and the content is gluten-free.\nOnce we make a gluten-free sandwich, the bread and content are no longer at kitchen.\nOnce we make a gluten-free sandwich, the sandwich is at kitchen and is gluten-free.\nWe can make a regular sandwich only if there is a bread at kitchen.\nWe can make a regular sandwich only if there is a content at kitchen.\nOnce we make a regular sandwich, the bread and content are no longer at kitchen.\nOnce we make a regular sandwich, the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the tray is also at kitchen.\nOnce we put a sandwich on a tray, the sandwich is no longer at kitchen but is on the tray.\nWe can serve a gluten-free sandwich to an allergic child only if the child is allergic to gluten.\nWe can serve a gluten-free sandwich to an allergic child only if the sandwich is on a tray and the sandwich is gluten-free.\nWe can serve a gluten-free sandwich to an allergic child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the tray is at the table where the child is waiting.\nOnce we serve a gluten-free sandwich to an allergic child, the sandwich is no longer on the tray.\nOnce we serve a gluten-free sandwich to an allergic child, we say the child has been served.\nWe can serve a regular sandwich to a child only if the child is not allergic to gluten.\nWe can serve a regular sandwich to a child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the sandwich is on a tray and the tray is at the table where the child is waiting.\nOnce we serve a regular sandwich to a child, the sandwich is no longer on the tray.\nOnce we serve a regular sandwich to a child, we say the child has been served.\nWe can move a tray from from-place to to-place only if the tray is at from-place.\nOnce we move a tray from from-place to to-place, the tray is no longer at from-place but is at to-place.As initial conditions I have that, bread_1 is gluten-free, content_4 is at kitchen, child_5 is waiting for sandwich at table_2, content_1 is at kitchen, sandwich_1 is not ready yet, child_5 is allergic to gluten, child_2 is not allergic to gluten, child_4 is not allergic to gluten, child_1 is waiting for sandwich at table_2, child_4 is waiting for sandwich at table_2, bread_3 is at kitchen, bread_1 is at kitchen, bread_4 is at kitchen, content_3 is at kitchen, child_1 is not allergic to gluten, sandwich_7 is not ready yet, sandwich_4 is not ready yet, child_3 is waiting for sandwich at table_1, tray_1 is at kitchen, sandwich_8 is not ready yet, child_3 is not allergic to gluten, child_2 is waiting for sandwich at table_2, content_5 is at kitchen, content_4 is gluten-free, bread_5 is at kitchen, content_2 is at kitchen, sandwich_6 is not ready yet, sandwich_10 is not ready yet, bread_2 is at kitchen, sandwich_9 is not ready yet, sandwich_3 is not ready yet, sandwich_5 is not ready yet, sandwich_2 is not ready yet.My goal is to have that child_2 has been served, child_3 has been served, child_5 has been served, child_1 has been served, child_4 has been served.My plan is as follows:\n<PLAN>\n <PRECON> We can make a gluten-free sandwich_1 only if there is a content_4 at kitchen and the content_4 is gluten-free. We can make a gluten-free sandwich_1 only if there is a bread_1 at kitchen and the bread_1 is gluten-free. </PRECON> make a gluten-free sandwich_1 using bread_1 and content_4 <EFFECT> Once we make a gluten-free sandwich_1, the bread_1 and content_4 are no longer at kitchen. Once we make a gluten-free sandwich_1, the sandwich_1 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can put a sandwich_1 on a tray_1 only if the sandwich_1 is at kitchen. We can put a sandwich_1 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_1 on tray_1 <EFFECT> Once we put a sandwich_1 on a tray_1, the sandwich_1 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_1 to an allergic child_5 only if the sandwich_1 is on a tray_1 and the sandwich_1 is gluten-free. We can serve a gluten-free sandwich_1 to an allergic child_5 only if the child_5 is allergic to gluten. We can serve a regular sandwich_1 to a child_5 only if the tray_1 is at the table_2 where the child_5 is waiting. We can serve a gluten-free sandwich_1 to an allergic child_5 only if the child_5 is waiting for the sandwich_1 at the table_2. </PRECON> use tray_1 to serve gluten-free sandwich_1 to child_5 at table_2 <EFFECT> Once we serve a gluten-free sandwich_1 to an allergic child_5, we say the child_5 has been served. Once we serve a gluten-free sandwich_1 to an allergic child_5, the sandwich_1 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_9 only if there is a content_1 at kitchen. We can make a regular sandwich_9 only if there is a bread_2 at kitchen. </PRECON> make a regular sandwich_9 using bread_2 and content_1 <EFFECT> Once we make a regular sandwich_9, the sandwich_9 is at kitchen. Once we make a regular sandwich_9, the bread_2 and content_1 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_9 on a tray_1 only if the sandwich_9 is at kitchen. We can put a sandwich_9 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_9 on tray_1 <EFFECT> Once we put a sandwich_9 on a tray_1, the sandwich_9 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_9 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_9 to a child_3 only if the child is waiting for the sandwich_9 at the table_1. We can serve a regular sandwich_9 to a child_3 only if the sandwich_9 is on a tray_1 and the tray_1 is at the table_1 where the child_3 is waiting. </PRECON> use tray_1 to serve regular sandwich_9 to child_3 at table_1 <EFFECT> Once we serve a regular sandwich_9 to a child_3, we say the child_3 has been served. Once we serve a regular sandwich_9 to a child_3, the sandwich_9 is no longer on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can make a regular sandwich_8 only if there is a content_2 at kitchen. We can make a regular sandwich_8 only if there is a bread_3 at kitchen. </PRECON> make a regular sandwich_8 using bread_3 and content_2 <EFFECT> Once we make a regular sandwich_8, the sandwich_8 is at kitchen. Once we make a regular sandwich_8, the bread_3 and content_2 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> WRONG \n <PRECON> We can put a sandwich_8 on a tray_1 only if the sandwich_8 is at kitchen. We can put a sandwich_8 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_8 on tray_1 <EFFECT> Once we put a sandwich_8 on a tray_1, the sandwich_8 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_7 to a child_2 only if the child_2 is not allergic to gluten. We can serve a regular sandwich_7 to a child_2 only if the child is waiting for the sandwich_7 at the table_2. We can serve a regular sandwich_7 to a child_2 only if the sandwich_7 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. </PRECON> use tray_1 to serve regular sandwich_7 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_7 to a child_2, we say the child_2 has been served. Once we serve a regular sandwich_7 to a child_2, the sandwich_7 is no longer on the tray_1. </EFFECT> WRONG \n <PRECON> We can serve a regular sandwich_8 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_8 to a child_1 only if the child is waiting for the sandwich_8 at the table_2. We can serve a regular sandwich_8 to a child_1 only if the sandwich_8 is on a tray_1 and the tray_1 is at the table_2 where the child_1 is waiting. </PRECON> use tray_1 to serve regular sandwich_8 to child_1 at table_2 <EFFECT> Once we serve a regular sandwich_8 to a child_1, we say the child_1 has been served. Once we serve a regular sandwich_8 to a child_1, the sandwich_8 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_7 only if there is a content_3 at kitchen. We can make a regular sandwich_7 only if there is a bread_4 at kitchen. </PRECON> make a regular sandwich_7 using bread_4 and content_3 <EFFECT> Once we make a regular sandwich_7, the sandwich_7 is at kitchen. Once we make a regular sandwich_7, the bread_4 and content_3 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_7 on a tray_1 only if the sandwich_7 is at kitchen. We can put a sandwich_7 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_7 on tray_1 <EFFECT> Once we put a sandwich_7 on a tray_1, the sandwich_7 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_7 to a child_2 only if the child_2 is not allergic to gluten. We can serve a regular sandwich_7 to a child_2 only if the child is waiting for the sandwich_7 at the table_2. We can serve a regular sandwich_7 to a child_2 only if the sandwich_7 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. </PRECON> use tray_1 to serve regular sandwich_7 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_7 to a child_2, we say the child_2 has been served. Once we serve a regular sandwich_7 to a child_2, the sandwich_7 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a content_5 at kitchen. We can make a regular sandwich_6 only if there is a bread_5 at kitchen. </PRECON> make a regular sandwich_6 using bread_5 and content_5 <EFFECT> Once we make a regular sandwich_6, the sandwich_6 is at kitchen. Once we make a regular sandwich_6, the bread_5 and content_5 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_4 only if the child_4 is not allergic to gluten. We can serve a regular sandwich_6 to a child_4 only if the child is waiting for the sandwich_6 at the table_2. We can serve a regular sandwich_6 to a child_4 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_2 where the child_4 is waiting. </PRECON> use tray_1 to serve regular sandwich_6 to child_4 at table_2 <EFFECT> Once we serve a regular sandwich_6 to a child_4, we say the child_4 has been served. Once we serve a regular sandwich_6 to a child_4, the sandwich_6 is no longer on the tray_1. </EFFECT> \n</PLAN>"}
{"domain": "childsnack", "instance_id": "80", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to make and serve sandwiches for a group of children, taking into account that some of them are allergic to gluten. There are two types of sandwiches: regular and gluten-free.\nHere are the actions that can be performed:\nMake a gluten-free sandwich.\nMake a regular sandwich.\nPut a sandwich on a tray.\nServe a gluten-free sandwich to an allergic child.\nServe a regular sandwich to a child.\nMove a tray between kitchen and tables.\nThe following are the restrictions on the actions:\nWe can make a gluten-free sandwich only if there is a bread at kitchen and the bread is gluten-free.\nWe can make a gluten-free sandwich only if there is a content at kitchen and the content is gluten-free.\nOnce we make a gluten-free sandwich, the bread and content are no longer at kitchen.\nOnce we make a gluten-free sandwich, the sandwich is at kitchen and is gluten-free.\nWe can make a regular sandwich only if there is a bread at kitchen.\nWe can make a regular sandwich only if there is a content at kitchen.\nOnce we make a regular sandwich, the bread and content are no longer at kitchen.\nOnce we make a regular sandwich, the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the tray is also at kitchen.\nOnce we put a sandwich on a tray, the sandwich is no longer at kitchen but is on the tray.\nWe can serve a gluten-free sandwich to an allergic child only if the child is allergic to gluten.\nWe can serve a gluten-free sandwich to an allergic child only if the sandwich is on a tray and the sandwich is gluten-free.\nWe can serve a gluten-free sandwich to an allergic child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the tray is at the table where the child is waiting.\nOnce we serve a gluten-free sandwich to an allergic child, the sandwich is no longer on the tray.\nOnce we serve a gluten-free sandwich to an allergic child, we say the child has been served.\nWe can serve a regular sandwich to a child only if the child is not allergic to gluten.\nWe can serve a regular sandwich to a child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the sandwich is on a tray and the tray is at the table where the child is waiting.\nOnce we serve a regular sandwich to a child, the sandwich is no longer on the tray.\nOnce we serve a regular sandwich to a child, we say the child has been served.\nWe can move a tray from from-place to to-place only if the tray is at from-place.\nOnce we move a tray from from-place to to-place, the tray is no longer at from-place but is at to-place.", "input": "As initial conditions I have that, sandwich_9 is not ready yet, content_2 is at kitchen, child_2 is waiting for sandwich at table_1, child_4 is waiting for sandwich at table_2, content_4 is gluten-free, bread_2 is at kitchen, bread_1 is at kitchen, tray_1 is at kitchen, content_4 is at kitchen, sandwich_1 is not ready yet, child_5 is waiting for sandwich at table_1, content_5 is at kitchen, sandwich_5 is not ready yet, child_1 is not allergic to gluten, sandwich_7 is not ready yet, child_5 is not allergic to gluten, bread_5 is at kitchen, sandwich_3 is not ready yet, child_3 is not allergic to gluten, content_1 is at kitchen, sandwich_8 is not ready yet, sandwich_6 is not ready yet, sandwich_2 is not ready yet, bread_3 is at kitchen, bread_5 is gluten-free, child_4 is allergic to gluten, child_3 is waiting for sandwich at table_2, child_1 is waiting for sandwich at table_1, bread_4 is at kitchen, child_2 is not allergic to gluten, content_3 is at kitchen, sandwich_4 is not ready yet.\nMy goal is to have that child_4 has been served, child_5 has been served, child_3 has been served, child_1 has been served, child_2 has been served.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> We can make a gluten-free sandwich_1 only if there is a content_4 at kitchen and the content_4 is gluten-free. We can make a gluten-free sandwich_1 only if there is a bread_5 at kitchen and the bread_5 is gluten-free. </PRECON> make a gluten-free sandwich_1 using bread_5 and content_4 <EFFECT> Once we make a gluten-free sandwich_1, the sandwich_1 is at kitchen and is gluten-free. Once we make a gluten-free sandwich_1, the bread_5 and content_4 are no longer at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_1 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_1 on a tray_1 only if the sandwich_1 is at kitchen. </PRECON> put sandwich_1 on tray_1 <EFFECT> Once we put a sandwich_1 on a tray_1, the sandwich_1 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_4 only if the tray_1 is at the table_2 where the child_4 is waiting. We can serve a gluten-free sandwich_1 to an allergic child_4 only if the sandwich_1 is on a tray_1 and the sandwich_1 is gluten-free. We can serve a gluten-free sandwich_1 to an allergic child_4 only if the child_4 is waiting for the sandwich_1 at the table_2. We can serve a gluten-free sandwich_1 to an allergic child_4 only if the child_4 is allergic to gluten. </PRECON> use tray_1 to serve gluten-free sandwich_1 to child_4 at table_2 <EFFECT> Once we serve a gluten-free sandwich_1 to an allergic child_4, we say the child_4 has been served. Once we serve a gluten-free sandwich_1 to an allergic child_4, the sandwich_1 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_9 only if there is a bread_1 at kitchen. We can make a regular sandwich_9 only if there is a content_1 at kitchen. </PRECON> make a regular sandwich_9 using bread_1 and content_1 <EFFECT> Once we make a regular sandwich_9, the bread_1 and content_1 are no longer at kitchen. Once we make a regular sandwich_9, the sandwich_9 is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_9 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_9 on a tray_1 only if the sandwich_9 is at kitchen. </PRECON> put sandwich_9 on tray_1 <EFFECT> Once we put a sandwich_9 on a tray_1, the sandwich_9 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_8 only if there is a bread_2 at kitchen. We can make a regular sandwich_8 only if there is a content_2 at kitchen. </PRECON> make a regular sandwich_8 using bread_2 and content_2 <EFFECT> Once we make a regular sandwich_8, the bread_2 and content_2 are no longer at kitchen. Once we make a regular sandwich_8, the sandwich_8 is at kitchen. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> WRONG \n <PRECON> We can serve a regular sandwich_9 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_9 to a child_1 only if the sandwich_9 is on a tray_1 and the tray_1 is at the table_1 where the child_1 is waiting. We can serve a regular sandwich_9 to a child_1 only if the child is waiting for the sandwich_9 at the table_1. </PRECON> use tray_1 to serve regular sandwich_9 to child_1 at table_1 <EFFECT> Once we serve a regular sandwich_9 to a child_1, we say the child_1 has been served. Once we serve a regular sandwich_9 to a child_1, the sandwich_9 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_8 only if there is a bread_2 at kitchen. We can make a regular sandwich_8 only if there is a content_2 at kitchen. </PRECON> make a regular sandwich_8 using bread_2 and content_2 <EFFECT> Once we make a regular sandwich_8, the bread_2 and content_2 are no longer at kitchen. Once we make a regular sandwich_8, the sandwich_8 is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_8 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_8 on a tray_1 only if the sandwich_8 is at kitchen. </PRECON> put sandwich_8 on tray_1 <EFFECT> Once we put a sandwich_8 on a tray_1, the sandwich_8 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_8 to a child_2 only if the child_2 is not allergic to gluten. We can serve a regular sandwich_8 to a child_2 only if the sandwich_8 is on a tray_1 and the tray_1 is at the table_1 where the child_2 is waiting. We can serve a regular sandwich_8 to a child_2 only if the child is waiting for the sandwich_8 at the table_1. </PRECON> use tray_1 to serve regular sandwich_8 to child_2 at table_1 <EFFECT> Once we serve a regular sandwich_8 to a child_2, we say the child_2 has been served. Once we serve a regular sandwich_8 to a child_2, the sandwich_8 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_7 only if there is a bread_3 at kitchen. We can make a regular sandwich_7 only if there is a content_3 at kitchen. </PRECON> make a regular sandwich_7 using bread_3 and content_3 <EFFECT> Once we make a regular sandwich_7, the bread_3 and content_3 are no longer at kitchen. Once we make a regular sandwich_7, the sandwich_7 is at kitchen. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a bread_4 at kitchen. We can make a regular sandwich_6 only if there is a content_5 at kitchen. </PRECON> make a regular sandwich_6 using bread_4 and content_5 <EFFECT> Once we make a regular sandwich_6, the bread_4 and content_5 are no longer at kitchen. Once we make a regular sandwich_6, the sandwich_6 is at kitchen. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_7 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_7 on a tray_1 only if the sandwich_7 is at kitchen. </PRECON> put sandwich_7 on tray_1 <EFFECT> Once we put a sandwich_7 on a tray_1, the sandwich_7 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_7 to a child_5 only if the child_5 is not allergic to gluten. We can serve a regular sandwich_7 to a child_5 only if the sandwich_7 is on a tray_1 and the tray_1 is at the table_1 where the child_5 is waiting. We can serve a regular sandwich_7 to a child_5 only if the child is waiting for the sandwich_7 at the table_1. </PRECON> use tray_1 to serve regular sandwich_7 to child_5 at table_1 <EFFECT> Once we serve a regular sandwich_7 to a child_5, we say the child_5 has been served. Once we serve a regular sandwich_7 to a child_5, the sandwich_7 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a bread_4 at kitchen. We can make a regular sandwich_6 only if there is a content_5 at kitchen. </PRECON> make a regular sandwich_6 using bread_4 and content_5 <EFFECT> Once we make a regular sandwich_6, the bread_4 and content_5 are no longer at kitchen. Once we make a regular sandwich_6, the sandwich_6 is at kitchen. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a bread_4 at kitchen. We can make a regular sandwich_6 only if there is a content_5 at kitchen. </PRECON> make a regular sandwich_6 using bread_4 and content_5 <EFFECT> Once we make a regular sandwich_6, the bread_4 and content_5 are no longer at kitchen. Once we make a regular sandwich_6, the sandwich_6 is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_6 to a child_3 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_2 where the child_3 is waiting. We can serve a regular sandwich_6 to a child_3 only if the child is waiting for the sandwich_6 at the table_2. </PRECON> use tray_1 to serve regular sandwich_6 to child_3 at table_2 <EFFECT> Once we serve a regular sandwich_6 to a child_3, we say the child_3 has been served. Once we serve a regular sandwich_6 to a child_3, the sandwich_6 is no longer on the tray_1. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_6 to a child_3 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_2 where the child_3 is waiting. We can serve a regular sandwich_6 to a child_3 only if the child is waiting for the sandwich_6 at the table_2. </PRECON> use tray_1 to serve regular sandwich_6 to child_3 at table_2 <EFFECT> Once we serve a regular sandwich_6 to a child_3, we say the child_3 has been served. Once we serve a regular sandwich_6 to a child_3, the sandwich_6 is no longer on the tray_1. </EFFECT> \n</PLAN>", "plan_length": 26, "raw_plan": ["(make_sandwich_no_gluten sandw1 bread5 content4)", "(put_on_tray sandw1 tray1)", "(move_tray tray1 kitchen table1)", "(move_tray tray1 table1 table2)", "(serve_sandwich_no_gluten sandw1 child4 tray1 table2)", "(make_sandwich sandw9 bread1 content1)", "(move_tray tray1 table2 kitchen)", "(put_on_tray sandw9 tray1)", "(move_tray tray1 kitchen table1)", "(serve_sandwich sandw9 child1 tray1 table1)", "(make_sandwich sandw8 bread2 content2)", "(move_tray tray1 table1 kitchen)", "(put_on_tray sandw8 tray1)", "(move_tray tray1 kitchen table1)", "(serve_sandwich sandw8 child2 tray1 table1)", "(make_sandwich sandw7 bread3 content3)", "(move_tray tray1 table1 kitchen)", "(put_on_tray sandw7 tray1)", "(move_tray tray1 kitchen table1)", "(serve_sandwich sandw7 child5 tray1 table1)", "(move_tray tray1 table1 table2)", "(make_sandwich sandw6 bread4 content5)", "(move_tray tray1 table2 kitchen)", "(put_on_tray sandw6 tray1)", "(move_tray tray1 kitchen table2)", "(serve_sandwich sandw6 child3 tray1 table2)"], "full_text_prompt": "I have to plan how to make and serve sandwiches for a group of children, taking into account that some of them are allergic to gluten. There are two types of sandwiches: regular and gluten-free.\nHere are the actions that can be performed:\nMake a gluten-free sandwich.\nMake a regular sandwich.\nPut a sandwich on a tray.\nServe a gluten-free sandwich to an allergic child.\nServe a regular sandwich to a child.\nMove a tray between kitchen and tables.\nThe following are the restrictions on the actions:\nWe can make a gluten-free sandwich only if there is a bread at kitchen and the bread is gluten-free.\nWe can make a gluten-free sandwich only if there is a content at kitchen and the content is gluten-free.\nOnce we make a gluten-free sandwich, the bread and content are no longer at kitchen.\nOnce we make a gluten-free sandwich, the sandwich is at kitchen and is gluten-free.\nWe can make a regular sandwich only if there is a bread at kitchen.\nWe can make a regular sandwich only if there is a content at kitchen.\nOnce we make a regular sandwich, the bread and content are no longer at kitchen.\nOnce we make a regular sandwich, the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the tray is also at kitchen.\nOnce we put a sandwich on a tray, the sandwich is no longer at kitchen but is on the tray.\nWe can serve a gluten-free sandwich to an allergic child only if the child is allergic to gluten.\nWe can serve a gluten-free sandwich to an allergic child only if the sandwich is on a tray and the sandwich is gluten-free.\nWe can serve a gluten-free sandwich to an allergic child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the tray is at the table where the child is waiting.\nOnce we serve a gluten-free sandwich to an allergic child, the sandwich is no longer on the tray.\nOnce we serve a gluten-free sandwich to an allergic child, we say the child has been served.\nWe can serve a regular sandwich to a child only if the child is not allergic to gluten.\nWe can serve a regular sandwich to a child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the sandwich is on a tray and the tray is at the table where the child is waiting.\nOnce we serve a regular sandwich to a child, the sandwich is no longer on the tray.\nOnce we serve a regular sandwich to a child, we say the child has been served.\nWe can move a tray from from-place to to-place only if the tray is at from-place.\nOnce we move a tray from from-place to to-place, the tray is no longer at from-place but is at to-place.As initial conditions I have that, sandwich_9 is not ready yet, content_2 is at kitchen, child_2 is waiting for sandwich at table_1, child_4 is waiting for sandwich at table_2, content_4 is gluten-free, bread_2 is at kitchen, bread_1 is at kitchen, tray_1 is at kitchen, content_4 is at kitchen, sandwich_1 is not ready yet, child_5 is waiting for sandwich at table_1, content_5 is at kitchen, sandwich_5 is not ready yet, child_1 is not allergic to gluten, sandwich_7 is not ready yet, child_5 is not allergic to gluten, bread_5 is at kitchen, sandwich_3 is not ready yet, child_3 is not allergic to gluten, content_1 is at kitchen, sandwich_8 is not ready yet, sandwich_6 is not ready yet, sandwich_2 is not ready yet, bread_3 is at kitchen, bread_5 is gluten-free, child_4 is allergic to gluten, child_3 is waiting for sandwich at table_2, child_1 is waiting for sandwich at table_1, bread_4 is at kitchen, child_2 is not allergic to gluten, content_3 is at kitchen, sandwich_4 is not ready yet.My goal is to have that child_4 has been served, child_5 has been served, child_3 has been served, child_1 has been served, child_2 has been served.My plan is as follows:\n<PLAN>\n <PRECON> We can make a gluten-free sandwich_1 only if there is a content_4 at kitchen and the content_4 is gluten-free. We can make a gluten-free sandwich_1 only if there is a bread_5 at kitchen and the bread_5 is gluten-free. </PRECON> make a gluten-free sandwich_1 using bread_5 and content_4 <EFFECT> Once we make a gluten-free sandwich_1, the sandwich_1 is at kitchen and is gluten-free. Once we make a gluten-free sandwich_1, the bread_5 and content_4 are no longer at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_1 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_1 on a tray_1 only if the sandwich_1 is at kitchen. </PRECON> put sandwich_1 on tray_1 <EFFECT> Once we put a sandwich_1 on a tray_1, the sandwich_1 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_4 only if the tray_1 is at the table_2 where the child_4 is waiting. We can serve a gluten-free sandwich_1 to an allergic child_4 only if the sandwich_1 is on a tray_1 and the sandwich_1 is gluten-free. We can serve a gluten-free sandwich_1 to an allergic child_4 only if the child_4 is waiting for the sandwich_1 at the table_2. We can serve a gluten-free sandwich_1 to an allergic child_4 only if the child_4 is allergic to gluten. </PRECON> use tray_1 to serve gluten-free sandwich_1 to child_4 at table_2 <EFFECT> Once we serve a gluten-free sandwich_1 to an allergic child_4, we say the child_4 has been served. Once we serve a gluten-free sandwich_1 to an allergic child_4, the sandwich_1 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_9 only if there is a bread_1 at kitchen. We can make a regular sandwich_9 only if there is a content_1 at kitchen. </PRECON> make a regular sandwich_9 using bread_1 and content_1 <EFFECT> Once we make a regular sandwich_9, the bread_1 and content_1 are no longer at kitchen. Once we make a regular sandwich_9, the sandwich_9 is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_9 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_9 on a tray_1 only if the sandwich_9 is at kitchen. </PRECON> put sandwich_9 on tray_1 <EFFECT> Once we put a sandwich_9 on a tray_1, the sandwich_9 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_8 only if there is a bread_2 at kitchen. We can make a regular sandwich_8 only if there is a content_2 at kitchen. </PRECON> make a regular sandwich_8 using bread_2 and content_2 <EFFECT> Once we make a regular sandwich_8, the bread_2 and content_2 are no longer at kitchen. Once we make a regular sandwich_8, the sandwich_8 is at kitchen. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> WRONG \n <PRECON> We can serve a regular sandwich_9 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_9 to a child_1 only if the sandwich_9 is on a tray_1 and the tray_1 is at the table_1 where the child_1 is waiting. We can serve a regular sandwich_9 to a child_1 only if the child is waiting for the sandwich_9 at the table_1. </PRECON> use tray_1 to serve regular sandwich_9 to child_1 at table_1 <EFFECT> Once we serve a regular sandwich_9 to a child_1, we say the child_1 has been served. Once we serve a regular sandwich_9 to a child_1, the sandwich_9 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_8 only if there is a bread_2 at kitchen. We can make a regular sandwich_8 only if there is a content_2 at kitchen. </PRECON> make a regular sandwich_8 using bread_2 and content_2 <EFFECT> Once we make a regular sandwich_8, the bread_2 and content_2 are no longer at kitchen. Once we make a regular sandwich_8, the sandwich_8 is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_8 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_8 on a tray_1 only if the sandwich_8 is at kitchen. </PRECON> put sandwich_8 on tray_1 <EFFECT> Once we put a sandwich_8 on a tray_1, the sandwich_8 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_8 to a child_2 only if the child_2 is not allergic to gluten. We can serve a regular sandwich_8 to a child_2 only if the sandwich_8 is on a tray_1 and the tray_1 is at the table_1 where the child_2 is waiting. We can serve a regular sandwich_8 to a child_2 only if the child is waiting for the sandwich_8 at the table_1. </PRECON> use tray_1 to serve regular sandwich_8 to child_2 at table_1 <EFFECT> Once we serve a regular sandwich_8 to a child_2, we say the child_2 has been served. Once we serve a regular sandwich_8 to a child_2, the sandwich_8 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_7 only if there is a bread_3 at kitchen. We can make a regular sandwich_7 only if there is a content_3 at kitchen. </PRECON> make a regular sandwich_7 using bread_3 and content_3 <EFFECT> Once we make a regular sandwich_7, the bread_3 and content_3 are no longer at kitchen. Once we make a regular sandwich_7, the sandwich_7 is at kitchen. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a bread_4 at kitchen. We can make a regular sandwich_6 only if there is a content_5 at kitchen. </PRECON> make a regular sandwich_6 using bread_4 and content_5 <EFFECT> Once we make a regular sandwich_6, the bread_4 and content_5 are no longer at kitchen. Once we make a regular sandwich_6, the sandwich_6 is at kitchen. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_7 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_7 on a tray_1 only if the sandwich_7 is at kitchen. </PRECON> put sandwich_7 on tray_1 <EFFECT> Once we put a sandwich_7 on a tray_1, the sandwich_7 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_7 to a child_5 only if the child_5 is not allergic to gluten. We can serve a regular sandwich_7 to a child_5 only if the sandwich_7 is on a tray_1 and the tray_1 is at the table_1 where the child_5 is waiting. We can serve a regular sandwich_7 to a child_5 only if the child is waiting for the sandwich_7 at the table_1. </PRECON> use tray_1 to serve regular sandwich_7 to child_5 at table_1 <EFFECT> Once we serve a regular sandwich_7 to a child_5, we say the child_5 has been served. Once we serve a regular sandwich_7 to a child_5, the sandwich_7 is no longer on the tray_1. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a bread_4 at kitchen. We can make a regular sandwich_6 only if there is a content_5 at kitchen. </PRECON> make a regular sandwich_6 using bread_4 and content_5 <EFFECT> Once we make a regular sandwich_6, the bread_4 and content_5 are no longer at kitchen. Once we make a regular sandwich_6, the sandwich_6 is at kitchen. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a bread_4 at kitchen. We can make a regular sandwich_6 only if there is a content_5 at kitchen. </PRECON> make a regular sandwich_6 using bread_4 and content_5 <EFFECT> Once we make a regular sandwich_6, the bread_4 and content_5 are no longer at kitchen. Once we make a regular sandwich_6, the sandwich_6 is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_6 to a child_3 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_2 where the child_3 is waiting. We can serve a regular sandwich_6 to a child_3 only if the child is waiting for the sandwich_6 at the table_2. </PRECON> use tray_1 to serve regular sandwich_6 to child_3 at table_2 <EFFECT> Once we serve a regular sandwich_6 to a child_3, we say the child_3 has been served. Once we serve a regular sandwich_6 to a child_3, the sandwich_6 is no longer on the tray_1. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_6 to a child_3 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_2 where the child_3 is waiting. We can serve a regular sandwich_6 to a child_3 only if the child is waiting for the sandwich_6 at the table_2. </PRECON> use tray_1 to serve regular sandwich_6 to child_3 at table_2 <EFFECT> Once we serve a regular sandwich_6 to a child_3, we say the child_3 has been served. Once we serve a regular sandwich_6 to a child_3, the sandwich_6 is no longer on the tray_1. </EFFECT> \n</PLAN>"}
{"domain": "childsnack", "instance_id": "120", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to make and serve sandwiches for a group of children, taking into account that some of them are allergic to gluten. There are two types of sandwiches: regular and gluten-free.\nHere are the actions that can be performed:\nMake a gluten-free sandwich.\nMake a regular sandwich.\nPut a sandwich on a tray.\nServe a gluten-free sandwich to an allergic child.\nServe a regular sandwich to a child.\nMove a tray between kitchen and tables.\nThe following are the restrictions on the actions:\nWe can make a gluten-free sandwich only if there is a bread at kitchen and the bread is gluten-free.\nWe can make a gluten-free sandwich only if there is a content at kitchen and the content is gluten-free.\nOnce we make a gluten-free sandwich, the bread and content are no longer at kitchen.\nOnce we make a gluten-free sandwich, the sandwich is at kitchen and is gluten-free.\nWe can make a regular sandwich only if there is a bread at kitchen.\nWe can make a regular sandwich only if there is a content at kitchen.\nOnce we make a regular sandwich, the bread and content are no longer at kitchen.\nOnce we make a regular sandwich, the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the tray is also at kitchen.\nOnce we put a sandwich on a tray, the sandwich is no longer at kitchen but is on the tray.\nWe can serve a gluten-free sandwich to an allergic child only if the child is allergic to gluten.\nWe can serve a gluten-free sandwich to an allergic child only if the sandwich is on a tray and the sandwich is gluten-free.\nWe can serve a gluten-free sandwich to an allergic child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the tray is at the table where the child is waiting.\nOnce we serve a gluten-free sandwich to an allergic child, the sandwich is no longer on the tray.\nOnce we serve a gluten-free sandwich to an allergic child, we say the child has been served.\nWe can serve a regular sandwich to a child only if the child is not allergic to gluten.\nWe can serve a regular sandwich to a child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the sandwich is on a tray and the tray is at the table where the child is waiting.\nOnce we serve a regular sandwich to a child, the sandwich is no longer on the tray.\nOnce we serve a regular sandwich to a child, we say the child has been served.\nWe can move a tray from from-place to to-place only if the tray is at from-place.\nOnce we move a tray from from-place to to-place, the tray is no longer at from-place but is at to-place.", "input": "As initial conditions I have that, child_5 is not allergic to gluten, content_1 is at kitchen, sandwich_2 is not ready yet, sandwich_4 is not ready yet, sandwich_1 is not ready yet, bread_6 is at kitchen, child_2 is not allergic to gluten, sandwich_9 is not ready yet, sandwich_3 is not ready yet, content_2 is at kitchen, content_4 is at kitchen, content_5 is at kitchen, child_5 is waiting for sandwich at table_1, child_1 is waiting for sandwich at table_2, sandwich_5 is not ready yet, sandwich_6 is not ready yet, content_6 is gluten-free, child_4 is allergic to gluten, tray_1 is at kitchen, child_3 is not allergic to gluten, bread_6 is gluten-free, bread_1 is at kitchen, child_1 is not allergic to gluten, bread_5 is at kitchen, sandwich_7 is not ready yet, bread_2 is at kitchen, content_1 is gluten-free, child_6 is allergic to gluten, bread_3 is gluten-free, content_6 is at kitchen, child_4 is waiting for sandwich at table_1, bread_3 is at kitchen, bread_4 is at kitchen, child_2 is waiting for sandwich at table_2, sandwich_8 is not ready yet, child_3 is waiting for sandwich at table_3, content_3 is at kitchen, child_6 is waiting for sandwich at table_3.\nMy goal is to have that child_4 has been served, child_2 has been served, child_5 has been served, child_3 has been served, child_1 has been served, child_6 has been served.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> We can serve a regular sandwich_5 to a child_3 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_3 where the child_3 is waiting. We can serve a regular sandwich_5 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_5 to a child_3 only if the child is waiting for the sandwich_5 at the table_3. </PRECON> use tray_1 to serve regular sandwich_5 to child_3 at table_3 <EFFECT> Once we serve a regular sandwich_5 to a child_3, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_3, we say the child_3 has been served. </EFFECT> WRONG \n <PRECON> We can make a gluten-free sandwich_9 only if there is a bread_3 at kitchen and the bread_3 is gluten-free. We can make a gluten-free sandwich_9 only if there is a content_1 at kitchen and the content_1 is gluten-free. </PRECON> make a gluten-free sandwich_9 using bread_3 and content_1 <EFFECT> Once we make a gluten-free sandwich_9, the bread_3 and content_1 are no longer at kitchen. Once we make a gluten-free sandwich_9, the sandwich_9 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can put a sandwich_9 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_9 on a tray_1 only if the sandwich_9 is at kitchen. </PRECON> put sandwich_9 on tray_1 <EFFECT> Once we put a sandwich_9 on a tray_1, the sandwich_9 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_9 to an allergic child_4 only if the sandwich_9 is on a tray_1 and the sandwich_9 is gluten-free. We can serve a regular sandwich_9 to a child_4 only if the tray_1 is at the table_1 where the child_4 is waiting. We can serve a gluten-free sandwich_9 to an allergic child_4 only if the child_4 is waiting for the sandwich_9 at the table_1. We can serve a gluten-free sandwich_9 to an allergic child_4 only if the child_4 is allergic to gluten. </PRECON> use tray_1 to serve gluten-free sandwich_9 to child_4 at table_1 <EFFECT> Once we serve a gluten-free sandwich_9 to an allergic child_4, the sandwich_9 is no longer on the tray_1. Once we serve a gluten-free sandwich_9 to an allergic child_4, we say the child_4 has been served. </EFFECT> \n <PRECON> We can make a gluten-free sandwich_8 only if there is a bread_6 at kitchen and the bread_6 is gluten-free. We can make a gluten-free sandwich_8 only if there is a content_6 at kitchen and the content_6 is gluten-free. </PRECON> make a gluten-free sandwich_8 using bread_6 and content_6 <EFFECT> Once we make a gluten-free sandwich_8, the bread_6 and content_6 are no longer at kitchen. Once we make a gluten-free sandwich_8, the sandwich_8 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_8 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_8 on a tray_1 only if the sandwich_8 is at kitchen. </PRECON> put sandwich_8 on tray_1 <EFFECT> Once we put a sandwich_8 on a tray_1, the sandwich_8 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_1 only if the sandwich_1 is on a tray_1 and the tray_1 is at the table_2 where the child_1 is waiting. We can serve a regular sandwich_1 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_1 to a child_1 only if the child is waiting for the sandwich_1 at the table_2. </PRECON> use tray_1 to serve regular sandwich_1 to child_1 at table_2 <EFFECT> Once we serve a regular sandwich_1 to a child_1, the sandwich_1 is no longer on the tray_1. Once we serve a regular sandwich_1 to a child_1, we say the child_1 has been served. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_1 to table_3 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_3 <EFFECT> Once we move a tray_1 from table_1 to table_3, the tray_1 is no longer at table_1 but is at table_3. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_8 to an allergic child_6 only if the sandwich_8 is on a tray_1 and the sandwich_8 is gluten-free. We can serve a regular sandwich_8 to a child_6 only if the tray_1 is at the table_3 where the child_6 is waiting. We can serve a gluten-free sandwich_8 to an allergic child_6 only if the child_6 is waiting for the sandwich_8 at the table_3. We can serve a gluten-free sandwich_8 to an allergic child_6 only if the child_6 is allergic to gluten. </PRECON> use tray_1 to serve gluten-free sandwich_8 to child_6 at table_3 <EFFECT> Once we serve a gluten-free sandwich_8 to an allergic child_6, the sandwich_8 is no longer on the tray_1. Once we serve a gluten-free sandwich_8 to an allergic child_6, we say the child_6 has been served. </EFFECT> \n <PRECON> We can make a regular sandwich_7 only if there is a bread_5 at kitchen. We can make a regular sandwich_7 only if there is a content_5 at kitchen. </PRECON> make a regular sandwich_7 using bread_5 and content_5 <EFFECT> Once we make a regular sandwich_7, the sandwich_7 is at kitchen. Once we make a regular sandwich_7, the bread_5 and content_5 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_3 to kitchen only if the tray_1 is at table_3. </PRECON> move tray_1 from table_3 to kitchen <EFFECT> Once we move a tray_1 from table_3 to kitchen, the tray_1 is no longer at table_3 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_7 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_7 on a tray_1 only if the sandwich_7 is at kitchen. </PRECON> put sandwich_7 on tray_1 <EFFECT> Once we put a sandwich_7 on a tray_1, the sandwich_7 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_7 to a child_5 only if the sandwich_7 is on a tray_1 and the tray_1 is at the table_1 where the child_5 is waiting. We can serve a regular sandwich_7 to a child_5 only if the child_5 is not allergic to gluten. We can serve a regular sandwich_7 to a child_5 only if the child is waiting for the sandwich_7 at the table_1. </PRECON> use tray_1 to serve regular sandwich_7 to child_5 at table_1 <EFFECT> Once we serve a regular sandwich_7 to a child_5, the sandwich_7 is no longer on the tray_1. Once we serve a regular sandwich_7 to a child_5, we say the child_5 has been served. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_1 only if the sandwich_1 is on a tray_1 and the tray_1 is at the table_2 where the child_1 is waiting. We can serve a regular sandwich_1 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_1 to a child_1 only if the child is waiting for the sandwich_1 at the table_2. </PRECON> use tray_1 to serve regular sandwich_1 to child_1 at table_2 <EFFECT> Once we serve a regular sandwich_1 to a child_1, the sandwich_1 is no longer on the tray_1. Once we serve a regular sandwich_1 to a child_1, we say the child_1 has been served. </EFFECT> WRONG \n <PRECON> We can put a sandwich_1 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_1 on a tray_1 only if the sandwich_1 is at kitchen. </PRECON> put sandwich_1 on tray_1 <EFFECT> Once we put a sandwich_1 on a tray_1, the sandwich_1 is no longer at kitchen but is on the tray_1. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_2 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. We can serve a regular sandwich_6 to a child_2 only if the child_2 is not allergic to gluten. We can serve a regular sandwich_6 to a child_2 only if the child is waiting for the sandwich_6 at the table_2. </PRECON> use tray_1 to serve regular sandwich_6 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_6 to a child_2, the sandwich_6 is no longer on the tray_1. Once we serve a regular sandwich_6 to a child_2, we say the child_2 has been served. </EFFECT> WRONG \n <PRECON> We can make a regular sandwich_1 only if there is a bread_2 at kitchen. We can make a regular sandwich_1 only if there is a content_3 at kitchen. </PRECON> make a regular sandwich_1 using bread_2 and content_3 <EFFECT> Once we make a regular sandwich_1, the sandwich_1 is at kitchen. Once we make a regular sandwich_1, the bread_2 and content_3 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_1 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_1 on a tray_1 only if the sandwich_1 is at kitchen. </PRECON> put sandwich_1 on tray_1 <EFFECT> Once we put a sandwich_1 on a tray_1, the sandwich_1 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to table_3 only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to table_3 <EFFECT> Once we move a tray_1 from table_2 to table_3, the tray_1 is no longer at table_2 but is at table_3. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_1 only if the sandwich_1 is on a tray_1 and the tray_1 is at the table_2 where the child_1 is waiting. We can serve a regular sandwich_1 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_1 to a child_1 only if the child is waiting for the sandwich_1 at the table_2. </PRECON> use tray_1 to serve regular sandwich_1 to child_1 at table_2 <EFFECT> Once we serve a regular sandwich_1 to a child_1, the sandwich_1 is no longer on the tray_1. Once we serve a regular sandwich_1 to a child_1, we say the child_1 has been served. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a bread_1 at kitchen. We can make a regular sandwich_6 only if there is a content_2 at kitchen. </PRECON> make a regular sandwich_6 using bread_1 and content_2 <EFFECT> Once we make a regular sandwich_6, the sandwich_6 is at kitchen. Once we make a regular sandwich_6, the bread_1 and content_2 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> WRONG \n <PRECON> We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_2 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. We can serve a regular sandwich_6 to a child_2 only if the child_2 is not allergic to gluten. We can serve a regular sandwich_6 to a child_2 only if the child is waiting for the sandwich_6 at the table_2. </PRECON> use tray_1 to serve regular sandwich_6 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_6 to a child_2, the sandwich_6 is no longer on the tray_1. Once we serve a regular sandwich_6 to a child_2, we say the child_2 has been served. </EFFECT> \n <PRECON> We can serve a regular sandwich_5 to a child_3 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_3 where the child_3 is waiting. We can serve a regular sandwich_5 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_5 to a child_3 only if the child is waiting for the sandwich_5 at the table_3. </PRECON> use tray_1 to serve regular sandwich_5 to child_3 at table_3 <EFFECT> Once we serve a regular sandwich_5 to a child_3, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_3, we say the child_3 has been served. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_2 to table_3 only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to table_3 <EFFECT> Once we move a tray_1 from table_2 to table_3, the tray_1 is no longer at table_2 but is at table_3. </EFFECT> \n <PRECON> We can make a regular sandwich_5 only if there is a bread_4 at kitchen. We can make a regular sandwich_5 only if there is a content_4 at kitchen. </PRECON> make a regular sandwich_5 using bread_4 and content_4 <EFFECT> Once we make a regular sandwich_5, the sandwich_5 is at kitchen. Once we make a regular sandwich_5, the bread_4 and content_4 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_3 to kitchen only if the tray_1 is at table_3. </PRECON> move tray_1 from table_3 to kitchen <EFFECT> Once we move a tray_1 from table_3 to kitchen, the tray_1 is no longer at table_3 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_5 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_5 on a tray_1 only if the sandwich_5 is at kitchen. </PRECON> put sandwich_5 on tray_1 <EFFECT> Once we put a sandwich_5 on a tray_1, the sandwich_5 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_3 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_3 <EFFECT> Once we move a tray_1 from kitchen to table_3, the tray_1 is no longer at kitchen but is at table_3. </EFFECT> \n <PRECON> We can serve a regular sandwich_5 to a child_3 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_3 where the child_3 is waiting. We can serve a regular sandwich_5 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_5 to a child_3 only if the child is waiting for the sandwich_5 at the table_3. </PRECON> use tray_1 to serve regular sandwich_5 to child_3 at table_3 <EFFECT> Once we serve a regular sandwich_5 to a child_3, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_3, we say the child_3 has been served. </EFFECT> \n</PLAN>", "plan_length": 32, "raw_plan": ["(make_sandwich_no_gluten sandw9 bread3 content1)", "(put_on_tray sandw9 tray1)", "(move_tray tray1 kitchen table1)", "(serve_sandwich_no_gluten sandw9 child4 tray1 table1)", "(make_sandwich_no_gluten sandw8 bread6 content6)", "(move_tray tray1 table1 kitchen)", "(put_on_tray sandw8 tray1)", "(move_tray tray1 kitchen table1)", "(move_tray tray1 table1 table3)", "(serve_sandwich_no_gluten sandw8 child6 tray1 table3)", "(make_sandwich sandw7 bread5 content5)", "(move_tray tray1 table3 kitchen)", "(put_on_tray sandw7 tray1)", "(move_tray tray1 kitchen table1)", "(serve_sandwich sandw7 child5 tray1 table1)", "(move_tray tray1 table1 table2)", "(make_sandwich sandw1 bread2 content3)", "(move_tray tray1 table2 kitchen)", "(put_on_tray sandw1 tray1)", "(move_tray tray1 kitchen table2)", "(serve_sandwich sandw1 child1 tray1 table2)", "(make_sandwich sandw6 bread1 content2)", "(move_tray tray1 table2 kitchen)", "(put_on_tray sandw6 tray1)", "(move_tray tray1 kitchen table2)", "(serve_sandwich sandw6 child2 tray1 table2)", "(move_tray tray1 table2 table3)", "(make_sandwich sandw5 bread4 content4)", "(move_tray tray1 table3 kitchen)", "(put_on_tray sandw5 tray1)", "(move_tray tray1 kitchen table3)", "(serve_sandwich sandw5 child3 tray1 table3)"], "full_text_prompt": "I have to plan how to make and serve sandwiches for a group of children, taking into account that some of them are allergic to gluten. There are two types of sandwiches: regular and gluten-free.\nHere are the actions that can be performed:\nMake a gluten-free sandwich.\nMake a regular sandwich.\nPut a sandwich on a tray.\nServe a gluten-free sandwich to an allergic child.\nServe a regular sandwich to a child.\nMove a tray between kitchen and tables.\nThe following are the restrictions on the actions:\nWe can make a gluten-free sandwich only if there is a bread at kitchen and the bread is gluten-free.\nWe can make a gluten-free sandwich only if there is a content at kitchen and the content is gluten-free.\nOnce we make a gluten-free sandwich, the bread and content are no longer at kitchen.\nOnce we make a gluten-free sandwich, the sandwich is at kitchen and is gluten-free.\nWe can make a regular sandwich only if there is a bread at kitchen.\nWe can make a regular sandwich only if there is a content at kitchen.\nOnce we make a regular sandwich, the bread and content are no longer at kitchen.\nOnce we make a regular sandwich, the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the sandwich is at kitchen.\nWe can put a sandwich on a tray only if the tray is also at kitchen.\nOnce we put a sandwich on a tray, the sandwich is no longer at kitchen but is on the tray.\nWe can serve a gluten-free sandwich to an allergic child only if the child is allergic to gluten.\nWe can serve a gluten-free sandwich to an allergic child only if the sandwich is on a tray and the sandwich is gluten-free.\nWe can serve a gluten-free sandwich to an allergic child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the tray is at the table where the child is waiting.\nOnce we serve a gluten-free sandwich to an allergic child, the sandwich is no longer on the tray.\nOnce we serve a gluten-free sandwich to an allergic child, we say the child has been served.\nWe can serve a regular sandwich to a child only if the child is not allergic to gluten.\nWe can serve a regular sandwich to a child only if the child is waiting for the sandwich at the table.\nWe can serve a regular sandwich to a child only if the sandwich is on a tray and the tray is at the table where the child is waiting.\nOnce we serve a regular sandwich to a child, the sandwich is no longer on the tray.\nOnce we serve a regular sandwich to a child, we say the child has been served.\nWe can move a tray from from-place to to-place only if the tray is at from-place.\nOnce we move a tray from from-place to to-place, the tray is no longer at from-place but is at to-place.As initial conditions I have that, child_5 is not allergic to gluten, content_1 is at kitchen, sandwich_2 is not ready yet, sandwich_4 is not ready yet, sandwich_1 is not ready yet, bread_6 is at kitchen, child_2 is not allergic to gluten, sandwich_9 is not ready yet, sandwich_3 is not ready yet, content_2 is at kitchen, content_4 is at kitchen, content_5 is at kitchen, child_5 is waiting for sandwich at table_1, child_1 is waiting for sandwich at table_2, sandwich_5 is not ready yet, sandwich_6 is not ready yet, content_6 is gluten-free, child_4 is allergic to gluten, tray_1 is at kitchen, child_3 is not allergic to gluten, bread_6 is gluten-free, bread_1 is at kitchen, child_1 is not allergic to gluten, bread_5 is at kitchen, sandwich_7 is not ready yet, bread_2 is at kitchen, content_1 is gluten-free, child_6 is allergic to gluten, bread_3 is gluten-free, content_6 is at kitchen, child_4 is waiting for sandwich at table_1, bread_3 is at kitchen, bread_4 is at kitchen, child_2 is waiting for sandwich at table_2, sandwich_8 is not ready yet, child_3 is waiting for sandwich at table_3, content_3 is at kitchen, child_6 is waiting for sandwich at table_3.My goal is to have that child_4 has been served, child_2 has been served, child_5 has been served, child_3 has been served, child_1 has been served, child_6 has been served.My plan is as follows:\n<PLAN>\n <PRECON> We can serve a regular sandwich_5 to a child_3 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_3 where the child_3 is waiting. We can serve a regular sandwich_5 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_5 to a child_3 only if the child is waiting for the sandwich_5 at the table_3. </PRECON> use tray_1 to serve regular sandwich_5 to child_3 at table_3 <EFFECT> Once we serve a regular sandwich_5 to a child_3, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_3, we say the child_3 has been served. </EFFECT> WRONG \n <PRECON> We can make a gluten-free sandwich_9 only if there is a bread_3 at kitchen and the bread_3 is gluten-free. We can make a gluten-free sandwich_9 only if there is a content_1 at kitchen and the content_1 is gluten-free. </PRECON> make a gluten-free sandwich_9 using bread_3 and content_1 <EFFECT> Once we make a gluten-free sandwich_9, the bread_3 and content_1 are no longer at kitchen. Once we make a gluten-free sandwich_9, the sandwich_9 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can put a sandwich_9 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_9 on a tray_1 only if the sandwich_9 is at kitchen. </PRECON> put sandwich_9 on tray_1 <EFFECT> Once we put a sandwich_9 on a tray_1, the sandwich_9 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_9 to an allergic child_4 only if the sandwich_9 is on a tray_1 and the sandwich_9 is gluten-free. We can serve a regular sandwich_9 to a child_4 only if the tray_1 is at the table_1 where the child_4 is waiting. We can serve a gluten-free sandwich_9 to an allergic child_4 only if the child_4 is waiting for the sandwich_9 at the table_1. We can serve a gluten-free sandwich_9 to an allergic child_4 only if the child_4 is allergic to gluten. </PRECON> use tray_1 to serve gluten-free sandwich_9 to child_4 at table_1 <EFFECT> Once we serve a gluten-free sandwich_9 to an allergic child_4, the sandwich_9 is no longer on the tray_1. Once we serve a gluten-free sandwich_9 to an allergic child_4, we say the child_4 has been served. </EFFECT> \n <PRECON> We can make a gluten-free sandwich_8 only if there is a bread_6 at kitchen and the bread_6 is gluten-free. We can make a gluten-free sandwich_8 only if there is a content_6 at kitchen and the content_6 is gluten-free. </PRECON> make a gluten-free sandwich_8 using bread_6 and content_6 <EFFECT> Once we make a gluten-free sandwich_8, the bread_6 and content_6 are no longer at kitchen. Once we make a gluten-free sandwich_8, the sandwich_8 is at kitchen and is gluten-free. </EFFECT> \n <PRECON> We can move a tray_1 from table_1 to kitchen only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to kitchen <EFFECT> Once we move a tray_1 from table_1 to kitchen, the tray_1 is no longer at table_1 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_8 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_8 on a tray_1 only if the sandwich_8 is at kitchen. </PRECON> put sandwich_8 on tray_1 <EFFECT> Once we put a sandwich_8 on a tray_1, the sandwich_8 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_1 only if the sandwich_1 is on a tray_1 and the tray_1 is at the table_2 where the child_1 is waiting. We can serve a regular sandwich_1 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_1 to a child_1 only if the child is waiting for the sandwich_1 at the table_2. </PRECON> use tray_1 to serve regular sandwich_1 to child_1 at table_2 <EFFECT> Once we serve a regular sandwich_1 to a child_1, the sandwich_1 is no longer on the tray_1. Once we serve a regular sandwich_1 to a child_1, we say the child_1 has been served. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_1 to table_3 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_3 <EFFECT> Once we move a tray_1 from table_1 to table_3, the tray_1 is no longer at table_1 but is at table_3. </EFFECT> \n <PRECON> We can serve a gluten-free sandwich_8 to an allergic child_6 only if the sandwich_8 is on a tray_1 and the sandwich_8 is gluten-free. We can serve a regular sandwich_8 to a child_6 only if the tray_1 is at the table_3 where the child_6 is waiting. We can serve a gluten-free sandwich_8 to an allergic child_6 only if the child_6 is waiting for the sandwich_8 at the table_3. We can serve a gluten-free sandwich_8 to an allergic child_6 only if the child_6 is allergic to gluten. </PRECON> use tray_1 to serve gluten-free sandwich_8 to child_6 at table_3 <EFFECT> Once we serve a gluten-free sandwich_8 to an allergic child_6, the sandwich_8 is no longer on the tray_1. Once we serve a gluten-free sandwich_8 to an allergic child_6, we say the child_6 has been served. </EFFECT> \n <PRECON> We can make a regular sandwich_7 only if there is a bread_5 at kitchen. We can make a regular sandwich_7 only if there is a content_5 at kitchen. </PRECON> make a regular sandwich_7 using bread_5 and content_5 <EFFECT> Once we make a regular sandwich_7, the sandwich_7 is at kitchen. Once we make a regular sandwich_7, the bread_5 and content_5 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_3 to kitchen only if the tray_1 is at table_3. </PRECON> move tray_1 from table_3 to kitchen <EFFECT> Once we move a tray_1 from table_3 to kitchen, the tray_1 is no longer at table_3 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_7 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_7 on a tray_1 only if the sandwich_7 is at kitchen. </PRECON> put sandwich_7 on tray_1 <EFFECT> Once we put a sandwich_7 on a tray_1, the sandwich_7 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_1 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_1 <EFFECT> Once we move a tray_1 from kitchen to table_1, the tray_1 is no longer at kitchen but is at table_1. </EFFECT> \n <PRECON> We can serve a regular sandwich_7 to a child_5 only if the sandwich_7 is on a tray_1 and the tray_1 is at the table_1 where the child_5 is waiting. We can serve a regular sandwich_7 to a child_5 only if the child_5 is not allergic to gluten. We can serve a regular sandwich_7 to a child_5 only if the child is waiting for the sandwich_7 at the table_1. </PRECON> use tray_1 to serve regular sandwich_7 to child_5 at table_1 <EFFECT> Once we serve a regular sandwich_7 to a child_5, the sandwich_7 is no longer on the tray_1. Once we serve a regular sandwich_7 to a child_5, we say the child_5 has been served. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_1 only if the sandwich_1 is on a tray_1 and the tray_1 is at the table_2 where the child_1 is waiting. We can serve a regular sandwich_1 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_1 to a child_1 only if the child is waiting for the sandwich_1 at the table_2. </PRECON> use tray_1 to serve regular sandwich_1 to child_1 at table_2 <EFFECT> Once we serve a regular sandwich_1 to a child_1, the sandwich_1 is no longer on the tray_1. Once we serve a regular sandwich_1 to a child_1, we say the child_1 has been served. </EFFECT> WRONG \n <PRECON> We can put a sandwich_1 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_1 on a tray_1 only if the sandwich_1 is at kitchen. </PRECON> put sandwich_1 on tray_1 <EFFECT> Once we put a sandwich_1 on a tray_1, the sandwich_1 is no longer at kitchen but is on the tray_1. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_1 to table_2 only if the tray_1 is at table_1. </PRECON> move tray_1 from table_1 to table_2 <EFFECT> Once we move a tray_1 from table_1 to table_2, the tray_1 is no longer at table_1 but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_2 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. We can serve a regular sandwich_6 to a child_2 only if the child_2 is not allergic to gluten. We can serve a regular sandwich_6 to a child_2 only if the child is waiting for the sandwich_6 at the table_2. </PRECON> use tray_1 to serve regular sandwich_6 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_6 to a child_2, the sandwich_6 is no longer on the tray_1. Once we serve a regular sandwich_6 to a child_2, we say the child_2 has been served. </EFFECT> WRONG \n <PRECON> We can make a regular sandwich_1 only if there is a bread_2 at kitchen. We can make a regular sandwich_1 only if there is a content_3 at kitchen. </PRECON> make a regular sandwich_1 using bread_2 and content_3 <EFFECT> Once we make a regular sandwich_1, the sandwich_1 is at kitchen. Once we make a regular sandwich_1, the bread_2 and content_3 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_1 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_1 on a tray_1 only if the sandwich_1 is at kitchen. </PRECON> put sandwich_1 on tray_1 <EFFECT> Once we put a sandwich_1 on a tray_1, the sandwich_1 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to table_3 only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to table_3 <EFFECT> Once we move a tray_1 from table_2 to table_3, the tray_1 is no longer at table_2 but is at table_3. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_1 to a child_1 only if the sandwich_1 is on a tray_1 and the tray_1 is at the table_2 where the child_1 is waiting. We can serve a regular sandwich_1 to a child_1 only if the child_1 is not allergic to gluten. We can serve a regular sandwich_1 to a child_1 only if the child is waiting for the sandwich_1 at the table_2. </PRECON> use tray_1 to serve regular sandwich_1 to child_1 at table_2 <EFFECT> Once we serve a regular sandwich_1 to a child_1, the sandwich_1 is no longer on the tray_1. Once we serve a regular sandwich_1 to a child_1, we say the child_1 has been served. </EFFECT> \n <PRECON> We can make a regular sandwich_6 only if there is a bread_1 at kitchen. We can make a regular sandwich_6 only if there is a content_2 at kitchen. </PRECON> make a regular sandwich_6 using bread_1 and content_2 <EFFECT> Once we make a regular sandwich_6, the sandwich_6 is at kitchen. Once we make a regular sandwich_6, the bread_1 and content_2 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_2 to kitchen only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to kitchen <EFFECT> Once we move a tray_1 from table_2 to kitchen, the tray_1 is no longer at table_2 but is at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> WRONG \n <PRECON> We can put a sandwich_6 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_6 on a tray_1 only if the sandwich_6 is at kitchen. </PRECON> put sandwich_6 on tray_1 <EFFECT> Once we put a sandwich_6 on a tray_1, the sandwich_6 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_2 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_2 <EFFECT> Once we move a tray_1 from kitchen to table_2, the tray_1 is no longer at kitchen but is at table_2. </EFFECT> \n <PRECON> We can serve a regular sandwich_6 to a child_2 only if the sandwich_6 is on a tray_1 and the tray_1 is at the table_2 where the child_2 is waiting. We can serve a regular sandwich_6 to a child_2 only if the child_2 is not allergic to gluten. We can serve a regular sandwich_6 to a child_2 only if the child is waiting for the sandwich_6 at the table_2. </PRECON> use tray_1 to serve regular sandwich_6 to child_2 at table_2 <EFFECT> Once we serve a regular sandwich_6 to a child_2, the sandwich_6 is no longer on the tray_1. Once we serve a regular sandwich_6 to a child_2, we say the child_2 has been served. </EFFECT> \n <PRECON> We can serve a regular sandwich_5 to a child_3 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_3 where the child_3 is waiting. We can serve a regular sandwich_5 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_5 to a child_3 only if the child is waiting for the sandwich_5 at the table_3. </PRECON> use tray_1 to serve regular sandwich_5 to child_3 at table_3 <EFFECT> Once we serve a regular sandwich_5 to a child_3, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_3, we say the child_3 has been served. </EFFECT> WRONG \n <PRECON> We can move a tray_1 from table_2 to table_3 only if the tray_1 is at table_2. </PRECON> move tray_1 from table_2 to table_3 <EFFECT> Once we move a tray_1 from table_2 to table_3, the tray_1 is no longer at table_2 but is at table_3. </EFFECT> \n <PRECON> We can make a regular sandwich_5 only if there is a bread_4 at kitchen. We can make a regular sandwich_5 only if there is a content_4 at kitchen. </PRECON> make a regular sandwich_5 using bread_4 and content_4 <EFFECT> Once we make a regular sandwich_5, the sandwich_5 is at kitchen. Once we make a regular sandwich_5, the bread_4 and content_4 are no longer at kitchen. </EFFECT> \n <PRECON> We can move a tray_1 from table_3 to kitchen only if the tray_1 is at table_3. </PRECON> move tray_1 from table_3 to kitchen <EFFECT> Once we move a tray_1 from table_3 to kitchen, the tray_1 is no longer at table_3 but is at kitchen. </EFFECT> \n <PRECON> We can put a sandwich_5 on a tray_1 only if the tray_1 is also at kitchen. We can put a sandwich_5 on a tray_1 only if the sandwich_5 is at kitchen. </PRECON> put sandwich_5 on tray_1 <EFFECT> Once we put a sandwich_5 on a tray_1, the sandwich_5 is no longer at kitchen but is on the tray_1. </EFFECT> \n <PRECON> We can move a tray_1 from kitchen to table_3 only if the tray_1 is at kitchen. </PRECON> move tray_1 from kitchen to table_3 <EFFECT> Once we move a tray_1 from kitchen to table_3, the tray_1 is no longer at kitchen but is at table_3. </EFFECT> \n <PRECON> We can serve a regular sandwich_5 to a child_3 only if the sandwich_5 is on a tray_1 and the tray_1 is at the table_3 where the child_3 is waiting. We can serve a regular sandwich_5 to a child_3 only if the child_3 is not allergic to gluten. We can serve a regular sandwich_5 to a child_3 only if the child is waiting for the sandwich_5 at the table_3. </PRECON> use tray_1 to serve regular sandwich_5 to child_3 at table_3 <EFFECT> Once we serve a regular sandwich_5 to a child_3, the sandwich_5 is no longer on the tray_1. Once we serve a regular sandwich_5 to a child_3, we say the child_3 has been served. </EFFECT> \n</PLAN>"}
{"domain": "depots", "instance_id": "0", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the logistics of transporting crates between a number of depots and distributors via trucks that are loaded by hoists. Depots and distributors are directly connected by roads (trucks can drive between any two depots or distributors).\nA depot is a type of place.\nA distributor is a type of place.\nA pallet is a type of surface.\nA crate is a type of surface.\nHere are the actions that can be performed:\nDrive a truck from one place to another place.\nUse a hoist to lift a crate from a surface at a place.\nUse a hoist to drop a crate to a surface at a place.\nUse a hoist to load a crate into a truck at a place.\nUse a hoist to unload a crate from a truck at a place.\nThe following are the restrictions on the actions:\nA truck can be driven from one place to another place only if the truck is at the origin place.\nOnce a truck has been driven from one place to another, it is not at the origin place and is at the destination place.\nA crate can be lifted by a hoist only if the hoist is at the same place as the crate, the hoist is available, and the crate is clear.\nOnce a crate has been lifted by a hoist from a surface at a place, the crate is not at the place, the hoist is lifting the crate, the hoist is not available, the surface is clear, and the crate is not on the surface.\nA crate can be dropped by a hoist to a surface only if the hoist and surface are both at the place, the surface is clear, and the hoist is lifting the crate.\nOnce a crate has been dropped by a hoist to a surface at a place, the hoist is available, the hoist is not lifting the crate, the crate is at the place, the surface is not clear, the crate is clear, and the crate is on the surface.\nA crate can be loaded by a hoist onto a truck at a place only if the hoist is at the same place, the truck is at the same place, and the hoist is lifting the crate.\nOnce a crate has been loaded by a hoist onto a truck at a place.\nA crate can be unloaded by a hoist from a truck at a place only if the hoist is at the same place as the truck, the hoist is available, and the crate is in the truck.\nOnce a crate has been unloaded by a hoist from a truck at a place, the crate is not in the truck, the hoist is not available, and the hoist is lifting the crate.", "input": "As initial conditions I have that, hoist_0 is at depot_0, crate_0 is at distributor_1, hoist_2 is available, crate_1 is clear, pallet_3 is at distributor_1, crate_2 is clear, hoist_3 is available, truck_0 is at distributor_2, crate_3 is at depot_1, crate_1 is at distributor_2, pallet_0 is clear, hoist_2 is at distributor_0, pallet_4 is at distributor_2, pallet_0 is at depot_0, hoist_5 is available, crate_3 is on pallet_1, crate_1 is on pallet_4, crate_0 is on pallet_3, hoist_1 is at depot_1, hoist_1 is available, hoist_3 is at distributor_1, crate_2 is on crate_0, pallet_1 is at depot_1, pallet_2 is clear, hoist_4 is at distributor_2, hoist_0 is available, pallet_2 is at distributor_0, crate_3 is clear, crate_2 is at distributor_1, hoist_5 is at depot_1, truck_1 is at distributor_2, hoist_4 is available.\nMy goal is to have that crate_3 is on pallet_2, crate_0 is on pallet_1, crate_2 is on pallet_4, crate_1 is on pallet_3.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A crate_3 can be lifted by a hoist_1 only if the hoist_1 is at the same place depot_1 as the crate_3, the hoist_1 is available, and the crate_3 is clear. </PRECON> Use hoist_1 to lift crate_3 from pallet_1 at depot_1 <EFFECT> Once a crate_3 has been lifted by a hoist_1 from a pallet_1 at a place depot_1, the crate_3 is not at the place depot_1, the hoist_1 is lifting the crate_3, the hoist_1 is not available, the pallet_1 is clear, and the crate_3 is not on the pallet_1. </EFFECT> \n <PRECON> A truck_1 can be driven from distributor_2 to depot_1 only if the truck_1 is at the distributor_2. </PRECON> drive truck_1 from distributor_2 to depot_1 <EFFECT> Once a truck_1 has been driven from distributor_2 to depot_1, it is not at the origin distributor_2 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_3 can be loaded by a hoist_1 onto a truck_1 at a place depot_1 only if the hoist_1 is at the same place depot_1, the truck_1 is at the same place depot_1, and the hoist_1 is lifting the crate_3. </PRECON> Use hoist_1 to load crate_3 into truck_1 at depot_1 <EFFECT> Once a crate_3 has been loaded by a hoist_1 onto a truck_1 at a place depot_1. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_1 to distributor_1 only if the truck_0 is at the depot_1. </PRECON> drive truck_0 from depot_1 to distributor_1 <EFFECT> Once a truck_0 has been driven from depot_1 to distributor_1, it is not at the origin depot_1 and is at the destination distributor_1. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from distributor_2 to distributor_1 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to distributor_1 <EFFECT> Once a truck_0 has been driven from distributor_2 to distributor_1, it is not at the origin distributor_2 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_0 can be lifted by a hoist_3 only if the hoist_3 is at the same place distributor_1 as the crate_0, the hoist_3 is available, and the crate_0 is clear. </PRECON> Use hoist_3 to lift crate_0 from pallet_3 at distributor_1 <EFFECT> Once a crate_0 has been lifted by a hoist_3 from a pallet_3 at a place distributor_1, the crate_0 is not at the place distributor_1, the hoist_3 is lifting the crate_0, the hoist_3 is not available, the pallet_3 is clear, and the crate_0 is not on the pallet_3. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from depot_1 to distributor_0 only if the truck_1 is at the depot_1. </PRECON> drive truck_1 from depot_1 to distributor_0 <EFFECT> Once a truck_1 has been driven from depot_1 to distributor_0, it is not at the origin depot_1 and is at the destination distributor_0. </EFFECT> \n <PRECON> A crate_3 can be unloaded by a hoist_2 from a truck_1 at a place distributor_0 only if the hoist_2 is at the same place distributor_0 as the truck_1, the hoist_2 is available, and the crate_3 is in the truck_1. </PRECON> Use hoist_2 to unload crate_3 from truck_1 at distributor_0 <EFFECT> Once a crate_3 has been unloaded by a hoist_2 from a truck_1 at a place distributor_0, the crate_3 is not in the truck_1, the hoist_2 is not available, and the hoist_2 is lifting the crate_3. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_1 to distributor_1 only if the truck_0 is at the depot_1. </PRECON> drive truck_0 from depot_1 to distributor_1 <EFFECT> Once a truck_0 has been driven from depot_1 to distributor_1, it is not at the origin depot_1 and is at the destination distributor_1. </EFFECT> WRONG \n <PRECON> A crate_3 can be dropped by a hoist_2 to a pallet_2 only if the hoist_2 and pallet_2 are both at the place distributor_0, the pallet_2 is clear, and the hoist_2 is lifting the crate_3. </PRECON> Use hoist_2 to drop crate_3 to pallet_2 at distributor_0 <EFFECT> Once a crate_3 has been dropped by a hoist_2 to a pallet_2 at a place distributor_0, the hoist_2 is available, the hoist_2 is not lifting the crate_3, the crate_3 is at the place distributor_0, the pallet_2 is not clear, the crate_3 is clear, and the crate_3 is on the pallet_2. </EFFECT> \n <PRECON> A crate_2 can be lifted by a hoist_3 only if the hoist_3 is at the same place distributor_1 as the crate_2, the hoist_3 is available, and the crate_2 is clear. </PRECON> Use hoist_3 to lift crate_2 from crate_0 at distributor_1 <EFFECT> Once a crate_2 has been lifted by a hoist_3 from a crate_0 at a place distributor_1, the crate_2 is not at the place distributor_1, the hoist_3 is lifting the crate_2, the hoist_3 is not available, the crate_0 is clear, and the crate_2 is not on the crate_0. </EFFECT> \n <PRECON> A crate_2 can be loaded by a hoist_3 onto a truck_0 at a place distributor_1 only if the hoist_3 is at the same place distributor_1, the truck_0 is at the same place distributor_1, and the hoist_3 is lifting the crate_2. </PRECON> Use hoist_3 to load crate_2 into truck_0 at distributor_1 <EFFECT> Once a crate_2 has been loaded by a hoist_3 onto a truck_0 at a place distributor_1. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_3 to a pallet_3 only if the hoist_3 and pallet_3 are both at the place distributor_1, the pallet_3 is clear, and the hoist_3 is lifting the crate_1. </PRECON> Use hoist_3 to drop crate_1 to pallet_3 at distributor_1 <EFFECT> Once a crate_1 has been dropped by a hoist_3 to a pallet_3 at a place distributor_1, the hoist_3 is available, the hoist_3 is not lifting the crate_1, the crate_1 is at the place distributor_1, the pallet_3 is not clear, the crate_1 is clear, and the crate_1 is on the pallet_3. </EFFECT> WRONG \n <PRECON> A crate_0 can be lifted by a hoist_3 only if the hoist_3 is at the same place distributor_1 as the crate_0, the hoist_3 is available, and the crate_0 is clear. </PRECON> Use hoist_3 to lift crate_0 from pallet_3 at distributor_1 <EFFECT> Once a crate_0 has been lifted by a hoist_3 from a pallet_3 at a place distributor_1, the crate_0 is not at the place distributor_1, the hoist_3 is lifting the crate_0, the hoist_3 is not available, the pallet_3 is clear, and the crate_0 is not on the pallet_3. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_3 from a truck_0 at a place distributor_1 only if the hoist_3 is at the same place distributor_1 as the truck_0, the hoist_3 is available, and the crate_1 is in the truck_0. </PRECON> Use hoist_3 to unload crate_1 from truck_0 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_3 from a truck_0 at a place distributor_1, the crate_1 is not in the truck_0, the hoist_3 is not available, and the hoist_3 is lifting the crate_1. </EFFECT> WRONG \n <PRECON> A crate_0 can be loaded by a hoist_3 onto a truck_0 at a place distributor_1 only if the hoist_3 is at the same place distributor_1, the truck_0 is at the same place distributor_1, and the hoist_3 is lifting the crate_0. </PRECON> Use hoist_3 to load crate_0 into truck_0 at distributor_1 <EFFECT> Once a crate_0 has been loaded by a hoist_3 onto a truck_0 at a place distributor_1. </EFFECT> \n <PRECON> A crate_1 can be lifted by a hoist_4 only if the hoist_4 is at the same place distributor_2 as the crate_1, the hoist_4 is available, and the crate_1 is clear. </PRECON> Use hoist_4 to lift crate_1 from pallet_4 at distributor_2 <EFFECT> Once a crate_1 has been lifted by a hoist_4 from a pallet_4 at a place distributor_2, the crate_1 is not at the place distributor_2, the hoist_4 is lifting the crate_1, the hoist_4 is not available, the pallet_4 is clear, and the crate_1 is not on the pallet_4. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_1 to depot_1 only if the truck_0 is at the distributor_1. </PRECON> drive truck_0 from distributor_1 to depot_1 <EFFECT> Once a truck_0 has been driven from distributor_1 to depot_1, it is not at the origin distributor_1 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_0 can be unloaded by a hoist_5 from a truck_0 at a place depot_1 only if the hoist_5 is at the same place depot_1 as the truck_0, the hoist_5 is available, and the crate_0 is in the truck_0. </PRECON> Use hoist_5 to unload crate_0 from truck_0 at depot_1 <EFFECT> Once a crate_0 has been unloaded by a hoist_5 from a truck_0 at a place depot_1, the crate_0 is not in the truck_0, the hoist_5 is not available, and the hoist_5 is lifting the crate_0. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_4 to a pallet_4 only if the hoist_4 and pallet_4 are both at the place distributor_2, the pallet_4 is clear, and the hoist_4 is lifting the crate_2. </PRECON> Use hoist_4 to drop crate_2 to pallet_4 at distributor_2 <EFFECT> Once a crate_2 has been dropped by a hoist_4 to a pallet_4 at a place distributor_2, the hoist_4 is available, the hoist_4 is not lifting the crate_2, the crate_2 is at the place distributor_2, the pallet_4 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_4. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from distributor_1 to distributor_2 only if the truck_0 is at the distributor_1. </PRECON> drive truck_0 from distributor_1 to distributor_2 <EFFECT> Once a truck_0 has been driven from distributor_1 to distributor_2, it is not at the origin distributor_1 and is at the destination distributor_2. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from depot_1 to distributor_1 only if the truck_0 is at the depot_1. </PRECON> drive truck_0 from depot_1 to distributor_1 <EFFECT> Once a truck_0 has been driven from depot_1 to distributor_1, it is not at the origin depot_1 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_0 can be dropped by a hoist_5 to a pallet_1 only if the hoist_5 and pallet_1 are both at the place depot_1, the pallet_1 is clear, and the hoist_5 is lifting the crate_0. </PRECON> Use hoist_5 to drop crate_0 to pallet_1 at depot_1 <EFFECT> Once a crate_0 has been dropped by a hoist_5 to a pallet_1 at a place depot_1, the hoist_5 is available, the hoist_5 is not lifting the crate_0, the crate_0 is at the place depot_1, the pallet_1 is not clear, the crate_0 is clear, and the crate_0 is on the pallet_1. </EFFECT> \n <PRECON> A crate_1 can be loaded by a hoist_4 onto a truck_0 at a place distributor_2 only if the hoist_4 is at the same place distributor_2, the truck_0 is at the same place distributor_2, and the hoist_4 is lifting the crate_1. </PRECON> Use hoist_4 to load crate_1 into truck_0 at distributor_2 <EFFECT> Once a crate_1 has been loaded by a hoist_4 onto a truck_0 at a place distributor_2. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from distributor_1 to distributor_2 only if the truck_0 is at the distributor_1. </PRECON> drive truck_0 from distributor_1 to distributor_2 <EFFECT> Once a truck_0 has been driven from distributor_1 to distributor_2, it is not at the origin distributor_1 and is at the destination distributor_2. </EFFECT> \n <PRECON> A crate_1 can be loaded by a hoist_4 onto a truck_0 at a place distributor_2 only if the hoist_4 is at the same place distributor_2, the truck_0 is at the same place distributor_2, and the hoist_4 is lifting the crate_1. </PRECON> Use hoist_4 to load crate_1 into truck_0 at distributor_2 <EFFECT> Once a crate_1 has been loaded by a hoist_4 onto a truck_0 at a place distributor_2. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_4 from a truck_0 at a place distributor_2 only if the hoist_4 is at the same place distributor_2 as the truck_0, the hoist_4 is available, and the crate_2 is in the truck_0. </PRECON> Use hoist_4 to unload crate_2 from truck_0 at distributor_2 <EFFECT> Once a crate_2 has been unloaded by a hoist_4 from a truck_0 at a place distributor_2, the crate_2 is not in the truck_0, the hoist_4 is not available, and the hoist_4 is lifting the crate_2. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_2 to distributor_1 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to distributor_1 <EFFECT> Once a truck_0 has been driven from distributor_2 to distributor_1, it is not at the origin distributor_2 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_3 from a truck_0 at a place distributor_1 only if the hoist_3 is at the same place distributor_1 as the truck_0, the hoist_3 is available, and the crate_1 is in the truck_0. </PRECON> Use hoist_3 to unload crate_1 from truck_0 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_3 from a truck_0 at a place distributor_1, the crate_1 is not in the truck_0, the hoist_3 is not available, and the hoist_3 is lifting the crate_1. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_3 to a pallet_3 only if the hoist_3 and pallet_3 are both at the place distributor_1, the pallet_3 is clear, and the hoist_3 is lifting the crate_1. </PRECON> Use hoist_3 to drop crate_1 to pallet_3 at distributor_1 <EFFECT> Once a crate_1 has been dropped by a hoist_3 to a pallet_3 at a place distributor_1, the hoist_3 is available, the hoist_3 is not lifting the crate_1, the crate_1 is at the place distributor_1, the pallet_3 is not clear, the crate_1 is clear, and the crate_1 is on the pallet_3. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_4 to a pallet_4 only if the hoist_4 and pallet_4 are both at the place distributor_2, the pallet_4 is clear, and the hoist_4 is lifting the crate_2. </PRECON> Use hoist_4 to drop crate_2 to pallet_4 at distributor_2 <EFFECT> Once a crate_2 has been dropped by a hoist_4 to a pallet_4 at a place distributor_2, the hoist_4 is available, the hoist_4 is not lifting the crate_2, the crate_2 is at the place distributor_2, the pallet_4 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_4. </EFFECT> \n</PLAN>", "plan_length": 23, "raw_plan": ["(lift hoist1 crate3 pallet1 depot1)", "(drive truck1 distributor2 depot1)", "(load hoist1 crate3 truck1 depot1)", "(drive truck0 distributor2 distributor1)", "(drive truck1 depot1 distributor0)", "(unload hoist2 crate3 truck1 distributor0)", "(drop hoist2 crate3 pallet2 distributor0)", "(lift hoist3 crate2 crate0 distributor1)", "(load hoist3 crate2 truck0 distributor1)", "(lift hoist3 crate0 pallet3 distributor1)", "(load hoist3 crate0 truck0 distributor1)", "(lift hoist4 crate1 pallet4 distributor2)", "(drive truck0 distributor1 depot1)", "(unload hoist5 crate0 truck0 depot1)", "(drive truck0 depot1 distributor1)", "(drop hoist5 crate0 pallet1 depot1)", "(drive truck0 distributor1 distributor2)", "(load hoist4 crate1 truck0 distributor2)", "(unload hoist4 crate2 truck0 distributor2)", "(drive truck0 distributor2 distributor1)", "(unload hoist3 crate1 truck0 distributor1)", "(drop hoist3 crate1 pallet3 distributor1)", "(drop hoist4 crate2 pallet4 distributor2)"], "full_text_prompt": "I have to plan the logistics of transporting crates between a number of depots and distributors via trucks that are loaded by hoists. Depots and distributors are directly connected by roads (trucks can drive between any two depots or distributors).\nA depot is a type of place.\nA distributor is a type of place.\nA pallet is a type of surface.\nA crate is a type of surface.\nHere are the actions that can be performed:\nDrive a truck from one place to another place.\nUse a hoist to lift a crate from a surface at a place.\nUse a hoist to drop a crate to a surface at a place.\nUse a hoist to load a crate into a truck at a place.\nUse a hoist to unload a crate from a truck at a place.\nThe following are the restrictions on the actions:\nA truck can be driven from one place to another place only if the truck is at the origin place.\nOnce a truck has been driven from one place to another, it is not at the origin place and is at the destination place.\nA crate can be lifted by a hoist only if the hoist is at the same place as the crate, the hoist is available, and the crate is clear.\nOnce a crate has been lifted by a hoist from a surface at a place, the crate is not at the place, the hoist is lifting the crate, the hoist is not available, the surface is clear, and the crate is not on the surface.\nA crate can be dropped by a hoist to a surface only if the hoist and surface are both at the place, the surface is clear, and the hoist is lifting the crate.\nOnce a crate has been dropped by a hoist to a surface at a place, the hoist is available, the hoist is not lifting the crate, the crate is at the place, the surface is not clear, the crate is clear, and the crate is on the surface.\nA crate can be loaded by a hoist onto a truck at a place only if the hoist is at the same place, the truck is at the same place, and the hoist is lifting the crate.\nOnce a crate has been loaded by a hoist onto a truck at a place.\nA crate can be unloaded by a hoist from a truck at a place only if the hoist is at the same place as the truck, the hoist is available, and the crate is in the truck.\nOnce a crate has been unloaded by a hoist from a truck at a place, the crate is not in the truck, the hoist is not available, and the hoist is lifting the crate.As initial conditions I have that, hoist_0 is at depot_0, crate_0 is at distributor_1, hoist_2 is available, crate_1 is clear, pallet_3 is at distributor_1, crate_2 is clear, hoist_3 is available, truck_0 is at distributor_2, crate_3 is at depot_1, crate_1 is at distributor_2, pallet_0 is clear, hoist_2 is at distributor_0, pallet_4 is at distributor_2, pallet_0 is at depot_0, hoist_5 is available, crate_3 is on pallet_1, crate_1 is on pallet_4, crate_0 is on pallet_3, hoist_1 is at depot_1, hoist_1 is available, hoist_3 is at distributor_1, crate_2 is on crate_0, pallet_1 is at depot_1, pallet_2 is clear, hoist_4 is at distributor_2, hoist_0 is available, pallet_2 is at distributor_0, crate_3 is clear, crate_2 is at distributor_1, hoist_5 is at depot_1, truck_1 is at distributor_2, hoist_4 is available.My goal is to have that crate_3 is on pallet_2, crate_0 is on pallet_1, crate_2 is on pallet_4, crate_1 is on pallet_3.My plan is as follows:\n<PLAN>\n <PRECON> A crate_3 can be lifted by a hoist_1 only if the hoist_1 is at the same place depot_1 as the crate_3, the hoist_1 is available, and the crate_3 is clear. </PRECON> Use hoist_1 to lift crate_3 from pallet_1 at depot_1 <EFFECT> Once a crate_3 has been lifted by a hoist_1 from a pallet_1 at a place depot_1, the crate_3 is not at the place depot_1, the hoist_1 is lifting the crate_3, the hoist_1 is not available, the pallet_1 is clear, and the crate_3 is not on the pallet_1. </EFFECT> \n <PRECON> A truck_1 can be driven from distributor_2 to depot_1 only if the truck_1 is at the distributor_2. </PRECON> drive truck_1 from distributor_2 to depot_1 <EFFECT> Once a truck_1 has been driven from distributor_2 to depot_1, it is not at the origin distributor_2 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_3 can be loaded by a hoist_1 onto a truck_1 at a place depot_1 only if the hoist_1 is at the same place depot_1, the truck_1 is at the same place depot_1, and the hoist_1 is lifting the crate_3. </PRECON> Use hoist_1 to load crate_3 into truck_1 at depot_1 <EFFECT> Once a crate_3 has been loaded by a hoist_1 onto a truck_1 at a place depot_1. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_1 to distributor_1 only if the truck_0 is at the depot_1. </PRECON> drive truck_0 from depot_1 to distributor_1 <EFFECT> Once a truck_0 has been driven from depot_1 to distributor_1, it is not at the origin depot_1 and is at the destination distributor_1. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from distributor_2 to distributor_1 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to distributor_1 <EFFECT> Once a truck_0 has been driven from distributor_2 to distributor_1, it is not at the origin distributor_2 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_0 can be lifted by a hoist_3 only if the hoist_3 is at the same place distributor_1 as the crate_0, the hoist_3 is available, and the crate_0 is clear. </PRECON> Use hoist_3 to lift crate_0 from pallet_3 at distributor_1 <EFFECT> Once a crate_0 has been lifted by a hoist_3 from a pallet_3 at a place distributor_1, the crate_0 is not at the place distributor_1, the hoist_3 is lifting the crate_0, the hoist_3 is not available, the pallet_3 is clear, and the crate_0 is not on the pallet_3. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from depot_1 to distributor_0 only if the truck_1 is at the depot_1. </PRECON> drive truck_1 from depot_1 to distributor_0 <EFFECT> Once a truck_1 has been driven from depot_1 to distributor_0, it is not at the origin depot_1 and is at the destination distributor_0. </EFFECT> \n <PRECON> A crate_3 can be unloaded by a hoist_2 from a truck_1 at a place distributor_0 only if the hoist_2 is at the same place distributor_0 as the truck_1, the hoist_2 is available, and the crate_3 is in the truck_1. </PRECON> Use hoist_2 to unload crate_3 from truck_1 at distributor_0 <EFFECT> Once a crate_3 has been unloaded by a hoist_2 from a truck_1 at a place distributor_0, the crate_3 is not in the truck_1, the hoist_2 is not available, and the hoist_2 is lifting the crate_3. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_1 to distributor_1 only if the truck_0 is at the depot_1. </PRECON> drive truck_0 from depot_1 to distributor_1 <EFFECT> Once a truck_0 has been driven from depot_1 to distributor_1, it is not at the origin depot_1 and is at the destination distributor_1. </EFFECT> WRONG \n <PRECON> A crate_3 can be dropped by a hoist_2 to a pallet_2 only if the hoist_2 and pallet_2 are both at the place distributor_0, the pallet_2 is clear, and the hoist_2 is lifting the crate_3. </PRECON> Use hoist_2 to drop crate_3 to pallet_2 at distributor_0 <EFFECT> Once a crate_3 has been dropped by a hoist_2 to a pallet_2 at a place distributor_0, the hoist_2 is available, the hoist_2 is not lifting the crate_3, the crate_3 is at the place distributor_0, the pallet_2 is not clear, the crate_3 is clear, and the crate_3 is on the pallet_2. </EFFECT> \n <PRECON> A crate_2 can be lifted by a hoist_3 only if the hoist_3 is at the same place distributor_1 as the crate_2, the hoist_3 is available, and the crate_2 is clear. </PRECON> Use hoist_3 to lift crate_2 from crate_0 at distributor_1 <EFFECT> Once a crate_2 has been lifted by a hoist_3 from a crate_0 at a place distributor_1, the crate_2 is not at the place distributor_1, the hoist_3 is lifting the crate_2, the hoist_3 is not available, the crate_0 is clear, and the crate_2 is not on the crate_0. </EFFECT> \n <PRECON> A crate_2 can be loaded by a hoist_3 onto a truck_0 at a place distributor_1 only if the hoist_3 is at the same place distributor_1, the truck_0 is at the same place distributor_1, and the hoist_3 is lifting the crate_2. </PRECON> Use hoist_3 to load crate_2 into truck_0 at distributor_1 <EFFECT> Once a crate_2 has been loaded by a hoist_3 onto a truck_0 at a place distributor_1. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_3 to a pallet_3 only if the hoist_3 and pallet_3 are both at the place distributor_1, the pallet_3 is clear, and the hoist_3 is lifting the crate_1. </PRECON> Use hoist_3 to drop crate_1 to pallet_3 at distributor_1 <EFFECT> Once a crate_1 has been dropped by a hoist_3 to a pallet_3 at a place distributor_1, the hoist_3 is available, the hoist_3 is not lifting the crate_1, the crate_1 is at the place distributor_1, the pallet_3 is not clear, the crate_1 is clear, and the crate_1 is on the pallet_3. </EFFECT> WRONG \n <PRECON> A crate_0 can be lifted by a hoist_3 only if the hoist_3 is at the same place distributor_1 as the crate_0, the hoist_3 is available, and the crate_0 is clear. </PRECON> Use hoist_3 to lift crate_0 from pallet_3 at distributor_1 <EFFECT> Once a crate_0 has been lifted by a hoist_3 from a pallet_3 at a place distributor_1, the crate_0 is not at the place distributor_1, the hoist_3 is lifting the crate_0, the hoist_3 is not available, the pallet_3 is clear, and the crate_0 is not on the pallet_3. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_3 from a truck_0 at a place distributor_1 only if the hoist_3 is at the same place distributor_1 as the truck_0, the hoist_3 is available, and the crate_1 is in the truck_0. </PRECON> Use hoist_3 to unload crate_1 from truck_0 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_3 from a truck_0 at a place distributor_1, the crate_1 is not in the truck_0, the hoist_3 is not available, and the hoist_3 is lifting the crate_1. </EFFECT> WRONG \n <PRECON> A crate_0 can be loaded by a hoist_3 onto a truck_0 at a place distributor_1 only if the hoist_3 is at the same place distributor_1, the truck_0 is at the same place distributor_1, and the hoist_3 is lifting the crate_0. </PRECON> Use hoist_3 to load crate_0 into truck_0 at distributor_1 <EFFECT> Once a crate_0 has been loaded by a hoist_3 onto a truck_0 at a place distributor_1. </EFFECT> \n <PRECON> A crate_1 can be lifted by a hoist_4 only if the hoist_4 is at the same place distributor_2 as the crate_1, the hoist_4 is available, and the crate_1 is clear. </PRECON> Use hoist_4 to lift crate_1 from pallet_4 at distributor_2 <EFFECT> Once a crate_1 has been lifted by a hoist_4 from a pallet_4 at a place distributor_2, the crate_1 is not at the place distributor_2, the hoist_4 is lifting the crate_1, the hoist_4 is not available, the pallet_4 is clear, and the crate_1 is not on the pallet_4. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_1 to depot_1 only if the truck_0 is at the distributor_1. </PRECON> drive truck_0 from distributor_1 to depot_1 <EFFECT> Once a truck_0 has been driven from distributor_1 to depot_1, it is not at the origin distributor_1 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_0 can be unloaded by a hoist_5 from a truck_0 at a place depot_1 only if the hoist_5 is at the same place depot_1 as the truck_0, the hoist_5 is available, and the crate_0 is in the truck_0. </PRECON> Use hoist_5 to unload crate_0 from truck_0 at depot_1 <EFFECT> Once a crate_0 has been unloaded by a hoist_5 from a truck_0 at a place depot_1, the crate_0 is not in the truck_0, the hoist_5 is not available, and the hoist_5 is lifting the crate_0. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_4 to a pallet_4 only if the hoist_4 and pallet_4 are both at the place distributor_2, the pallet_4 is clear, and the hoist_4 is lifting the crate_2. </PRECON> Use hoist_4 to drop crate_2 to pallet_4 at distributor_2 <EFFECT> Once a crate_2 has been dropped by a hoist_4 to a pallet_4 at a place distributor_2, the hoist_4 is available, the hoist_4 is not lifting the crate_2, the crate_2 is at the place distributor_2, the pallet_4 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_4. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from distributor_1 to distributor_2 only if the truck_0 is at the distributor_1. </PRECON> drive truck_0 from distributor_1 to distributor_2 <EFFECT> Once a truck_0 has been driven from distributor_1 to distributor_2, it is not at the origin distributor_1 and is at the destination distributor_2. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from depot_1 to distributor_1 only if the truck_0 is at the depot_1. </PRECON> drive truck_0 from depot_1 to distributor_1 <EFFECT> Once a truck_0 has been driven from depot_1 to distributor_1, it is not at the origin depot_1 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_0 can be dropped by a hoist_5 to a pallet_1 only if the hoist_5 and pallet_1 are both at the place depot_1, the pallet_1 is clear, and the hoist_5 is lifting the crate_0. </PRECON> Use hoist_5 to drop crate_0 to pallet_1 at depot_1 <EFFECT> Once a crate_0 has been dropped by a hoist_5 to a pallet_1 at a place depot_1, the hoist_5 is available, the hoist_5 is not lifting the crate_0, the crate_0 is at the place depot_1, the pallet_1 is not clear, the crate_0 is clear, and the crate_0 is on the pallet_1. </EFFECT> \n <PRECON> A crate_1 can be loaded by a hoist_4 onto a truck_0 at a place distributor_2 only if the hoist_4 is at the same place distributor_2, the truck_0 is at the same place distributor_2, and the hoist_4 is lifting the crate_1. </PRECON> Use hoist_4 to load crate_1 into truck_0 at distributor_2 <EFFECT> Once a crate_1 has been loaded by a hoist_4 onto a truck_0 at a place distributor_2. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from distributor_1 to distributor_2 only if the truck_0 is at the distributor_1. </PRECON> drive truck_0 from distributor_1 to distributor_2 <EFFECT> Once a truck_0 has been driven from distributor_1 to distributor_2, it is not at the origin distributor_1 and is at the destination distributor_2. </EFFECT> \n <PRECON> A crate_1 can be loaded by a hoist_4 onto a truck_0 at a place distributor_2 only if the hoist_4 is at the same place distributor_2, the truck_0 is at the same place distributor_2, and the hoist_4 is lifting the crate_1. </PRECON> Use hoist_4 to load crate_1 into truck_0 at distributor_2 <EFFECT> Once a crate_1 has been loaded by a hoist_4 onto a truck_0 at a place distributor_2. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_4 from a truck_0 at a place distributor_2 only if the hoist_4 is at the same place distributor_2 as the truck_0, the hoist_4 is available, and the crate_2 is in the truck_0. </PRECON> Use hoist_4 to unload crate_2 from truck_0 at distributor_2 <EFFECT> Once a crate_2 has been unloaded by a hoist_4 from a truck_0 at a place distributor_2, the crate_2 is not in the truck_0, the hoist_4 is not available, and the hoist_4 is lifting the crate_2. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_2 to distributor_1 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to distributor_1 <EFFECT> Once a truck_0 has been driven from distributor_2 to distributor_1, it is not at the origin distributor_2 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_3 from a truck_0 at a place distributor_1 only if the hoist_3 is at the same place distributor_1 as the truck_0, the hoist_3 is available, and the crate_1 is in the truck_0. </PRECON> Use hoist_3 to unload crate_1 from truck_0 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_3 from a truck_0 at a place distributor_1, the crate_1 is not in the truck_0, the hoist_3 is not available, and the hoist_3 is lifting the crate_1. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_3 to a pallet_3 only if the hoist_3 and pallet_3 are both at the place distributor_1, the pallet_3 is clear, and the hoist_3 is lifting the crate_1. </PRECON> Use hoist_3 to drop crate_1 to pallet_3 at distributor_1 <EFFECT> Once a crate_1 has been dropped by a hoist_3 to a pallet_3 at a place distributor_1, the hoist_3 is available, the hoist_3 is not lifting the crate_1, the crate_1 is at the place distributor_1, the pallet_3 is not clear, the crate_1 is clear, and the crate_1 is on the pallet_3. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_4 to a pallet_4 only if the hoist_4 and pallet_4 are both at the place distributor_2, the pallet_4 is clear, and the hoist_4 is lifting the crate_2. </PRECON> Use hoist_4 to drop crate_2 to pallet_4 at distributor_2 <EFFECT> Once a crate_2 has been dropped by a hoist_4 to a pallet_4 at a place distributor_2, the hoist_4 is available, the hoist_4 is not lifting the crate_2, the crate_2 is at the place distributor_2, the pallet_4 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_4. </EFFECT> \n</PLAN>"}
{"domain": "depots", "instance_id": "40", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the logistics of transporting crates between a number of depots and distributors via trucks that are loaded by hoists. Depots and distributors are directly connected by roads (trucks can drive between any two depots or distributors).\nA depot is a type of place.\nA distributor is a type of place.\nA pallet is a type of surface.\nA crate is a type of surface.\nHere are the actions that can be performed:\nDrive a truck from one place to another place.\nUse a hoist to lift a crate from a surface at a place.\nUse a hoist to drop a crate to a surface at a place.\nUse a hoist to load a crate into a truck at a place.\nUse a hoist to unload a crate from a truck at a place.\nThe following are the restrictions on the actions:\nA truck can be driven from one place to another place only if the truck is at the origin place.\nOnce a truck has been driven from one place to another, it is not at the origin place and is at the destination place.\nA crate can be lifted by a hoist only if the hoist is at the same place as the crate, the hoist is available, and the crate is clear.\nOnce a crate has been lifted by a hoist from a surface at a place, the crate is not at the place, the hoist is lifting the crate, the hoist is not available, the surface is clear, and the crate is not on the surface.\nA crate can be dropped by a hoist to a surface only if the hoist and surface are both at the place, the surface is clear, and the hoist is lifting the crate.\nOnce a crate has been dropped by a hoist to a surface at a place, the hoist is available, the hoist is not lifting the crate, the crate is at the place, the surface is not clear, the crate is clear, and the crate is on the surface.\nA crate can be loaded by a hoist onto a truck at a place only if the hoist is at the same place, the truck is at the same place, and the hoist is lifting the crate.\nOnce a crate has been loaded by a hoist onto a truck at a place.\nA crate can be unloaded by a hoist from a truck at a place only if the hoist is at the same place as the truck, the hoist is available, and the crate is in the truck.\nOnce a crate has been unloaded by a hoist from a truck at a place, the crate is not in the truck, the hoist is not available, and the hoist is lifting the crate.", "input": "As initial conditions I have that, crate_0 is on pallet_7, crate_4 is on pallet_1, hoist_5 is available, crate_4 is at depot_1, hoist_5 is at depot_5, hoist_6 is available, pallet_7 is at distributor_1, hoist_3 is at depot_3, crate_6 is at distributor_0, truck_4 is at distributor_2, truck_5 is at distributor_4, hoist_8 is at distributor_2, hoist_1 is at depot_1, crate_5 is at depot_0, pallet_10 is at distributor_4, pallet_5 is clear, pallet_8 is at distributor_2, hoist_2 is at depot_2, pallet_0 is at depot_0, hoist_7 is at distributor_1, hoist_2 is available, pallet_6 is at distributor_0, crate_3 is at distributor_0, crate_0 is clear, pallet_1 is at depot_1, pallet_4 is clear, crate_5 is clear, crate_2 is at depot_3, truck_2 is at depot_2, hoist_9 is available, crate_5 is on pallet_0, crate_1 is on pallet_3, crate_2 is on crate_1, truck_3 is at distributor_4, truck_0 is at distributor_2, hoist_9 is at distributor_3, pallet_9 is clear, crate_3 is on pallet_6, hoist_4 is at depot_4, hoist_0 is at depot_0, pallet_10 is clear, pallet_4 is at depot_4, crate_6 is clear, hoist_6 is at distributor_0, crate_4 is clear, pallet_2 is clear, crate_0 is at distributor_1, pallet_3 is at depot_3, hoist_10 is available, pallet_2 is at depot_2, hoist_10 is at distributor_4, crate_2 is clear, crate_1 is at depot_3, hoist_4 is available, hoist_0 is available, crate_6 is on crate_3, pallet_8 is clear, pallet_9 is at distributor_3, hoist_7 is available, pallet_5 is at depot_5, hoist_3 is available, hoist_1 is available, hoist_8 is available, truck_1 is at depot_0.\nMy goal is to have that crate_2 is on pallet_10, crate_4 is on pallet_5, crate_6 is on pallet_8, crate_0 is on crate_4, crate_5 is on pallet_4.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A truck_5 can be driven from distributor_4 to depot_1 only if the truck_5 is at the distributor_4. </PRECON> drive truck_5 from distributor_4 to depot_1 <EFFECT> Once a truck_5 has been driven from distributor_4 to depot_1, it is not at the origin distributor_4 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_5 can be lifted by a hoist_0 only if the hoist_0 is at the same place depot_0 as the crate_5, the hoist_0 is available, and the crate_5 is clear. </PRECON> Use hoist_0 to lift crate_5 from pallet_0 at depot_0 <EFFECT> Once a crate_5 has been lifted by a hoist_0 from a pallet_0 at a place depot_0, the crate_5 is not at the place depot_0, the hoist_0 is lifting the crate_5, the hoist_0 is not available, the pallet_0 is clear, and the crate_5 is not on the pallet_0. </EFFECT> \n <PRECON> A crate_5 can be loaded by a hoist_0 onto a truck_1 at a place depot_0 only if the hoist_0 is at the same place depot_0, the truck_1 is at the same place depot_0, and the hoist_0 is lifting the crate_5. </PRECON> Use hoist_0 to load crate_5 into truck_1 at depot_0 <EFFECT> Once a crate_5 has been loaded by a hoist_0 onto a truck_1 at a place depot_0. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_0 to depot_4 only if the truck_1 is at the depot_0. </PRECON> drive truck_1 from depot_0 to depot_4 <EFFECT> Once a truck_1 has been driven from depot_0 to depot_4, it is not at the origin depot_0 and is at the destination depot_4. </EFFECT> \n <PRECON> A crate_5 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_5 is in the truck_1. </PRECON> Use hoist_4 to unload crate_5 from truck_1 at depot_4 <EFFECT> Once a crate_5 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_5 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_5. </EFFECT> \n <PRECON> A crate_6 can be loaded by a hoist_6 onto a truck_0 at a place distributor_0 only if the hoist_6 is at the same place distributor_0, the truck_0 is at the same place distributor_0, and the hoist_6 is lifting the crate_6. </PRECON> Use hoist_6 to load crate_6 into truck_0 at distributor_0 <EFFECT> Once a crate_6 has been loaded by a hoist_6 onto a truck_0 at a place distributor_0. </EFFECT> WRONG \n <PRECON> A crate_5 can be dropped by a hoist_4 to a pallet_4 only if the hoist_4 and pallet_4 are both at the place depot_4, the pallet_4 is clear, and the hoist_4 is lifting the crate_5. </PRECON> Use hoist_4 to drop crate_5 to pallet_4 at depot_4 <EFFECT> Once a crate_5 has been dropped by a hoist_4 to a pallet_4 at a place depot_4, the hoist_4 is available, the hoist_4 is not lifting the crate_5, the crate_5 is at the place depot_4, the pallet_4 is not clear, the crate_5 is clear, and the crate_5 is on the pallet_4. </EFFECT> \n <PRECON> A truck_3 can be driven from distributor_4 to depot_3 only if the truck_3 is at the distributor_4. </PRECON> drive truck_3 from distributor_4 to depot_3 <EFFECT> Once a truck_3 has been driven from distributor_4 to depot_3, it is not at the origin distributor_4 and is at the destination depot_3. </EFFECT> WRONG \n <PRECON> A crate_2 can be lifted by a hoist_3 only if the hoist_3 is at the same place depot_3 as the crate_2, the hoist_3 is available, and the crate_2 is clear. </PRECON> Use hoist_3 to lift crate_2 from crate_1 at depot_3 <EFFECT> Once a crate_2 has been lifted by a hoist_3 from a crate_1 at a place depot_3, the crate_2 is not at the place depot_3, the hoist_3 is lifting the crate_2, the hoist_3 is not available, the crate_1 is clear, and the crate_2 is not on the crate_1. </EFFECT> \n <PRECON> A crate_6 can be lifted by a hoist_6 only if the hoist_6 is at the same place distributor_0 as the crate_6, the hoist_6 is available, and the crate_6 is clear. </PRECON> Use hoist_6 to lift crate_6 from crate_3 at distributor_0 <EFFECT> Once a crate_6 has been lifted by a hoist_6 from a crate_3 at a place distributor_0, the crate_6 is not at the place distributor_0, the hoist_6 is lifting the crate_6, the hoist_6 is not available, the crate_3 is clear, and the crate_6 is not on the crate_3. </EFFECT> \n <PRECON> A crate_0 can be lifted by a hoist_7 only if the hoist_7 is at the same place distributor_1 as the crate_0, the hoist_7 is available, and the crate_0 is clear. </PRECON> Use hoist_7 to lift crate_0 from pallet_7 at distributor_1 <EFFECT> Once a crate_0 has been lifted by a hoist_7 from a pallet_7 at a place distributor_1, the crate_0 is not at the place distributor_1, the hoist_7 is lifting the crate_0, the hoist_7 is not available, the pallet_7 is clear, and the crate_0 is not on the pallet_7. </EFFECT> \n <PRECON> A truck_5 can be driven from depot_1 to distributor_1 only if the truck_5 is at the depot_1. </PRECON> drive truck_5 from depot_1 to distributor_1 <EFFECT> Once a truck_5 has been driven from depot_1 to distributor_1, it is not at the origin depot_1 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_10 to a pallet_10 only if the hoist_10 and pallet_10 are both at the place distributor_4, the pallet_10 is clear, and the hoist_10 is lifting the crate_2. </PRECON> Use hoist_10 to drop crate_2 to pallet_10 at distributor_4 <EFFECT> Once a crate_2 has been dropped by a hoist_10 to a pallet_10 at a place distributor_4, the hoist_10 is available, the hoist_10 is not lifting the crate_2, the crate_2 is at the place distributor_4, the pallet_10 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_10. </EFFECT> WRONG \n <PRECON> A truck_3 can be driven from distributor_4 to depot_3 only if the truck_3 is at the distributor_4. </PRECON> drive truck_3 from distributor_4 to depot_3 <EFFECT> Once a truck_3 has been driven from distributor_4 to depot_3, it is not at the origin distributor_4 and is at the destination depot_3. </EFFECT> WRONG \n <PRECON> A crate_0 can be loaded by a hoist_7 onto a truck_5 at a place distributor_1 only if the hoist_7 is at the same place distributor_1, the truck_5 is at the same place distributor_1, and the hoist_7 is lifting the crate_0. </PRECON> Use hoist_7 to load crate_0 into truck_5 at distributor_1 <EFFECT> Once a crate_0 has been loaded by a hoist_7 onto a truck_5 at a place distributor_1. </EFFECT> \n <PRECON> A truck_5 can be driven from distributor_1 to depot_1 only if the truck_5 is at the distributor_1. </PRECON> drive truck_5 from distributor_1 to depot_1 <EFFECT> Once a truck_5 has been driven from distributor_1 to depot_1, it is not at the origin distributor_1 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_10 to a pallet_10 only if the hoist_10 and pallet_10 are both at the place distributor_4, the pallet_10 is clear, and the hoist_10 is lifting the crate_2. </PRECON> Use hoist_10 to drop crate_2 to pallet_10 at distributor_4 <EFFECT> Once a crate_2 has been dropped by a hoist_10 to a pallet_10 at a place distributor_4, the hoist_10 is available, the hoist_10 is not lifting the crate_2, the crate_2 is at the place distributor_4, the pallet_10 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_10. </EFFECT> WRONG \n <PRECON> A truck_3 can be driven from distributor_4 to depot_3 only if the truck_3 is at the distributor_4. </PRECON> drive truck_3 from distributor_4 to depot_3 <EFFECT> Once a truck_3 has been driven from distributor_4 to depot_3, it is not at the origin distributor_4 and is at the destination depot_3. </EFFECT> \n <PRECON> A crate_2 can be loaded by a hoist_3 onto a truck_3 at a place depot_3 only if the hoist_3 is at the same place depot_3, the truck_3 is at the same place depot_3, and the hoist_3 is lifting the crate_2. </PRECON> Use hoist_3 to load crate_2 into truck_3 at depot_3 <EFFECT> Once a crate_2 has been loaded by a hoist_3 onto a truck_3 at a place depot_3. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_10 to a pallet_10 only if the hoist_10 and pallet_10 are both at the place distributor_4, the pallet_10 is clear, and the hoist_10 is lifting the crate_2. </PRECON> Use hoist_10 to drop crate_2 to pallet_10 at distributor_4 <EFFECT> Once a crate_2 has been dropped by a hoist_10 to a pallet_10 at a place distributor_4, the hoist_10 is available, the hoist_10 is not lifting the crate_2, the crate_2 is at the place distributor_4, the pallet_10 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_10. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from distributor_2 to distributor_0 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to distributor_0 <EFFECT> Once a truck_0 has been driven from distributor_2 to distributor_0, it is not at the origin distributor_2 and is at the destination distributor_0. </EFFECT> WRONG \n <PRECON> A truck_3 can be driven from depot_3 to distributor_4 only if the truck_3 is at the depot_3. </PRECON> drive truck_3 from depot_3 to distributor_4 <EFFECT> Once a truck_3 has been driven from depot_3 to distributor_4, it is not at the origin depot_3 and is at the destination distributor_4. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_10 from a truck_3 at a place distributor_4 only if the hoist_10 is at the same place distributor_4 as the truck_3, the hoist_10 is available, and the crate_2 is in the truck_3. </PRECON> Use hoist_10 to unload crate_2 from truck_3 at distributor_4 <EFFECT> Once a crate_2 has been unloaded by a hoist_10 from a truck_3 at a place distributor_4, the crate_2 is not in the truck_3, the hoist_10 is not available, and the hoist_10 is lifting the crate_2. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_10 to a pallet_10 only if the hoist_10 and pallet_10 are both at the place distributor_4, the pallet_10 is clear, and the hoist_10 is lifting the crate_2. </PRECON> Use hoist_10 to drop crate_2 to pallet_10 at distributor_4 <EFFECT> Once a crate_2 has been dropped by a hoist_10 to a pallet_10 at a place distributor_4, the hoist_10 is available, the hoist_10 is not lifting the crate_2, the crate_2 is at the place distributor_4, the pallet_10 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_10. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_2 to distributor_0 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to distributor_0 <EFFECT> Once a truck_0 has been driven from distributor_2 to distributor_0, it is not at the origin distributor_2 and is at the destination distributor_0. </EFFECT> \n <PRECON> A crate_6 can be loaded by a hoist_6 onto a truck_0 at a place distributor_0 only if the hoist_6 is at the same place distributor_0, the truck_0 is at the same place distributor_0, and the hoist_6 is lifting the crate_6. </PRECON> Use hoist_6 to load crate_6 into truck_0 at distributor_0 <EFFECT> Once a crate_6 has been loaded by a hoist_6 onto a truck_0 at a place distributor_0. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_0 to distributor_2 only if the truck_0 is at the distributor_0. </PRECON> drive truck_0 from distributor_0 to distributor_2 <EFFECT> Once a truck_0 has been driven from distributor_0 to distributor_2, it is not at the origin distributor_0 and is at the destination distributor_2. </EFFECT> \n <PRECON> A crate_6 can be unloaded by a hoist_8 from a truck_0 at a place distributor_2 only if the hoist_8 is at the same place distributor_2 as the truck_0, the hoist_8 is available, and the crate_6 is in the truck_0. </PRECON> Use hoist_8 to unload crate_6 from truck_0 at distributor_2 <EFFECT> Once a crate_6 has been unloaded by a hoist_8 from a truck_0 at a place distributor_2, the crate_6 is not in the truck_0, the hoist_8 is not available, and the hoist_8 is lifting the crate_6. </EFFECT> \n <PRECON> A crate_6 can be dropped by a hoist_8 to a pallet_8 only if the hoist_8 and pallet_8 are both at the place distributor_2, the pallet_8 is clear, and the hoist_8 is lifting the crate_6. </PRECON> Use hoist_8 to drop crate_6 to pallet_8 at distributor_2 <EFFECT> Once a crate_6 has been dropped by a hoist_8 to a pallet_8 at a place distributor_2, the hoist_8 is available, the hoist_8 is not lifting the crate_6, the crate_6 is at the place distributor_2, the pallet_8 is not clear, the crate_6 is clear, and the crate_6 is on the pallet_8. </EFFECT> \n <PRECON> A crate_4 can be lifted by a hoist_1 only if the hoist_1 is at the same place depot_1 as the crate_4, the hoist_1 is available, and the crate_4 is clear. </PRECON> Use hoist_1 to lift crate_4 from pallet_1 at depot_1 <EFFECT> Once a crate_4 has been lifted by a hoist_1 from a pallet_1 at a place depot_1, the crate_4 is not at the place depot_1, the hoist_1 is lifting the crate_4, the hoist_1 is not available, the pallet_1 is clear, and the crate_4 is not on the pallet_1. </EFFECT> \n <PRECON> A crate_4 can be loaded by a hoist_1 onto a truck_5 at a place depot_1 only if the hoist_1 is at the same place depot_1, the truck_5 is at the same place depot_1, and the hoist_1 is lifting the crate_4. </PRECON> Use hoist_1 to load crate_4 into truck_5 at depot_1 <EFFECT> Once a crate_4 has been loaded by a hoist_1 onto a truck_5 at a place depot_1. </EFFECT> \n <PRECON> A crate_4 can be dropped by a hoist_5 to a pallet_5 only if the hoist_5 and pallet_5 are both at the place depot_5, the pallet_5 is clear, and the hoist_5 is lifting the crate_4. </PRECON> Use hoist_5 to drop crate_4 to pallet_5 at depot_5 <EFFECT> Once a crate_4 has been dropped by a hoist_5 to a pallet_5 at a place depot_5, the hoist_5 is available, the hoist_5 is not lifting the crate_4, the crate_4 is at the place depot_5, the pallet_5 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_5. </EFFECT> WRONG \n <PRECON> A truck_5 can be driven from depot_1 to depot_5 only if the truck_5 is at the depot_1. </PRECON> drive truck_5 from depot_1 to depot_5 <EFFECT> Once a truck_5 has been driven from depot_1 to depot_5, it is not at the origin depot_1 and is at the destination depot_5. </EFFECT> \n <PRECON> A crate_4 can be unloaded by a hoist_5 from a truck_5 at a place depot_5 only if the hoist_5 is at the same place depot_5 as the truck_5, the hoist_5 is available, and the crate_4 is in the truck_5. </PRECON> Use hoist_5 to unload crate_4 from truck_5 at depot_5 <EFFECT> Once a crate_4 has been unloaded by a hoist_5 from a truck_5 at a place depot_5, the crate_4 is not in the truck_5, the hoist_5 is not available, and the hoist_5 is lifting the crate_4. </EFFECT> \n <PRECON> A crate_4 can be dropped by a hoist_5 to a pallet_5 only if the hoist_5 and pallet_5 are both at the place depot_5, the pallet_5 is clear, and the hoist_5 is lifting the crate_4. </PRECON> Use hoist_5 to drop crate_4 to pallet_5 at depot_5 <EFFECT> Once a crate_4 has been dropped by a hoist_5 to a pallet_5 at a place depot_5, the hoist_5 is available, the hoist_5 is not lifting the crate_4, the crate_4 is at the place depot_5, the pallet_5 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_5. </EFFECT> \n <PRECON> A crate_0 can be unloaded by a hoist_5 from a truck_5 at a place depot_5 only if the hoist_5 is at the same place depot_5 as the truck_5, the hoist_5 is available, and the crate_0 is in the truck_5. </PRECON> Use hoist_5 to unload crate_0 from truck_5 at depot_5 <EFFECT> Once a crate_0 has been unloaded by a hoist_5 from a truck_5 at a place depot_5, the crate_0 is not in the truck_5, the hoist_5 is not available, and the hoist_5 is lifting the crate_0. </EFFECT> \n <PRECON> A crate_0 can be dropped by a hoist_5 to a crate_4 only if the hoist_5 and crate_4 are both at the place depot_5, the crate_4 is clear, and the hoist_5 is lifting the crate_0. </PRECON> Use hoist_5 to drop crate_0 to crate_4 at depot_5 <EFFECT> Once a crate_0 has been dropped by a hoist_5 to a crate_4 at a place depot_5, the hoist_5 is available, the hoist_5 is not lifting the crate_0, the crate_0 is at the place depot_5, the crate_4 is not clear, the crate_0 is clear, and the crate_0 is on the crate_4. </EFFECT> \n</PLAN>", "plan_length": 29, "raw_plan": ["(drive truck5 distributor4 depot1)", "(lift hoist0 crate5 pallet0 depot0)", "(load hoist0 crate5 truck1 depot0)", "(drive truck1 depot0 depot4)", "(unload hoist4 crate5 truck1 depot4)", "(drop hoist4 crate5 pallet4 depot4)", "(lift hoist3 crate2 crate1 depot3)", "(lift hoist6 crate6 crate3 distributor0)", "(lift hoist7 crate0 pallet7 distributor1)", "(drive truck5 depot1 distributor1)", "(load hoist7 crate0 truck5 distributor1)", "(drive truck5 distributor1 depot1)", "(drive truck3 distributor4 depot3)", "(load hoist3 crate2 truck3 depot3)", "(drive truck3 depot3 distributor4)", "(unload hoist10 crate2 truck3 distributor4)", "(drop hoist10 crate2 pallet10 distributor4)", "(drive truck0 distributor2 distributor0)", "(load hoist6 crate6 truck0 distributor0)", "(drive truck0 distributor0 distributor2)", "(unload hoist8 crate6 truck0 distributor2)", "(drop hoist8 crate6 pallet8 distributor2)", "(lift hoist1 crate4 pallet1 depot1)", "(load hoist1 crate4 truck5 depot1)", "(drive truck5 depot1 depot5)", "(unload hoist5 crate4 truck5 depot5)", "(drop hoist5 crate4 pallet5 depot5)", "(unload hoist5 crate0 truck5 depot5)", "(drop hoist5 crate0 crate4 depot5)"], "full_text_prompt": "I have to plan the logistics of transporting crates between a number of depots and distributors via trucks that are loaded by hoists. Depots and distributors are directly connected by roads (trucks can drive between any two depots or distributors).\nA depot is a type of place.\nA distributor is a type of place.\nA pallet is a type of surface.\nA crate is a type of surface.\nHere are the actions that can be performed:\nDrive a truck from one place to another place.\nUse a hoist to lift a crate from a surface at a place.\nUse a hoist to drop a crate to a surface at a place.\nUse a hoist to load a crate into a truck at a place.\nUse a hoist to unload a crate from a truck at a place.\nThe following are the restrictions on the actions:\nA truck can be driven from one place to another place only if the truck is at the origin place.\nOnce a truck has been driven from one place to another, it is not at the origin place and is at the destination place.\nA crate can be lifted by a hoist only if the hoist is at the same place as the crate, the hoist is available, and the crate is clear.\nOnce a crate has been lifted by a hoist from a surface at a place, the crate is not at the place, the hoist is lifting the crate, the hoist is not available, the surface is clear, and the crate is not on the surface.\nA crate can be dropped by a hoist to a surface only if the hoist and surface are both at the place, the surface is clear, and the hoist is lifting the crate.\nOnce a crate has been dropped by a hoist to a surface at a place, the hoist is available, the hoist is not lifting the crate, the crate is at the place, the surface is not clear, the crate is clear, and the crate is on the surface.\nA crate can be loaded by a hoist onto a truck at a place only if the hoist is at the same place, the truck is at the same place, and the hoist is lifting the crate.\nOnce a crate has been loaded by a hoist onto a truck at a place.\nA crate can be unloaded by a hoist from a truck at a place only if the hoist is at the same place as the truck, the hoist is available, and the crate is in the truck.\nOnce a crate has been unloaded by a hoist from a truck at a place, the crate is not in the truck, the hoist is not available, and the hoist is lifting the crate.As initial conditions I have that, crate_0 is on pallet_7, crate_4 is on pallet_1, hoist_5 is available, crate_4 is at depot_1, hoist_5 is at depot_5, hoist_6 is available, pallet_7 is at distributor_1, hoist_3 is at depot_3, crate_6 is at distributor_0, truck_4 is at distributor_2, truck_5 is at distributor_4, hoist_8 is at distributor_2, hoist_1 is at depot_1, crate_5 is at depot_0, pallet_10 is at distributor_4, pallet_5 is clear, pallet_8 is at distributor_2, hoist_2 is at depot_2, pallet_0 is at depot_0, hoist_7 is at distributor_1, hoist_2 is available, pallet_6 is at distributor_0, crate_3 is at distributor_0, crate_0 is clear, pallet_1 is at depot_1, pallet_4 is clear, crate_5 is clear, crate_2 is at depot_3, truck_2 is at depot_2, hoist_9 is available, crate_5 is on pallet_0, crate_1 is on pallet_3, crate_2 is on crate_1, truck_3 is at distributor_4, truck_0 is at distributor_2, hoist_9 is at distributor_3, pallet_9 is clear, crate_3 is on pallet_6, hoist_4 is at depot_4, hoist_0 is at depot_0, pallet_10 is clear, pallet_4 is at depot_4, crate_6 is clear, hoist_6 is at distributor_0, crate_4 is clear, pallet_2 is clear, crate_0 is at distributor_1, pallet_3 is at depot_3, hoist_10 is available, pallet_2 is at depot_2, hoist_10 is at distributor_4, crate_2 is clear, crate_1 is at depot_3, hoist_4 is available, hoist_0 is available, crate_6 is on crate_3, pallet_8 is clear, pallet_9 is at distributor_3, hoist_7 is available, pallet_5 is at depot_5, hoist_3 is available, hoist_1 is available, hoist_8 is available, truck_1 is at depot_0.My goal is to have that crate_2 is on pallet_10, crate_4 is on pallet_5, crate_6 is on pallet_8, crate_0 is on crate_4, crate_5 is on pallet_4.My plan is as follows:\n<PLAN>\n <PRECON> A truck_5 can be driven from distributor_4 to depot_1 only if the truck_5 is at the distributor_4. </PRECON> drive truck_5 from distributor_4 to depot_1 <EFFECT> Once a truck_5 has been driven from distributor_4 to depot_1, it is not at the origin distributor_4 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_5 can be lifted by a hoist_0 only if the hoist_0 is at the same place depot_0 as the crate_5, the hoist_0 is available, and the crate_5 is clear. </PRECON> Use hoist_0 to lift crate_5 from pallet_0 at depot_0 <EFFECT> Once a crate_5 has been lifted by a hoist_0 from a pallet_0 at a place depot_0, the crate_5 is not at the place depot_0, the hoist_0 is lifting the crate_5, the hoist_0 is not available, the pallet_0 is clear, and the crate_5 is not on the pallet_0. </EFFECT> \n <PRECON> A crate_5 can be loaded by a hoist_0 onto a truck_1 at a place depot_0 only if the hoist_0 is at the same place depot_0, the truck_1 is at the same place depot_0, and the hoist_0 is lifting the crate_5. </PRECON> Use hoist_0 to load crate_5 into truck_1 at depot_0 <EFFECT> Once a crate_5 has been loaded by a hoist_0 onto a truck_1 at a place depot_0. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_0 to depot_4 only if the truck_1 is at the depot_0. </PRECON> drive truck_1 from depot_0 to depot_4 <EFFECT> Once a truck_1 has been driven from depot_0 to depot_4, it is not at the origin depot_0 and is at the destination depot_4. </EFFECT> \n <PRECON> A crate_5 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_5 is in the truck_1. </PRECON> Use hoist_4 to unload crate_5 from truck_1 at depot_4 <EFFECT> Once a crate_5 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_5 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_5. </EFFECT> \n <PRECON> A crate_6 can be loaded by a hoist_6 onto a truck_0 at a place distributor_0 only if the hoist_6 is at the same place distributor_0, the truck_0 is at the same place distributor_0, and the hoist_6 is lifting the crate_6. </PRECON> Use hoist_6 to load crate_6 into truck_0 at distributor_0 <EFFECT> Once a crate_6 has been loaded by a hoist_6 onto a truck_0 at a place distributor_0. </EFFECT> WRONG \n <PRECON> A crate_5 can be dropped by a hoist_4 to a pallet_4 only if the hoist_4 and pallet_4 are both at the place depot_4, the pallet_4 is clear, and the hoist_4 is lifting the crate_5. </PRECON> Use hoist_4 to drop crate_5 to pallet_4 at depot_4 <EFFECT> Once a crate_5 has been dropped by a hoist_4 to a pallet_4 at a place depot_4, the hoist_4 is available, the hoist_4 is not lifting the crate_5, the crate_5 is at the place depot_4, the pallet_4 is not clear, the crate_5 is clear, and the crate_5 is on the pallet_4. </EFFECT> \n <PRECON> A truck_3 can be driven from distributor_4 to depot_3 only if the truck_3 is at the distributor_4. </PRECON> drive truck_3 from distributor_4 to depot_3 <EFFECT> Once a truck_3 has been driven from distributor_4 to depot_3, it is not at the origin distributor_4 and is at the destination depot_3. </EFFECT> WRONG \n <PRECON> A crate_2 can be lifted by a hoist_3 only if the hoist_3 is at the same place depot_3 as the crate_2, the hoist_3 is available, and the crate_2 is clear. </PRECON> Use hoist_3 to lift crate_2 from crate_1 at depot_3 <EFFECT> Once a crate_2 has been lifted by a hoist_3 from a crate_1 at a place depot_3, the crate_2 is not at the place depot_3, the hoist_3 is lifting the crate_2, the hoist_3 is not available, the crate_1 is clear, and the crate_2 is not on the crate_1. </EFFECT> \n <PRECON> A crate_6 can be lifted by a hoist_6 only if the hoist_6 is at the same place distributor_0 as the crate_6, the hoist_6 is available, and the crate_6 is clear. </PRECON> Use hoist_6 to lift crate_6 from crate_3 at distributor_0 <EFFECT> Once a crate_6 has been lifted by a hoist_6 from a crate_3 at a place distributor_0, the crate_6 is not at the place distributor_0, the hoist_6 is lifting the crate_6, the hoist_6 is not available, the crate_3 is clear, and the crate_6 is not on the crate_3. </EFFECT> \n <PRECON> A crate_0 can be lifted by a hoist_7 only if the hoist_7 is at the same place distributor_1 as the crate_0, the hoist_7 is available, and the crate_0 is clear. </PRECON> Use hoist_7 to lift crate_0 from pallet_7 at distributor_1 <EFFECT> Once a crate_0 has been lifted by a hoist_7 from a pallet_7 at a place distributor_1, the crate_0 is not at the place distributor_1, the hoist_7 is lifting the crate_0, the hoist_7 is not available, the pallet_7 is clear, and the crate_0 is not on the pallet_7. </EFFECT> \n <PRECON> A truck_5 can be driven from depot_1 to distributor_1 only if the truck_5 is at the depot_1. </PRECON> drive truck_5 from depot_1 to distributor_1 <EFFECT> Once a truck_5 has been driven from depot_1 to distributor_1, it is not at the origin depot_1 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_10 to a pallet_10 only if the hoist_10 and pallet_10 are both at the place distributor_4, the pallet_10 is clear, and the hoist_10 is lifting the crate_2. </PRECON> Use hoist_10 to drop crate_2 to pallet_10 at distributor_4 <EFFECT> Once a crate_2 has been dropped by a hoist_10 to a pallet_10 at a place distributor_4, the hoist_10 is available, the hoist_10 is not lifting the crate_2, the crate_2 is at the place distributor_4, the pallet_10 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_10. </EFFECT> WRONG \n <PRECON> A truck_3 can be driven from distributor_4 to depot_3 only if the truck_3 is at the distributor_4. </PRECON> drive truck_3 from distributor_4 to depot_3 <EFFECT> Once a truck_3 has been driven from distributor_4 to depot_3, it is not at the origin distributor_4 and is at the destination depot_3. </EFFECT> WRONG \n <PRECON> A crate_0 can be loaded by a hoist_7 onto a truck_5 at a place distributor_1 only if the hoist_7 is at the same place distributor_1, the truck_5 is at the same place distributor_1, and the hoist_7 is lifting the crate_0. </PRECON> Use hoist_7 to load crate_0 into truck_5 at distributor_1 <EFFECT> Once a crate_0 has been loaded by a hoist_7 onto a truck_5 at a place distributor_1. </EFFECT> \n <PRECON> A truck_5 can be driven from distributor_1 to depot_1 only if the truck_5 is at the distributor_1. </PRECON> drive truck_5 from distributor_1 to depot_1 <EFFECT> Once a truck_5 has been driven from distributor_1 to depot_1, it is not at the origin distributor_1 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_10 to a pallet_10 only if the hoist_10 and pallet_10 are both at the place distributor_4, the pallet_10 is clear, and the hoist_10 is lifting the crate_2. </PRECON> Use hoist_10 to drop crate_2 to pallet_10 at distributor_4 <EFFECT> Once a crate_2 has been dropped by a hoist_10 to a pallet_10 at a place distributor_4, the hoist_10 is available, the hoist_10 is not lifting the crate_2, the crate_2 is at the place distributor_4, the pallet_10 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_10. </EFFECT> WRONG \n <PRECON> A truck_3 can be driven from distributor_4 to depot_3 only if the truck_3 is at the distributor_4. </PRECON> drive truck_3 from distributor_4 to depot_3 <EFFECT> Once a truck_3 has been driven from distributor_4 to depot_3, it is not at the origin distributor_4 and is at the destination depot_3. </EFFECT> \n <PRECON> A crate_2 can be loaded by a hoist_3 onto a truck_3 at a place depot_3 only if the hoist_3 is at the same place depot_3, the truck_3 is at the same place depot_3, and the hoist_3 is lifting the crate_2. </PRECON> Use hoist_3 to load crate_2 into truck_3 at depot_3 <EFFECT> Once a crate_2 has been loaded by a hoist_3 onto a truck_3 at a place depot_3. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_10 to a pallet_10 only if the hoist_10 and pallet_10 are both at the place distributor_4, the pallet_10 is clear, and the hoist_10 is lifting the crate_2. </PRECON> Use hoist_10 to drop crate_2 to pallet_10 at distributor_4 <EFFECT> Once a crate_2 has been dropped by a hoist_10 to a pallet_10 at a place distributor_4, the hoist_10 is available, the hoist_10 is not lifting the crate_2, the crate_2 is at the place distributor_4, the pallet_10 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_10. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from distributor_2 to distributor_0 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to distributor_0 <EFFECT> Once a truck_0 has been driven from distributor_2 to distributor_0, it is not at the origin distributor_2 and is at the destination distributor_0. </EFFECT> WRONG \n <PRECON> A truck_3 can be driven from depot_3 to distributor_4 only if the truck_3 is at the depot_3. </PRECON> drive truck_3 from depot_3 to distributor_4 <EFFECT> Once a truck_3 has been driven from depot_3 to distributor_4, it is not at the origin depot_3 and is at the destination distributor_4. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_10 from a truck_3 at a place distributor_4 only if the hoist_10 is at the same place distributor_4 as the truck_3, the hoist_10 is available, and the crate_2 is in the truck_3. </PRECON> Use hoist_10 to unload crate_2 from truck_3 at distributor_4 <EFFECT> Once a crate_2 has been unloaded by a hoist_10 from a truck_3 at a place distributor_4, the crate_2 is not in the truck_3, the hoist_10 is not available, and the hoist_10 is lifting the crate_2. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_10 to a pallet_10 only if the hoist_10 and pallet_10 are both at the place distributor_4, the pallet_10 is clear, and the hoist_10 is lifting the crate_2. </PRECON> Use hoist_10 to drop crate_2 to pallet_10 at distributor_4 <EFFECT> Once a crate_2 has been dropped by a hoist_10 to a pallet_10 at a place distributor_4, the hoist_10 is available, the hoist_10 is not lifting the crate_2, the crate_2 is at the place distributor_4, the pallet_10 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_10. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_2 to distributor_0 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to distributor_0 <EFFECT> Once a truck_0 has been driven from distributor_2 to distributor_0, it is not at the origin distributor_2 and is at the destination distributor_0. </EFFECT> \n <PRECON> A crate_6 can be loaded by a hoist_6 onto a truck_0 at a place distributor_0 only if the hoist_6 is at the same place distributor_0, the truck_0 is at the same place distributor_0, and the hoist_6 is lifting the crate_6. </PRECON> Use hoist_6 to load crate_6 into truck_0 at distributor_0 <EFFECT> Once a crate_6 has been loaded by a hoist_6 onto a truck_0 at a place distributor_0. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_0 to distributor_2 only if the truck_0 is at the distributor_0. </PRECON> drive truck_0 from distributor_0 to distributor_2 <EFFECT> Once a truck_0 has been driven from distributor_0 to distributor_2, it is not at the origin distributor_0 and is at the destination distributor_2. </EFFECT> \n <PRECON> A crate_6 can be unloaded by a hoist_8 from a truck_0 at a place distributor_2 only if the hoist_8 is at the same place distributor_2 as the truck_0, the hoist_8 is available, and the crate_6 is in the truck_0. </PRECON> Use hoist_8 to unload crate_6 from truck_0 at distributor_2 <EFFECT> Once a crate_6 has been unloaded by a hoist_8 from a truck_0 at a place distributor_2, the crate_6 is not in the truck_0, the hoist_8 is not available, and the hoist_8 is lifting the crate_6. </EFFECT> \n <PRECON> A crate_6 can be dropped by a hoist_8 to a pallet_8 only if the hoist_8 and pallet_8 are both at the place distributor_2, the pallet_8 is clear, and the hoist_8 is lifting the crate_6. </PRECON> Use hoist_8 to drop crate_6 to pallet_8 at distributor_2 <EFFECT> Once a crate_6 has been dropped by a hoist_8 to a pallet_8 at a place distributor_2, the hoist_8 is available, the hoist_8 is not lifting the crate_6, the crate_6 is at the place distributor_2, the pallet_8 is not clear, the crate_6 is clear, and the crate_6 is on the pallet_8. </EFFECT> \n <PRECON> A crate_4 can be lifted by a hoist_1 only if the hoist_1 is at the same place depot_1 as the crate_4, the hoist_1 is available, and the crate_4 is clear. </PRECON> Use hoist_1 to lift crate_4 from pallet_1 at depot_1 <EFFECT> Once a crate_4 has been lifted by a hoist_1 from a pallet_1 at a place depot_1, the crate_4 is not at the place depot_1, the hoist_1 is lifting the crate_4, the hoist_1 is not available, the pallet_1 is clear, and the crate_4 is not on the pallet_1. </EFFECT> \n <PRECON> A crate_4 can be loaded by a hoist_1 onto a truck_5 at a place depot_1 only if the hoist_1 is at the same place depot_1, the truck_5 is at the same place depot_1, and the hoist_1 is lifting the crate_4. </PRECON> Use hoist_1 to load crate_4 into truck_5 at depot_1 <EFFECT> Once a crate_4 has been loaded by a hoist_1 onto a truck_5 at a place depot_1. </EFFECT> \n <PRECON> A crate_4 can be dropped by a hoist_5 to a pallet_5 only if the hoist_5 and pallet_5 are both at the place depot_5, the pallet_5 is clear, and the hoist_5 is lifting the crate_4. </PRECON> Use hoist_5 to drop crate_4 to pallet_5 at depot_5 <EFFECT> Once a crate_4 has been dropped by a hoist_5 to a pallet_5 at a place depot_5, the hoist_5 is available, the hoist_5 is not lifting the crate_4, the crate_4 is at the place depot_5, the pallet_5 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_5. </EFFECT> WRONG \n <PRECON> A truck_5 can be driven from depot_1 to depot_5 only if the truck_5 is at the depot_1. </PRECON> drive truck_5 from depot_1 to depot_5 <EFFECT> Once a truck_5 has been driven from depot_1 to depot_5, it is not at the origin depot_1 and is at the destination depot_5. </EFFECT> \n <PRECON> A crate_4 can be unloaded by a hoist_5 from a truck_5 at a place depot_5 only if the hoist_5 is at the same place depot_5 as the truck_5, the hoist_5 is available, and the crate_4 is in the truck_5. </PRECON> Use hoist_5 to unload crate_4 from truck_5 at depot_5 <EFFECT> Once a crate_4 has been unloaded by a hoist_5 from a truck_5 at a place depot_5, the crate_4 is not in the truck_5, the hoist_5 is not available, and the hoist_5 is lifting the crate_4. </EFFECT> \n <PRECON> A crate_4 can be dropped by a hoist_5 to a pallet_5 only if the hoist_5 and pallet_5 are both at the place depot_5, the pallet_5 is clear, and the hoist_5 is lifting the crate_4. </PRECON> Use hoist_5 to drop crate_4 to pallet_5 at depot_5 <EFFECT> Once a crate_4 has been dropped by a hoist_5 to a pallet_5 at a place depot_5, the hoist_5 is available, the hoist_5 is not lifting the crate_4, the crate_4 is at the place depot_5, the pallet_5 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_5. </EFFECT> \n <PRECON> A crate_0 can be unloaded by a hoist_5 from a truck_5 at a place depot_5 only if the hoist_5 is at the same place depot_5 as the truck_5, the hoist_5 is available, and the crate_0 is in the truck_5. </PRECON> Use hoist_5 to unload crate_0 from truck_5 at depot_5 <EFFECT> Once a crate_0 has been unloaded by a hoist_5 from a truck_5 at a place depot_5, the crate_0 is not in the truck_5, the hoist_5 is not available, and the hoist_5 is lifting the crate_0. </EFFECT> \n <PRECON> A crate_0 can be dropped by a hoist_5 to a crate_4 only if the hoist_5 and crate_4 are both at the place depot_5, the crate_4 is clear, and the hoist_5 is lifting the crate_0. </PRECON> Use hoist_5 to drop crate_0 to crate_4 at depot_5 <EFFECT> Once a crate_0 has been dropped by a hoist_5 to a crate_4 at a place depot_5, the hoist_5 is available, the hoist_5 is not lifting the crate_0, the crate_0 is at the place depot_5, the crate_4 is not clear, the crate_0 is clear, and the crate_0 is on the crate_4. </EFFECT> \n</PLAN>"}
{"domain": "depots", "instance_id": "160", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the logistics of transporting crates between a number of depots and distributors via trucks that are loaded by hoists. Depots and distributors are directly connected by roads (trucks can drive between any two depots or distributors).\nA depot is a type of place.\nA distributor is a type of place.\nA pallet is a type of surface.\nA crate is a type of surface.\nHere are the actions that can be performed:\nDrive a truck from one place to another place.\nUse a hoist to lift a crate from a surface at a place.\nUse a hoist to drop a crate to a surface at a place.\nUse a hoist to load a crate into a truck at a place.\nUse a hoist to unload a crate from a truck at a place.\nThe following are the restrictions on the actions:\nA truck can be driven from one place to another place only if the truck is at the origin place.\nOnce a truck has been driven from one place to another, it is not at the origin place and is at the destination place.\nA crate can be lifted by a hoist only if the hoist is at the same place as the crate, the hoist is available, and the crate is clear.\nOnce a crate has been lifted by a hoist from a surface at a place, the crate is not at the place, the hoist is lifting the crate, the hoist is not available, the surface is clear, and the crate is not on the surface.\nA crate can be dropped by a hoist to a surface only if the hoist and surface are both at the place, the surface is clear, and the hoist is lifting the crate.\nOnce a crate has been dropped by a hoist to a surface at a place, the hoist is available, the hoist is not lifting the crate, the crate is at the place, the surface is not clear, the crate is clear, and the crate is on the surface.\nA crate can be loaded by a hoist onto a truck at a place only if the hoist is at the same place, the truck is at the same place, and the hoist is lifting the crate.\nOnce a crate has been loaded by a hoist onto a truck at a place.\nA crate can be unloaded by a hoist from a truck at a place only if the hoist is at the same place as the truck, the hoist is available, and the crate is in the truck.\nOnce a crate has been unloaded by a hoist from a truck at a place, the crate is not in the truck, the hoist is not available, and the hoist is lifting the crate.", "input": "As initial conditions I have that, pallet_9 is clear, pallet_7 is at distributor_2, truck_0 is at distributor_5, pallet_5 is clear, pallet_6 is clear, crate_2 is on pallet_3, hoist_3 is at depot_3, hoist_10 is available, hoist_2 is at depot_2, crate_0 is at distributor_2, crate_0 is on pallet_7, crate_1 is at distributor_3, hoist_0 is at depot_0, crate_3 is clear, pallet_0 is at depot_0, hoist_6 is at distributor_1, hoist_4 is available, crate_2 is at depot_3, pallet_9 is at distributor_4, hoist_5 is at distributor_0, hoist_8 is at distributor_3, hoist_5 is available, hoist_6 is available, pallet_3 is at depot_3, hoist_3 is available, hoist_1 is at depot_1, pallet_1 is at depot_1, pallet_2 is at depot_2, truck_1 is at depot_4, hoist_7 is at distributor_2, truck_2 is at depot_1, pallet_4 is at depot_4, crate_4 is on pallet_2, hoist_0 is available, crate_4 is at depot_2, hoist_10 is at distributor_5, pallet_1 is clear, crate_1 is clear, hoist_9 is available, crate_3 is at distributor_2, crate_2 is clear, crate_3 is on crate_0, pallet_4 is clear, hoist_2 is available, crate_4 is clear, pallet_0 is clear, crate_1 is on pallet_8, hoist_4 is at depot_4, pallet_10 is clear, pallet_8 is at distributor_3, hoist_1 is available, pallet_10 is at distributor_5, pallet_6 is at distributor_1, hoist_9 is at distributor_4, hoist_8 is available, truck_3 is at distributor_4, pallet_5 is at distributor_0, hoist_7 is available.\nMy goal is to have that crate_3 is on pallet_0, crate_2 is on crate_1, crate_1 is on pallet_4, crate_4 is on pallet_10.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A truck_3 can be driven from distributor_4 to depot_0 only if the truck_3 is at the distributor_4. </PRECON> drive truck_3 from distributor_4 to depot_0 <EFFECT> Once a truck_3 has been driven from distributor_4 to depot_0, it is not at the origin distributor_4 and is at the destination depot_0. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_4 to distributor_3 only if the truck_1 is at the depot_4. </PRECON> drive truck_1 from depot_4 to distributor_3 <EFFECT> Once a truck_1 has been driven from depot_4 to distributor_3, it is not at the origin depot_4 and is at the destination distributor_3. </EFFECT> \n <PRECON> A crate_4 can be lifted by a hoist_2 only if the hoist_2 is at the same place depot_2 as the crate_4, the hoist_2 is available, and the crate_4 is clear. </PRECON> Use hoist_2 to lift crate_4 from pallet_2 at depot_2 <EFFECT> Once a crate_4 has been lifted by a hoist_2 from a pallet_2 at a place depot_2, the crate_4 is not at the place depot_2, the hoist_2 is lifting the crate_4, the hoist_2 is not available, the pallet_2 is clear, and the crate_4 is not on the pallet_2. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_2 to distributor_5 only if the truck_0 is at the depot_2. </PRECON> drive truck_0 from depot_2 to distributor_5 <EFFECT> Once a truck_0 has been driven from depot_2 to distributor_5, it is not at the origin depot_2 and is at the destination distributor_5. </EFFECT> WRONG \n <PRECON> A crate_2 can be lifted by a hoist_3 only if the hoist_3 is at the same place depot_3 as the crate_2, the hoist_3 is available, and the crate_2 is clear. </PRECON> Use hoist_3 to lift crate_2 from pallet_3 at depot_3 <EFFECT> Once a crate_2 has been lifted by a hoist_3 from a pallet_3 at a place depot_3, the crate_2 is not at the place depot_3, the hoist_3 is lifting the crate_2, the hoist_3 is not available, the pallet_3 is clear, and the crate_2 is not on the pallet_3. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_4 to depot_3 only if the truck_1 is at the depot_4. </PRECON> drive truck_1 from depot_4 to depot_3 <EFFECT> Once a truck_1 has been driven from depot_4 to depot_3, it is not at the origin depot_4 and is at the destination depot_3. </EFFECT> WRONG \n <PRECON> A crate_3 can be lifted by a hoist_7 only if the hoist_7 is at the same place distributor_2 as the crate_3, the hoist_7 is available, and the crate_3 is clear. </PRECON> Use hoist_7 to lift crate_3 from crate_0 at distributor_2 <EFFECT> Once a crate_3 has been lifted by a hoist_7 from a crate_0 at a place distributor_2, the crate_3 is not at the place distributor_2, the hoist_7 is lifting the crate_3, the hoist_7 is not available, the crate_0 is clear, and the crate_3 is not on the crate_0. </EFFECT> \n <PRECON> A truck_3 can be driven from depot_0 to distributor_2 only if the truck_3 is at the depot_0. </PRECON> drive truck_3 from depot_0 to distributor_2 <EFFECT> Once a truck_3 has been driven from depot_0 to distributor_2, it is not at the origin depot_0 and is at the destination distributor_2. </EFFECT> \n <PRECON> A crate_3 can be loaded by a hoist_7 onto a truck_3 at a place distributor_2 only if the hoist_7 is at the same place distributor_2, the truck_3 is at the same place distributor_2, and the hoist_7 is lifting the crate_3. </PRECON> Use hoist_7 to load crate_3 into truck_3 at distributor_2 <EFFECT> Once a crate_3 has been loaded by a hoist_7 onto a truck_3 at a place distributor_2. </EFFECT> \n <PRECON> A truck_3 can be driven from distributor_2 to depot_0 only if the truck_3 is at the distributor_2. </PRECON> drive truck_3 from distributor_2 to depot_0 <EFFECT> Once a truck_3 has been driven from distributor_2 to depot_0, it is not at the origin distributor_2 and is at the destination depot_0. </EFFECT> \n <PRECON> A crate_3 can be unloaded by a hoist_0 from a truck_3 at a place depot_0 only if the hoist_0 is at the same place depot_0 as the truck_3, the hoist_0 is available, and the crate_3 is in the truck_3. </PRECON> Use hoist_0 to unload crate_3 from truck_3 at depot_0 <EFFECT> Once a crate_3 has been unloaded by a hoist_0 from a truck_3 at a place depot_0, the crate_3 is not in the truck_3, the hoist_0 is not available, and the hoist_0 is lifting the crate_3. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_2 is in the truck_1. </PRECON> Use hoist_4 to unload crate_2 from truck_1 at depot_4 <EFFECT> Once a crate_2 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_2 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_2. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from distributor_5 to depot_2 only if the truck_0 is at the distributor_5. </PRECON> drive truck_0 from distributor_5 to depot_2 <EFFECT> Once a truck_0 has been driven from distributor_5 to depot_2, it is not at the origin distributor_5 and is at the destination depot_2. </EFFECT> \n <PRECON> A crate_4 can be loaded by a hoist_2 onto a truck_0 at a place depot_2 only if the hoist_2 is at the same place depot_2, the truck_0 is at the same place depot_2, and the hoist_2 is lifting the crate_4. </PRECON> Use hoist_2 to load crate_4 into truck_0 at depot_2 <EFFECT> Once a crate_4 has been loaded by a hoist_2 onto a truck_0 at a place depot_2. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_2 to distributor_5 only if the truck_0 is at the depot_2. </PRECON> drive truck_0 from depot_2 to distributor_5 <EFFECT> Once a truck_0 has been driven from depot_2 to distributor_5, it is not at the origin depot_2 and is at the destination distributor_5. </EFFECT> \n <PRECON> A crate_4 can be unloaded by a hoist_10 from a truck_0 at a place distributor_5 only if the hoist_10 is at the same place distributor_5 as the truck_0, the hoist_10 is available, and the crate_4 is in the truck_0. </PRECON> Use hoist_10 to unload crate_4 from truck_0 at distributor_5 <EFFECT> Once a crate_4 has been unloaded by a hoist_10 from a truck_0 at a place distributor_5, the crate_4 is not in the truck_0, the hoist_10 is not available, and the hoist_10 is lifting the crate_4. </EFFECT> \n <PRECON> A crate_3 can be dropped by a hoist_0 to a pallet_0 only if the hoist_0 and pallet_0 are both at the place depot_0, the pallet_0 is clear, and the hoist_0 is lifting the crate_3. </PRECON> Use hoist_0 to drop crate_3 to pallet_0 at depot_0 <EFFECT> Once a crate_3 has been dropped by a hoist_0 to a pallet_0 at a place depot_0, the hoist_0 is available, the hoist_0 is not lifting the crate_3, the crate_3 is at the place depot_0, the pallet_0 is not clear, the crate_3 is clear, and the crate_3 is on the pallet_0. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_3 to depot_4 only if the truck_1 is at the depot_3. </PRECON> drive truck_1 from depot_3 to depot_4 <EFFECT> Once a truck_1 has been driven from depot_3 to depot_4, it is not at the origin depot_3 and is at the destination depot_4. </EFFECT> WRONG \n <PRECON> A crate_4 can be dropped by a hoist_10 to a pallet_10 only if the hoist_10 and pallet_10 are both at the place distributor_5, the pallet_10 is clear, and the hoist_10 is lifting the crate_4. </PRECON> Use hoist_10 to drop crate_4 to pallet_10 at distributor_5 <EFFECT> Once a crate_4 has been dropped by a hoist_10 to a pallet_10 at a place distributor_5, the hoist_10 is available, the hoist_10 is not lifting the crate_4, the crate_4 is at the place distributor_5, the pallet_10 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_10. </EFFECT> \n <PRECON> A crate_1 can be lifted by a hoist_8 only if the hoist_8 is at the same place distributor_3 as the crate_1, the hoist_8 is available, and the crate_1 is clear. </PRECON> Use hoist_8 to lift crate_1 from pallet_8 at distributor_3 <EFFECT> Once a crate_1 has been lifted by a hoist_8 from a pallet_8 at a place distributor_3, the crate_1 is not at the place distributor_3, the hoist_8 is lifting the crate_1, the hoist_8 is not available, the pallet_8 is clear, and the crate_1 is not on the pallet_8. </EFFECT> \n <PRECON> A crate_1 can be loaded by a hoist_8 onto a truck_1 at a place distributor_3 only if the hoist_8 is at the same place distributor_3, the truck_1 is at the same place distributor_3, and the hoist_8 is lifting the crate_1. </PRECON> Use hoist_8 to load crate_1 into truck_1 at distributor_3 <EFFECT> Once a crate_1 has been loaded by a hoist_8 onto a truck_1 at a place distributor_3. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_1 is in the truck_1. </PRECON> Use hoist_4 to unload crate_1 from truck_1 at depot_4 <EFFECT> Once a crate_1 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_1 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_1. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from distributor_3 to depot_3 only if the truck_1 is at the distributor_3. </PRECON> drive truck_1 from distributor_3 to depot_3 <EFFECT> Once a truck_1 has been driven from distributor_3 to depot_3, it is not at the origin distributor_3 and is at the destination depot_3. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_3 to depot_4 only if the truck_1 is at the depot_3. </PRECON> drive truck_1 from depot_3 to depot_4 <EFFECT> Once a truck_1 has been driven from depot_3 to depot_4, it is not at the origin depot_3 and is at the destination depot_4. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_2 is in the truck_1. </PRECON> Use hoist_4 to unload crate_2 from truck_1 at depot_4 <EFFECT> Once a crate_2 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_2 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_2. </EFFECT> WRONG \n <PRECON> A crate_1 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_1 is in the truck_1. </PRECON> Use hoist_4 to unload crate_1 from truck_1 at depot_4 <EFFECT> Once a crate_1 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_1 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_1. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_4 to a pallet_4 only if the hoist_4 and pallet_4 are both at the place depot_4, the pallet_4 is clear, and the hoist_4 is lifting the crate_1. </PRECON> Use hoist_4 to drop crate_1 to pallet_4 at depot_4 <EFFECT> Once a crate_1 has been dropped by a hoist_4 to a pallet_4 at a place depot_4, the hoist_4 is available, the hoist_4 is not lifting the crate_1, the crate_1 is at the place depot_4, the pallet_4 is not clear, the crate_1 is clear, and the crate_1 is on the pallet_4. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_4 to depot_3 only if the truck_1 is at the depot_4. </PRECON> drive truck_1 from depot_4 to depot_3 <EFFECT> Once a truck_1 has been driven from depot_4 to depot_3, it is not at the origin depot_4 and is at the destination depot_3. </EFFECT> \n <PRECON> A crate_2 can be loaded by a hoist_3 onto a truck_1 at a place depot_3 only if the hoist_3 is at the same place depot_3, the truck_1 is at the same place depot_3, and the hoist_3 is lifting the crate_2. </PRECON> Use hoist_3 to load crate_2 into truck_1 at depot_3 <EFFECT> Once a crate_2 has been loaded by a hoist_3 onto a truck_1 at a place depot_3. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_3 to depot_4 only if the truck_1 is at the depot_3. </PRECON> drive truck_1 from depot_3 to depot_4 <EFFECT> Once a truck_1 has been driven from depot_3 to depot_4, it is not at the origin depot_3 and is at the destination depot_4. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_2 is in the truck_1. </PRECON> Use hoist_4 to unload crate_2 from truck_1 at depot_4 <EFFECT> Once a crate_2 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_2 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_2. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_4 to a crate_1 only if the hoist_4 and crate_1 are both at the place depot_4, the crate_1 is clear, and the hoist_4 is lifting the crate_2. </PRECON> Use hoist_4 to drop crate_2 to crate_1 at depot_4 <EFFECT> Once a crate_2 has been dropped by a hoist_4 to a crate_1 at a place depot_4, the hoist_4 is available, the hoist_4 is not lifting the crate_2, the crate_2 is at the place depot_4, the crate_1 is not clear, the crate_2 is clear, and the crate_2 is on the crate_1. </EFFECT> \n</PLAN>", "plan_length": 26, "raw_plan": ["(drive truck3 distributor4 depot0)", "(drive truck1 depot4 distributor3)", "(lift hoist2 crate4 pallet2 depot2)", "(lift hoist3 crate2 pallet3 depot3)", "(lift hoist7 crate3 crate0 distributor2)", "(drive truck3 depot0 distributor2)", "(load hoist7 crate3 truck3 distributor2)", "(drive truck3 distributor2 depot0)", "(unload hoist0 crate3 truck3 depot0)", "(drive truck0 distributor5 depot2)", "(load hoist2 crate4 truck0 depot2)", "(drive truck0 depot2 distributor5)", "(unload hoist10 crate4 truck0 distributor5)", "(drop hoist0 crate3 pallet0 depot0)", "(drop hoist10 crate4 pallet10 distributor5)", "(lift hoist8 crate1 pallet8 distributor3)", "(load hoist8 crate1 truck1 distributor3)", "(drive truck1 distributor3 depot3)", "(drive truck1 depot3 depot4)", "(unload hoist4 crate1 truck1 depot4)", "(drop hoist4 crate1 pallet4 depot4)", "(drive truck1 depot4 depot3)", "(load hoist3 crate2 truck1 depot3)", "(drive truck1 depot3 depot4)", "(unload hoist4 crate2 truck1 depot4)", "(drop hoist4 crate2 crate1 depot4)"], "full_text_prompt": "I have to plan the logistics of transporting crates between a number of depots and distributors via trucks that are loaded by hoists. Depots and distributors are directly connected by roads (trucks can drive between any two depots or distributors).\nA depot is a type of place.\nA distributor is a type of place.\nA pallet is a type of surface.\nA crate is a type of surface.\nHere are the actions that can be performed:\nDrive a truck from one place to another place.\nUse a hoist to lift a crate from a surface at a place.\nUse a hoist to drop a crate to a surface at a place.\nUse a hoist to load a crate into a truck at a place.\nUse a hoist to unload a crate from a truck at a place.\nThe following are the restrictions on the actions:\nA truck can be driven from one place to another place only if the truck is at the origin place.\nOnce a truck has been driven from one place to another, it is not at the origin place and is at the destination place.\nA crate can be lifted by a hoist only if the hoist is at the same place as the crate, the hoist is available, and the crate is clear.\nOnce a crate has been lifted by a hoist from a surface at a place, the crate is not at the place, the hoist is lifting the crate, the hoist is not available, the surface is clear, and the crate is not on the surface.\nA crate can be dropped by a hoist to a surface only if the hoist and surface are both at the place, the surface is clear, and the hoist is lifting the crate.\nOnce a crate has been dropped by a hoist to a surface at a place, the hoist is available, the hoist is not lifting the crate, the crate is at the place, the surface is not clear, the crate is clear, and the crate is on the surface.\nA crate can be loaded by a hoist onto a truck at a place only if the hoist is at the same place, the truck is at the same place, and the hoist is lifting the crate.\nOnce a crate has been loaded by a hoist onto a truck at a place.\nA crate can be unloaded by a hoist from a truck at a place only if the hoist is at the same place as the truck, the hoist is available, and the crate is in the truck.\nOnce a crate has been unloaded by a hoist from a truck at a place, the crate is not in the truck, the hoist is not available, and the hoist is lifting the crate.As initial conditions I have that, pallet_9 is clear, pallet_7 is at distributor_2, truck_0 is at distributor_5, pallet_5 is clear, pallet_6 is clear, crate_2 is on pallet_3, hoist_3 is at depot_3, hoist_10 is available, hoist_2 is at depot_2, crate_0 is at distributor_2, crate_0 is on pallet_7, crate_1 is at distributor_3, hoist_0 is at depot_0, crate_3 is clear, pallet_0 is at depot_0, hoist_6 is at distributor_1, hoist_4 is available, crate_2 is at depot_3, pallet_9 is at distributor_4, hoist_5 is at distributor_0, hoist_8 is at distributor_3, hoist_5 is available, hoist_6 is available, pallet_3 is at depot_3, hoist_3 is available, hoist_1 is at depot_1, pallet_1 is at depot_1, pallet_2 is at depot_2, truck_1 is at depot_4, hoist_7 is at distributor_2, truck_2 is at depot_1, pallet_4 is at depot_4, crate_4 is on pallet_2, hoist_0 is available, crate_4 is at depot_2, hoist_10 is at distributor_5, pallet_1 is clear, crate_1 is clear, hoist_9 is available, crate_3 is at distributor_2, crate_2 is clear, crate_3 is on crate_0, pallet_4 is clear, hoist_2 is available, crate_4 is clear, pallet_0 is clear, crate_1 is on pallet_8, hoist_4 is at depot_4, pallet_10 is clear, pallet_8 is at distributor_3, hoist_1 is available, pallet_10 is at distributor_5, pallet_6 is at distributor_1, hoist_9 is at distributor_4, hoist_8 is available, truck_3 is at distributor_4, pallet_5 is at distributor_0, hoist_7 is available.My goal is to have that crate_3 is on pallet_0, crate_2 is on crate_1, crate_1 is on pallet_4, crate_4 is on pallet_10.My plan is as follows:\n<PLAN>\n <PRECON> A truck_3 can be driven from distributor_4 to depot_0 only if the truck_3 is at the distributor_4. </PRECON> drive truck_3 from distributor_4 to depot_0 <EFFECT> Once a truck_3 has been driven from distributor_4 to depot_0, it is not at the origin distributor_4 and is at the destination depot_0. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_4 to distributor_3 only if the truck_1 is at the depot_4. </PRECON> drive truck_1 from depot_4 to distributor_3 <EFFECT> Once a truck_1 has been driven from depot_4 to distributor_3, it is not at the origin depot_4 and is at the destination distributor_3. </EFFECT> \n <PRECON> A crate_4 can be lifted by a hoist_2 only if the hoist_2 is at the same place depot_2 as the crate_4, the hoist_2 is available, and the crate_4 is clear. </PRECON> Use hoist_2 to lift crate_4 from pallet_2 at depot_2 <EFFECT> Once a crate_4 has been lifted by a hoist_2 from a pallet_2 at a place depot_2, the crate_4 is not at the place depot_2, the hoist_2 is lifting the crate_4, the hoist_2 is not available, the pallet_2 is clear, and the crate_4 is not on the pallet_2. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_2 to distributor_5 only if the truck_0 is at the depot_2. </PRECON> drive truck_0 from depot_2 to distributor_5 <EFFECT> Once a truck_0 has been driven from depot_2 to distributor_5, it is not at the origin depot_2 and is at the destination distributor_5. </EFFECT> WRONG \n <PRECON> A crate_2 can be lifted by a hoist_3 only if the hoist_3 is at the same place depot_3 as the crate_2, the hoist_3 is available, and the crate_2 is clear. </PRECON> Use hoist_3 to lift crate_2 from pallet_3 at depot_3 <EFFECT> Once a crate_2 has been lifted by a hoist_3 from a pallet_3 at a place depot_3, the crate_2 is not at the place depot_3, the hoist_3 is lifting the crate_2, the hoist_3 is not available, the pallet_3 is clear, and the crate_2 is not on the pallet_3. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_4 to depot_3 only if the truck_1 is at the depot_4. </PRECON> drive truck_1 from depot_4 to depot_3 <EFFECT> Once a truck_1 has been driven from depot_4 to depot_3, it is not at the origin depot_4 and is at the destination depot_3. </EFFECT> WRONG \n <PRECON> A crate_3 can be lifted by a hoist_7 only if the hoist_7 is at the same place distributor_2 as the crate_3, the hoist_7 is available, and the crate_3 is clear. </PRECON> Use hoist_7 to lift crate_3 from crate_0 at distributor_2 <EFFECT> Once a crate_3 has been lifted by a hoist_7 from a crate_0 at a place distributor_2, the crate_3 is not at the place distributor_2, the hoist_7 is lifting the crate_3, the hoist_7 is not available, the crate_0 is clear, and the crate_3 is not on the crate_0. </EFFECT> \n <PRECON> A truck_3 can be driven from depot_0 to distributor_2 only if the truck_3 is at the depot_0. </PRECON> drive truck_3 from depot_0 to distributor_2 <EFFECT> Once a truck_3 has been driven from depot_0 to distributor_2, it is not at the origin depot_0 and is at the destination distributor_2. </EFFECT> \n <PRECON> A crate_3 can be loaded by a hoist_7 onto a truck_3 at a place distributor_2 only if the hoist_7 is at the same place distributor_2, the truck_3 is at the same place distributor_2, and the hoist_7 is lifting the crate_3. </PRECON> Use hoist_7 to load crate_3 into truck_3 at distributor_2 <EFFECT> Once a crate_3 has been loaded by a hoist_7 onto a truck_3 at a place distributor_2. </EFFECT> \n <PRECON> A truck_3 can be driven from distributor_2 to depot_0 only if the truck_3 is at the distributor_2. </PRECON> drive truck_3 from distributor_2 to depot_0 <EFFECT> Once a truck_3 has been driven from distributor_2 to depot_0, it is not at the origin distributor_2 and is at the destination depot_0. </EFFECT> \n <PRECON> A crate_3 can be unloaded by a hoist_0 from a truck_3 at a place depot_0 only if the hoist_0 is at the same place depot_0 as the truck_3, the hoist_0 is available, and the crate_3 is in the truck_3. </PRECON> Use hoist_0 to unload crate_3 from truck_3 at depot_0 <EFFECT> Once a crate_3 has been unloaded by a hoist_0 from a truck_3 at a place depot_0, the crate_3 is not in the truck_3, the hoist_0 is not available, and the hoist_0 is lifting the crate_3. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_2 is in the truck_1. </PRECON> Use hoist_4 to unload crate_2 from truck_1 at depot_4 <EFFECT> Once a crate_2 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_2 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_2. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from distributor_5 to depot_2 only if the truck_0 is at the distributor_5. </PRECON> drive truck_0 from distributor_5 to depot_2 <EFFECT> Once a truck_0 has been driven from distributor_5 to depot_2, it is not at the origin distributor_5 and is at the destination depot_2. </EFFECT> \n <PRECON> A crate_4 can be loaded by a hoist_2 onto a truck_0 at a place depot_2 only if the hoist_2 is at the same place depot_2, the truck_0 is at the same place depot_2, and the hoist_2 is lifting the crate_4. </PRECON> Use hoist_2 to load crate_4 into truck_0 at depot_2 <EFFECT> Once a crate_4 has been loaded by a hoist_2 onto a truck_0 at a place depot_2. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_2 to distributor_5 only if the truck_0 is at the depot_2. </PRECON> drive truck_0 from depot_2 to distributor_5 <EFFECT> Once a truck_0 has been driven from depot_2 to distributor_5, it is not at the origin depot_2 and is at the destination distributor_5. </EFFECT> \n <PRECON> A crate_4 can be unloaded by a hoist_10 from a truck_0 at a place distributor_5 only if the hoist_10 is at the same place distributor_5 as the truck_0, the hoist_10 is available, and the crate_4 is in the truck_0. </PRECON> Use hoist_10 to unload crate_4 from truck_0 at distributor_5 <EFFECT> Once a crate_4 has been unloaded by a hoist_10 from a truck_0 at a place distributor_5, the crate_4 is not in the truck_0, the hoist_10 is not available, and the hoist_10 is lifting the crate_4. </EFFECT> \n <PRECON> A crate_3 can be dropped by a hoist_0 to a pallet_0 only if the hoist_0 and pallet_0 are both at the place depot_0, the pallet_0 is clear, and the hoist_0 is lifting the crate_3. </PRECON> Use hoist_0 to drop crate_3 to pallet_0 at depot_0 <EFFECT> Once a crate_3 has been dropped by a hoist_0 to a pallet_0 at a place depot_0, the hoist_0 is available, the hoist_0 is not lifting the crate_3, the crate_3 is at the place depot_0, the pallet_0 is not clear, the crate_3 is clear, and the crate_3 is on the pallet_0. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_3 to depot_4 only if the truck_1 is at the depot_3. </PRECON> drive truck_1 from depot_3 to depot_4 <EFFECT> Once a truck_1 has been driven from depot_3 to depot_4, it is not at the origin depot_3 and is at the destination depot_4. </EFFECT> WRONG \n <PRECON> A crate_4 can be dropped by a hoist_10 to a pallet_10 only if the hoist_10 and pallet_10 are both at the place distributor_5, the pallet_10 is clear, and the hoist_10 is lifting the crate_4. </PRECON> Use hoist_10 to drop crate_4 to pallet_10 at distributor_5 <EFFECT> Once a crate_4 has been dropped by a hoist_10 to a pallet_10 at a place distributor_5, the hoist_10 is available, the hoist_10 is not lifting the crate_4, the crate_4 is at the place distributor_5, the pallet_10 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_10. </EFFECT> \n <PRECON> A crate_1 can be lifted by a hoist_8 only if the hoist_8 is at the same place distributor_3 as the crate_1, the hoist_8 is available, and the crate_1 is clear. </PRECON> Use hoist_8 to lift crate_1 from pallet_8 at distributor_3 <EFFECT> Once a crate_1 has been lifted by a hoist_8 from a pallet_8 at a place distributor_3, the crate_1 is not at the place distributor_3, the hoist_8 is lifting the crate_1, the hoist_8 is not available, the pallet_8 is clear, and the crate_1 is not on the pallet_8. </EFFECT> \n <PRECON> A crate_1 can be loaded by a hoist_8 onto a truck_1 at a place distributor_3 only if the hoist_8 is at the same place distributor_3, the truck_1 is at the same place distributor_3, and the hoist_8 is lifting the crate_1. </PRECON> Use hoist_8 to load crate_1 into truck_1 at distributor_3 <EFFECT> Once a crate_1 has been loaded by a hoist_8 onto a truck_1 at a place distributor_3. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_1 is in the truck_1. </PRECON> Use hoist_4 to unload crate_1 from truck_1 at depot_4 <EFFECT> Once a crate_1 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_1 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_1. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from distributor_3 to depot_3 only if the truck_1 is at the distributor_3. </PRECON> drive truck_1 from distributor_3 to depot_3 <EFFECT> Once a truck_1 has been driven from distributor_3 to depot_3, it is not at the origin distributor_3 and is at the destination depot_3. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_3 to depot_4 only if the truck_1 is at the depot_3. </PRECON> drive truck_1 from depot_3 to depot_4 <EFFECT> Once a truck_1 has been driven from depot_3 to depot_4, it is not at the origin depot_3 and is at the destination depot_4. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_2 is in the truck_1. </PRECON> Use hoist_4 to unload crate_2 from truck_1 at depot_4 <EFFECT> Once a crate_2 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_2 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_2. </EFFECT> WRONG \n <PRECON> A crate_1 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_1 is in the truck_1. </PRECON> Use hoist_4 to unload crate_1 from truck_1 at depot_4 <EFFECT> Once a crate_1 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_1 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_1. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_4 to a pallet_4 only if the hoist_4 and pallet_4 are both at the place depot_4, the pallet_4 is clear, and the hoist_4 is lifting the crate_1. </PRECON> Use hoist_4 to drop crate_1 to pallet_4 at depot_4 <EFFECT> Once a crate_1 has been dropped by a hoist_4 to a pallet_4 at a place depot_4, the hoist_4 is available, the hoist_4 is not lifting the crate_1, the crate_1 is at the place depot_4, the pallet_4 is not clear, the crate_1 is clear, and the crate_1 is on the pallet_4. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_4 to depot_3 only if the truck_1 is at the depot_4. </PRECON> drive truck_1 from depot_4 to depot_3 <EFFECT> Once a truck_1 has been driven from depot_4 to depot_3, it is not at the origin depot_4 and is at the destination depot_3. </EFFECT> \n <PRECON> A crate_2 can be loaded by a hoist_3 onto a truck_1 at a place depot_3 only if the hoist_3 is at the same place depot_3, the truck_1 is at the same place depot_3, and the hoist_3 is lifting the crate_2. </PRECON> Use hoist_3 to load crate_2 into truck_1 at depot_3 <EFFECT> Once a crate_2 has been loaded by a hoist_3 onto a truck_1 at a place depot_3. </EFFECT> \n <PRECON> A truck_1 can be driven from depot_3 to depot_4 only if the truck_1 is at the depot_3. </PRECON> drive truck_1 from depot_3 to depot_4 <EFFECT> Once a truck_1 has been driven from depot_3 to depot_4, it is not at the origin depot_3 and is at the destination depot_4. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_4 from a truck_1 at a place depot_4 only if the hoist_4 is at the same place depot_4 as the truck_1, the hoist_4 is available, and the crate_2 is in the truck_1. </PRECON> Use hoist_4 to unload crate_2 from truck_1 at depot_4 <EFFECT> Once a crate_2 has been unloaded by a hoist_4 from a truck_1 at a place depot_4, the crate_2 is not in the truck_1, the hoist_4 is not available, and the hoist_4 is lifting the crate_2. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_4 to a crate_1 only if the hoist_4 and crate_1 are both at the place depot_4, the crate_1 is clear, and the hoist_4 is lifting the crate_2. </PRECON> Use hoist_4 to drop crate_2 to crate_1 at depot_4 <EFFECT> Once a crate_2 has been dropped by a hoist_4 to a crate_1 at a place depot_4, the hoist_4 is available, the hoist_4 is not lifting the crate_2, the crate_2 is at the place depot_4, the crate_1 is not clear, the crate_2 is clear, and the crate_2 is on the crate_1. </EFFECT> \n</PLAN>"}
{"domain": "depots", "instance_id": "80", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the logistics of transporting crates between a number of depots and distributors via trucks that are loaded by hoists. Depots and distributors are directly connected by roads (trucks can drive between any two depots or distributors).\nA depot is a type of place.\nA distributor is a type of place.\nA pallet is a type of surface.\nA crate is a type of surface.\nHere are the actions that can be performed:\nDrive a truck from one place to another place.\nUse a hoist to lift a crate from a surface at a place.\nUse a hoist to drop a crate to a surface at a place.\nUse a hoist to load a crate into a truck at a place.\nUse a hoist to unload a crate from a truck at a place.\nThe following are the restrictions on the actions:\nA truck can be driven from one place to another place only if the truck is at the origin place.\nOnce a truck has been driven from one place to another, it is not at the origin place and is at the destination place.\nA crate can be lifted by a hoist only if the hoist is at the same place as the crate, the hoist is available, and the crate is clear.\nOnce a crate has been lifted by a hoist from a surface at a place, the crate is not at the place, the hoist is lifting the crate, the hoist is not available, the surface is clear, and the crate is not on the surface.\nA crate can be dropped by a hoist to a surface only if the hoist and surface are both at the place, the surface is clear, and the hoist is lifting the crate.\nOnce a crate has been dropped by a hoist to a surface at a place, the hoist is available, the hoist is not lifting the crate, the crate is at the place, the surface is not clear, the crate is clear, and the crate is on the surface.\nA crate can be loaded by a hoist onto a truck at a place only if the hoist is at the same place, the truck is at the same place, and the hoist is lifting the crate.\nOnce a crate has been loaded by a hoist onto a truck at a place.\nA crate can be unloaded by a hoist from a truck at a place only if the hoist is at the same place as the truck, the hoist is available, and the crate is in the truck.\nOnce a crate has been unloaded by a hoist from a truck at a place, the crate is not in the truck, the hoist is not available, and the hoist is lifting the crate.", "input": "As initial conditions I have that, hoist_0 is available, pallet_9 is at distributor_3, hoist_3 is available, crate_1 is at depot_3, pallet_1 is at depot_1, crate_4 is at distributor_4, hoist_4 is available, hoist_6 is at distributor_0, pallet_7 is at distributor_1, hoist_8 is at distributor_2, hoist_1 is available, pallet_0 is at depot_0, pallet_8 is at distributor_2, hoist_10 is available, crate_0 is clear, crate_3 is on pallet_1, hoist_6 is available, hoist_0 is at depot_0, pallet_2 is clear, hoist_5 is available, pallet_8 is clear, hoist_2 is available, crate_4 is on pallet_10, crate_1 is on pallet_3, hoist_7 is at distributor_1, hoist_4 is at depot_4, crate_2 is clear, crate_1 is clear, pallet_5 is clear, crate_3 is at depot_1, pallet_6 is clear, crate_4 is clear, pallet_4 is at depot_4, crate_0 is at distributor_3, pallet_4 is clear, hoist_1 is at depot_1, truck_1 is at distributor_5, truck_0 is at depot_4, pallet_2 is at depot_2, hoist_10 is at distributor_4, hoist_3 is at depot_3, hoist_11 is at distributor_5, hoist_5 is at depot_5, crate_2 is on pallet_0, crate_2 is at depot_0, hoist_9 is available, pallet_6 is at distributor_0, pallet_3 is at depot_3, crate_0 is on pallet_9, pallet_11 is clear, pallet_10 is at distributor_4, truck_2 is at depot_3, hoist_9 is at distributor_3, pallet_7 is clear, pallet_5 is at depot_5, hoist_11 is available, crate_3 is clear, pallet_11 is at distributor_5, hoist_2 is at depot_2, hoist_8 is available, hoist_7 is available.\nMy goal is to have that crate_0 is on pallet_8, crate_1 is on crate_3, crate_3 is on pallet_7, crate_2 is on pallet_1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A truck_2 can be driven from depot_3 to depot_0 only if the truck_2 is at the depot_3. </PRECON> drive truck_2 from depot_3 to depot_0 <EFFECT> Once a truck_2 has been driven from depot_3 to depot_0, it is not at the origin depot_3 and is at the destination depot_0. </EFFECT> \n <PRECON> A crate_2 can be lifted by a hoist_0 only if the hoist_0 is at the same place depot_0 as the crate_2, the hoist_0 is available, and the crate_2 is clear. </PRECON> Use hoist_0 to lift crate_2 from pallet_0 at depot_0 <EFFECT> Once a crate_2 has been lifted by a hoist_0 from a pallet_0 at a place depot_0, the crate_2 is not at the place depot_0, the hoist_0 is lifting the crate_2, the hoist_0 is not available, the pallet_0 is clear, and the crate_2 is not on the pallet_0. </EFFECT> \n <PRECON> A crate_2 can be loaded by a hoist_0 onto a truck_2 at a place depot_0 only if the hoist_0 is at the same place depot_0, the truck_2 is at the same place depot_0, and the hoist_0 is lifting the crate_2. </PRECON> Use hoist_0 to load crate_2 into truck_2 at depot_0 <EFFECT> Once a crate_2 has been loaded by a hoist_0 onto a truck_2 at a place depot_0. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_0 to depot_1 only if the truck_2 is at the depot_0. </PRECON> drive truck_2 from depot_0 to depot_1 <EFFECT> Once a truck_2 has been driven from depot_0 to depot_1, it is not at the origin depot_0 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_0 can be lifted by a hoist_9 only if the hoist_9 is at the same place distributor_3 as the crate_0, the hoist_9 is available, and the crate_0 is clear. </PRECON> Use hoist_9 to lift crate_0 from pallet_9 at distributor_3 <EFFECT> Once a crate_0 has been lifted by a hoist_9 from a pallet_9 at a place distributor_3, the crate_0 is not at the place distributor_3, the hoist_9 is lifting the crate_0, the hoist_9 is not available, the pallet_9 is clear, and the crate_0 is not on the pallet_9. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_7 from a truck_2 at a place distributor_1 only if the hoist_7 is at the same place distributor_1 as the truck_2, the hoist_7 is available, and the crate_1 is in the truck_2. </PRECON> Use hoist_7 to unload crate_1 from truck_2 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_7 from a truck_2 at a place distributor_1, the crate_1 is not in the truck_2, the hoist_7 is not available, and the hoist_7 is lifting the crate_1. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from depot_4 to distributor_2 only if the truck_0 is at the depot_4. </PRECON> drive truck_0 from depot_4 to distributor_2 <EFFECT> Once a truck_0 has been driven from depot_4 to distributor_2, it is not at the origin depot_4 and is at the destination distributor_2. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_2 to distributor_3 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to distributor_3 <EFFECT> Once a truck_0 has been driven from distributor_2 to distributor_3, it is not at the origin distributor_2 and is at the destination distributor_3. </EFFECT> \n <PRECON> A crate_0 can be loaded by a hoist_9 onto a truck_0 at a place distributor_3 only if the hoist_9 is at the same place distributor_3, the truck_0 is at the same place distributor_3, and the hoist_9 is lifting the crate_0. </PRECON> Use hoist_9 to load crate_0 into truck_0 at distributor_3 <EFFECT> Once a crate_0 has been loaded by a hoist_9 onto a truck_0 at a place distributor_3. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_3 to distributor_2 only if the truck_0 is at the distributor_3. </PRECON> drive truck_0 from distributor_3 to distributor_2 <EFFECT> Once a truck_0 has been driven from distributor_3 to distributor_2, it is not at the origin distributor_3 and is at the destination distributor_2. </EFFECT> \n <PRECON> A crate_0 can be unloaded by a hoist_8 from a truck_0 at a place distributor_2 only if the hoist_8 is at the same place distributor_2 as the truck_0, the hoist_8 is available, and the crate_0 is in the truck_0. </PRECON> Use hoist_8 to unload crate_0 from truck_0 at distributor_2 <EFFECT> Once a crate_0 has been unloaded by a hoist_8 from a truck_0 at a place distributor_2, the crate_0 is not in the truck_0, the hoist_8 is not available, and the hoist_8 is lifting the crate_0. </EFFECT> \n <PRECON> A crate_3 can be loaded by a hoist_1 onto a truck_2 at a place depot_1 only if the hoist_1 is at the same place depot_1, the truck_2 is at the same place depot_1, and the hoist_1 is lifting the crate_3. </PRECON> Use hoist_1 to load crate_3 into truck_2 at depot_1 <EFFECT> Once a crate_3 has been loaded by a hoist_1 onto a truck_2 at a place depot_1. </EFFECT> WRONG \n <PRECON> A crate_0 can be dropped by a hoist_8 to a pallet_8 only if the hoist_8 and pallet_8 are both at the place distributor_2, the pallet_8 is clear, and the hoist_8 is lifting the crate_0. </PRECON> Use hoist_8 to drop crate_0 to pallet_8 at distributor_2 <EFFECT> Once a crate_0 has been dropped by a hoist_8 to a pallet_8 at a place distributor_2, the hoist_8 is available, the hoist_8 is not lifting the crate_0, the crate_0 is at the place distributor_2, the pallet_8 is not clear, the crate_0 is clear, and the crate_0 is on the pallet_8. </EFFECT> \n <PRECON> A crate_3 can be lifted by a hoist_1 only if the hoist_1 is at the same place depot_1 as the crate_3, the hoist_1 is available, and the crate_3 is clear. </PRECON> Use hoist_1 to lift crate_3 from pallet_1 at depot_1 <EFFECT> Once a crate_3 has been lifted by a hoist_1 from a pallet_1 at a place depot_1, the crate_3 is not at the place depot_1, the hoist_1 is lifting the crate_3, the hoist_1 is not available, the pallet_1 is clear, and the crate_3 is not on the pallet_1. </EFFECT> \n <PRECON> A crate_3 can be loaded by a hoist_1 onto a truck_2 at a place depot_1 only if the hoist_1 is at the same place depot_1, the truck_2 is at the same place depot_1, and the hoist_1 is lifting the crate_3. </PRECON> Use hoist_1 to load crate_3 into truck_2 at depot_1 <EFFECT> Once a crate_3 has been loaded by a hoist_1 onto a truck_2 at a place depot_1. </EFFECT> \n <PRECON> A crate_1 can be lifted by a hoist_3 only if the hoist_3 is at the same place depot_3 as the crate_1, the hoist_3 is available, and the crate_1 is clear. </PRECON> Use hoist_3 to lift crate_1 from pallet_3 at depot_3 <EFFECT> Once a crate_1 has been lifted by a hoist_3 from a pallet_3 at a place depot_3, the crate_1 is not at the place depot_3, the hoist_3 is lifting the crate_1, the hoist_3 is not available, the pallet_3 is clear, and the crate_1 is not on the pallet_3. </EFFECT> WRONG \n <PRECON> A crate_2 can be unloaded by a hoist_1 from a truck_2 at a place depot_1 only if the hoist_1 is at the same place depot_1 as the truck_2, the hoist_1 is available, and the crate_2 is in the truck_2. </PRECON> Use hoist_1 to unload crate_2 from truck_2 at depot_1 <EFFECT> Once a crate_2 has been unloaded by a hoist_1 from a truck_2 at a place depot_1, the crate_2 is not in the truck_2, the hoist_1 is not available, and the hoist_1 is lifting the crate_2. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_1 to depot_3 only if the truck_2 is at the depot_1. </PRECON> drive truck_2 from depot_1 to depot_3 <EFFECT> Once a truck_2 has been driven from depot_1 to depot_3, it is not at the origin depot_1 and is at the destination depot_3. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_3 to distributor_1 only if the truck_2 is at the depot_3. </PRECON> drive truck_2 from depot_3 to distributor_1 <EFFECT> Once a truck_2 has been driven from depot_3 to distributor_1, it is not at the origin depot_3 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_7 from a truck_2 at a place distributor_1 only if the hoist_7 is at the same place distributor_1 as the truck_2, the hoist_7 is available, and the crate_1 is in the truck_2. </PRECON> Use hoist_7 to unload crate_1 from truck_2 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_7 from a truck_2 at a place distributor_1, the crate_1 is not in the truck_2, the hoist_7 is not available, and the hoist_7 is lifting the crate_1. </EFFECT> WRONG \n <PRECON> A crate_3 can be unloaded by a hoist_7 from a truck_2 at a place distributor_1 only if the hoist_7 is at the same place distributor_1 as the truck_2, the hoist_7 is available, and the crate_3 is in the truck_2. </PRECON> Use hoist_7 to unload crate_3 from truck_2 at distributor_1 <EFFECT> Once a crate_3 has been unloaded by a hoist_7 from a truck_2 at a place distributor_1, the crate_3 is not in the truck_2, the hoist_7 is not available, and the hoist_7 is lifting the crate_3. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_1 to a pallet_1 only if the hoist_1 and pallet_1 are both at the place depot_1, the pallet_1 is clear, and the hoist_1 is lifting the crate_2. </PRECON> Use hoist_1 to drop crate_2 to pallet_1 at depot_1 <EFFECT> Once a crate_2 has been dropped by a hoist_1 to a pallet_1 at a place depot_1, the hoist_1 is available, the hoist_1 is not lifting the crate_2, the crate_2 is at the place depot_1, the pallet_1 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_1. </EFFECT> \n <PRECON> A crate_3 can be dropped by a hoist_7 to a pallet_7 only if the hoist_7 and pallet_7 are both at the place distributor_1, the pallet_7 is clear, and the hoist_7 is lifting the crate_3. </PRECON> Use hoist_7 to drop crate_3 to pallet_7 at distributor_1 <EFFECT> Once a crate_3 has been dropped by a hoist_7 to a pallet_7 at a place distributor_1, the hoist_7 is available, the hoist_7 is not lifting the crate_3, the crate_3 is at the place distributor_1, the pallet_7 is not clear, the crate_3 is clear, and the crate_3 is on the pallet_7. </EFFECT> \n <PRECON> A crate_1 can be lifted by a hoist_3 only if the hoist_3 is at the same place depot_3 as the crate_1, the hoist_3 is available, and the crate_1 is clear. </PRECON> Use hoist_3 to lift crate_1 from pallet_3 at depot_3 <EFFECT> Once a crate_1 has been lifted by a hoist_3 from a pallet_3 at a place depot_3, the crate_1 is not at the place depot_3, the hoist_3 is lifting the crate_1, the hoist_3 is not available, the pallet_3 is clear, and the crate_1 is not on the pallet_3. </EFFECT> \n <PRECON> A truck_2 can be driven from distributor_1 to depot_3 only if the truck_2 is at the distributor_1. </PRECON> drive truck_2 from distributor_1 to depot_3 <EFFECT> Once a truck_2 has been driven from distributor_1 to depot_3, it is not at the origin distributor_1 and is at the destination depot_3. </EFFECT> \n <PRECON> A crate_1 can be loaded by a hoist_3 onto a truck_2 at a place depot_3 only if the hoist_3 is at the same place depot_3, the truck_2 is at the same place depot_3, and the hoist_3 is lifting the crate_1. </PRECON> Use hoist_3 to load crate_1 into truck_2 at depot_3 <EFFECT> Once a crate_1 has been loaded by a hoist_3 onto a truck_2 at a place depot_3. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_3 to distributor_1 only if the truck_2 is at the depot_3. </PRECON> drive truck_2 from depot_3 to distributor_1 <EFFECT> Once a truck_2 has been driven from depot_3 to distributor_1, it is not at the origin depot_3 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_7 from a truck_2 at a place distributor_1 only if the hoist_7 is at the same place distributor_1 as the truck_2, the hoist_7 is available, and the crate_1 is in the truck_2. </PRECON> Use hoist_7 to unload crate_1 from truck_2 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_7 from a truck_2 at a place distributor_1, the crate_1 is not in the truck_2, the hoist_7 is not available, and the hoist_7 is lifting the crate_1. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_7 to a crate_3 only if the hoist_7 and crate_3 are both at the place distributor_1, the crate_3 is clear, and the hoist_7 is lifting the crate_1. </PRECON> Use hoist_7 to drop crate_1 to crate_3 at distributor_1 <EFFECT> Once a crate_1 has been dropped by a hoist_7 to a crate_3 at a place distributor_1, the hoist_7 is available, the hoist_7 is not lifting the crate_1, the crate_1 is at the place distributor_1, the crate_3 is not clear, the crate_1 is clear, and the crate_1 is on the crate_3. </EFFECT> \n</PLAN>", "plan_length": 25, "raw_plan": ["(drive truck2 depot3 depot0)", "(lift hoist0 crate2 pallet0 depot0)", "(load hoist0 crate2 truck2 depot0)", "(drive truck2 depot0 depot1)", "(lift hoist9 crate0 pallet9 distributor3)", "(drive truck0 depot4 distributor2)", "(drive truck0 distributor2 distributor3)", "(load hoist9 crate0 truck0 distributor3)", "(drive truck0 distributor3 distributor2)", "(unload hoist8 crate0 truck0 distributor2)", "(drop hoist8 crate0 pallet8 distributor2)", "(lift hoist1 crate3 pallet1 depot1)", "(load hoist1 crate3 truck2 depot1)", "(unload hoist1 crate2 truck2 depot1)", "(drive truck2 depot1 depot3)", "(drive truck2 depot3 distributor1)", "(unload hoist7 crate3 truck2 distributor1)", "(drop hoist1 crate2 pallet1 depot1)", "(drop hoist7 crate3 pallet7 distributor1)", "(lift hoist3 crate1 pallet3 depot3)", "(drive truck2 distributor1 depot3)", "(load hoist3 crate1 truck2 depot3)", "(drive truck2 depot3 distributor1)", "(unload hoist7 crate1 truck2 distributor1)", "(drop hoist7 crate1 crate3 distributor1)"], "full_text_prompt": "I have to plan the logistics of transporting crates between a number of depots and distributors via trucks that are loaded by hoists. Depots and distributors are directly connected by roads (trucks can drive between any two depots or distributors).\nA depot is a type of place.\nA distributor is a type of place.\nA pallet is a type of surface.\nA crate is a type of surface.\nHere are the actions that can be performed:\nDrive a truck from one place to another place.\nUse a hoist to lift a crate from a surface at a place.\nUse a hoist to drop a crate to a surface at a place.\nUse a hoist to load a crate into a truck at a place.\nUse a hoist to unload a crate from a truck at a place.\nThe following are the restrictions on the actions:\nA truck can be driven from one place to another place only if the truck is at the origin place.\nOnce a truck has been driven from one place to another, it is not at the origin place and is at the destination place.\nA crate can be lifted by a hoist only if the hoist is at the same place as the crate, the hoist is available, and the crate is clear.\nOnce a crate has been lifted by a hoist from a surface at a place, the crate is not at the place, the hoist is lifting the crate, the hoist is not available, the surface is clear, and the crate is not on the surface.\nA crate can be dropped by a hoist to a surface only if the hoist and surface are both at the place, the surface is clear, and the hoist is lifting the crate.\nOnce a crate has been dropped by a hoist to a surface at a place, the hoist is available, the hoist is not lifting the crate, the crate is at the place, the surface is not clear, the crate is clear, and the crate is on the surface.\nA crate can be loaded by a hoist onto a truck at a place only if the hoist is at the same place, the truck is at the same place, and the hoist is lifting the crate.\nOnce a crate has been loaded by a hoist onto a truck at a place.\nA crate can be unloaded by a hoist from a truck at a place only if the hoist is at the same place as the truck, the hoist is available, and the crate is in the truck.\nOnce a crate has been unloaded by a hoist from a truck at a place, the crate is not in the truck, the hoist is not available, and the hoist is lifting the crate.As initial conditions I have that, hoist_0 is available, pallet_9 is at distributor_3, hoist_3 is available, crate_1 is at depot_3, pallet_1 is at depot_1, crate_4 is at distributor_4, hoist_4 is available, hoist_6 is at distributor_0, pallet_7 is at distributor_1, hoist_8 is at distributor_2, hoist_1 is available, pallet_0 is at depot_0, pallet_8 is at distributor_2, hoist_10 is available, crate_0 is clear, crate_3 is on pallet_1, hoist_6 is available, hoist_0 is at depot_0, pallet_2 is clear, hoist_5 is available, pallet_8 is clear, hoist_2 is available, crate_4 is on pallet_10, crate_1 is on pallet_3, hoist_7 is at distributor_1, hoist_4 is at depot_4, crate_2 is clear, crate_1 is clear, pallet_5 is clear, crate_3 is at depot_1, pallet_6 is clear, crate_4 is clear, pallet_4 is at depot_4, crate_0 is at distributor_3, pallet_4 is clear, hoist_1 is at depot_1, truck_1 is at distributor_5, truck_0 is at depot_4, pallet_2 is at depot_2, hoist_10 is at distributor_4, hoist_3 is at depot_3, hoist_11 is at distributor_5, hoist_5 is at depot_5, crate_2 is on pallet_0, crate_2 is at depot_0, hoist_9 is available, pallet_6 is at distributor_0, pallet_3 is at depot_3, crate_0 is on pallet_9, pallet_11 is clear, pallet_10 is at distributor_4, truck_2 is at depot_3, hoist_9 is at distributor_3, pallet_7 is clear, pallet_5 is at depot_5, hoist_11 is available, crate_3 is clear, pallet_11 is at distributor_5, hoist_2 is at depot_2, hoist_8 is available, hoist_7 is available.My goal is to have that crate_0 is on pallet_8, crate_1 is on crate_3, crate_3 is on pallet_7, crate_2 is on pallet_1.My plan is as follows:\n<PLAN>\n <PRECON> A truck_2 can be driven from depot_3 to depot_0 only if the truck_2 is at the depot_3. </PRECON> drive truck_2 from depot_3 to depot_0 <EFFECT> Once a truck_2 has been driven from depot_3 to depot_0, it is not at the origin depot_3 and is at the destination depot_0. </EFFECT> \n <PRECON> A crate_2 can be lifted by a hoist_0 only if the hoist_0 is at the same place depot_0 as the crate_2, the hoist_0 is available, and the crate_2 is clear. </PRECON> Use hoist_0 to lift crate_2 from pallet_0 at depot_0 <EFFECT> Once a crate_2 has been lifted by a hoist_0 from a pallet_0 at a place depot_0, the crate_2 is not at the place depot_0, the hoist_0 is lifting the crate_2, the hoist_0 is not available, the pallet_0 is clear, and the crate_2 is not on the pallet_0. </EFFECT> \n <PRECON> A crate_2 can be loaded by a hoist_0 onto a truck_2 at a place depot_0 only if the hoist_0 is at the same place depot_0, the truck_2 is at the same place depot_0, and the hoist_0 is lifting the crate_2. </PRECON> Use hoist_0 to load crate_2 into truck_2 at depot_0 <EFFECT> Once a crate_2 has been loaded by a hoist_0 onto a truck_2 at a place depot_0. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_0 to depot_1 only if the truck_2 is at the depot_0. </PRECON> drive truck_2 from depot_0 to depot_1 <EFFECT> Once a truck_2 has been driven from depot_0 to depot_1, it is not at the origin depot_0 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_0 can be lifted by a hoist_9 only if the hoist_9 is at the same place distributor_3 as the crate_0, the hoist_9 is available, and the crate_0 is clear. </PRECON> Use hoist_9 to lift crate_0 from pallet_9 at distributor_3 <EFFECT> Once a crate_0 has been lifted by a hoist_9 from a pallet_9 at a place distributor_3, the crate_0 is not at the place distributor_3, the hoist_9 is lifting the crate_0, the hoist_9 is not available, the pallet_9 is clear, and the crate_0 is not on the pallet_9. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_7 from a truck_2 at a place distributor_1 only if the hoist_7 is at the same place distributor_1 as the truck_2, the hoist_7 is available, and the crate_1 is in the truck_2. </PRECON> Use hoist_7 to unload crate_1 from truck_2 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_7 from a truck_2 at a place distributor_1, the crate_1 is not in the truck_2, the hoist_7 is not available, and the hoist_7 is lifting the crate_1. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from depot_4 to distributor_2 only if the truck_0 is at the depot_4. </PRECON> drive truck_0 from depot_4 to distributor_2 <EFFECT> Once a truck_0 has been driven from depot_4 to distributor_2, it is not at the origin depot_4 and is at the destination distributor_2. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_2 to distributor_3 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to distributor_3 <EFFECT> Once a truck_0 has been driven from distributor_2 to distributor_3, it is not at the origin distributor_2 and is at the destination distributor_3. </EFFECT> \n <PRECON> A crate_0 can be loaded by a hoist_9 onto a truck_0 at a place distributor_3 only if the hoist_9 is at the same place distributor_3, the truck_0 is at the same place distributor_3, and the hoist_9 is lifting the crate_0. </PRECON> Use hoist_9 to load crate_0 into truck_0 at distributor_3 <EFFECT> Once a crate_0 has been loaded by a hoist_9 onto a truck_0 at a place distributor_3. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_3 to distributor_2 only if the truck_0 is at the distributor_3. </PRECON> drive truck_0 from distributor_3 to distributor_2 <EFFECT> Once a truck_0 has been driven from distributor_3 to distributor_2, it is not at the origin distributor_3 and is at the destination distributor_2. </EFFECT> \n <PRECON> A crate_0 can be unloaded by a hoist_8 from a truck_0 at a place distributor_2 only if the hoist_8 is at the same place distributor_2 as the truck_0, the hoist_8 is available, and the crate_0 is in the truck_0. </PRECON> Use hoist_8 to unload crate_0 from truck_0 at distributor_2 <EFFECT> Once a crate_0 has been unloaded by a hoist_8 from a truck_0 at a place distributor_2, the crate_0 is not in the truck_0, the hoist_8 is not available, and the hoist_8 is lifting the crate_0. </EFFECT> \n <PRECON> A crate_3 can be loaded by a hoist_1 onto a truck_2 at a place depot_1 only if the hoist_1 is at the same place depot_1, the truck_2 is at the same place depot_1, and the hoist_1 is lifting the crate_3. </PRECON> Use hoist_1 to load crate_3 into truck_2 at depot_1 <EFFECT> Once a crate_3 has been loaded by a hoist_1 onto a truck_2 at a place depot_1. </EFFECT> WRONG \n <PRECON> A crate_0 can be dropped by a hoist_8 to a pallet_8 only if the hoist_8 and pallet_8 are both at the place distributor_2, the pallet_8 is clear, and the hoist_8 is lifting the crate_0. </PRECON> Use hoist_8 to drop crate_0 to pallet_8 at distributor_2 <EFFECT> Once a crate_0 has been dropped by a hoist_8 to a pallet_8 at a place distributor_2, the hoist_8 is available, the hoist_8 is not lifting the crate_0, the crate_0 is at the place distributor_2, the pallet_8 is not clear, the crate_0 is clear, and the crate_0 is on the pallet_8. </EFFECT> \n <PRECON> A crate_3 can be lifted by a hoist_1 only if the hoist_1 is at the same place depot_1 as the crate_3, the hoist_1 is available, and the crate_3 is clear. </PRECON> Use hoist_1 to lift crate_3 from pallet_1 at depot_1 <EFFECT> Once a crate_3 has been lifted by a hoist_1 from a pallet_1 at a place depot_1, the crate_3 is not at the place depot_1, the hoist_1 is lifting the crate_3, the hoist_1 is not available, the pallet_1 is clear, and the crate_3 is not on the pallet_1. </EFFECT> \n <PRECON> A crate_3 can be loaded by a hoist_1 onto a truck_2 at a place depot_1 only if the hoist_1 is at the same place depot_1, the truck_2 is at the same place depot_1, and the hoist_1 is lifting the crate_3. </PRECON> Use hoist_1 to load crate_3 into truck_2 at depot_1 <EFFECT> Once a crate_3 has been loaded by a hoist_1 onto a truck_2 at a place depot_1. </EFFECT> \n <PRECON> A crate_1 can be lifted by a hoist_3 only if the hoist_3 is at the same place depot_3 as the crate_1, the hoist_3 is available, and the crate_1 is clear. </PRECON> Use hoist_3 to lift crate_1 from pallet_3 at depot_3 <EFFECT> Once a crate_1 has been lifted by a hoist_3 from a pallet_3 at a place depot_3, the crate_1 is not at the place depot_3, the hoist_3 is lifting the crate_1, the hoist_3 is not available, the pallet_3 is clear, and the crate_1 is not on the pallet_3. </EFFECT> WRONG \n <PRECON> A crate_2 can be unloaded by a hoist_1 from a truck_2 at a place depot_1 only if the hoist_1 is at the same place depot_1 as the truck_2, the hoist_1 is available, and the crate_2 is in the truck_2. </PRECON> Use hoist_1 to unload crate_2 from truck_2 at depot_1 <EFFECT> Once a crate_2 has been unloaded by a hoist_1 from a truck_2 at a place depot_1, the crate_2 is not in the truck_2, the hoist_1 is not available, and the hoist_1 is lifting the crate_2. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_1 to depot_3 only if the truck_2 is at the depot_1. </PRECON> drive truck_2 from depot_1 to depot_3 <EFFECT> Once a truck_2 has been driven from depot_1 to depot_3, it is not at the origin depot_1 and is at the destination depot_3. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_3 to distributor_1 only if the truck_2 is at the depot_3. </PRECON> drive truck_2 from depot_3 to distributor_1 <EFFECT> Once a truck_2 has been driven from depot_3 to distributor_1, it is not at the origin depot_3 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_7 from a truck_2 at a place distributor_1 only if the hoist_7 is at the same place distributor_1 as the truck_2, the hoist_7 is available, and the crate_1 is in the truck_2. </PRECON> Use hoist_7 to unload crate_1 from truck_2 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_7 from a truck_2 at a place distributor_1, the crate_1 is not in the truck_2, the hoist_7 is not available, and the hoist_7 is lifting the crate_1. </EFFECT> WRONG \n <PRECON> A crate_3 can be unloaded by a hoist_7 from a truck_2 at a place distributor_1 only if the hoist_7 is at the same place distributor_1 as the truck_2, the hoist_7 is available, and the crate_3 is in the truck_2. </PRECON> Use hoist_7 to unload crate_3 from truck_2 at distributor_1 <EFFECT> Once a crate_3 has been unloaded by a hoist_7 from a truck_2 at a place distributor_1, the crate_3 is not in the truck_2, the hoist_7 is not available, and the hoist_7 is lifting the crate_3. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_1 to a pallet_1 only if the hoist_1 and pallet_1 are both at the place depot_1, the pallet_1 is clear, and the hoist_1 is lifting the crate_2. </PRECON> Use hoist_1 to drop crate_2 to pallet_1 at depot_1 <EFFECT> Once a crate_2 has been dropped by a hoist_1 to a pallet_1 at a place depot_1, the hoist_1 is available, the hoist_1 is not lifting the crate_2, the crate_2 is at the place depot_1, the pallet_1 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_1. </EFFECT> \n <PRECON> A crate_3 can be dropped by a hoist_7 to a pallet_7 only if the hoist_7 and pallet_7 are both at the place distributor_1, the pallet_7 is clear, and the hoist_7 is lifting the crate_3. </PRECON> Use hoist_7 to drop crate_3 to pallet_7 at distributor_1 <EFFECT> Once a crate_3 has been dropped by a hoist_7 to a pallet_7 at a place distributor_1, the hoist_7 is available, the hoist_7 is not lifting the crate_3, the crate_3 is at the place distributor_1, the pallet_7 is not clear, the crate_3 is clear, and the crate_3 is on the pallet_7. </EFFECT> \n <PRECON> A crate_1 can be lifted by a hoist_3 only if the hoist_3 is at the same place depot_3 as the crate_1, the hoist_3 is available, and the crate_1 is clear. </PRECON> Use hoist_3 to lift crate_1 from pallet_3 at depot_3 <EFFECT> Once a crate_1 has been lifted by a hoist_3 from a pallet_3 at a place depot_3, the crate_1 is not at the place depot_3, the hoist_3 is lifting the crate_1, the hoist_3 is not available, the pallet_3 is clear, and the crate_1 is not on the pallet_3. </EFFECT> \n <PRECON> A truck_2 can be driven from distributor_1 to depot_3 only if the truck_2 is at the distributor_1. </PRECON> drive truck_2 from distributor_1 to depot_3 <EFFECT> Once a truck_2 has been driven from distributor_1 to depot_3, it is not at the origin distributor_1 and is at the destination depot_3. </EFFECT> \n <PRECON> A crate_1 can be loaded by a hoist_3 onto a truck_2 at a place depot_3 only if the hoist_3 is at the same place depot_3, the truck_2 is at the same place depot_3, and the hoist_3 is lifting the crate_1. </PRECON> Use hoist_3 to load crate_1 into truck_2 at depot_3 <EFFECT> Once a crate_1 has been loaded by a hoist_3 onto a truck_2 at a place depot_3. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_3 to distributor_1 only if the truck_2 is at the depot_3. </PRECON> drive truck_2 from depot_3 to distributor_1 <EFFECT> Once a truck_2 has been driven from depot_3 to distributor_1, it is not at the origin depot_3 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_7 from a truck_2 at a place distributor_1 only if the hoist_7 is at the same place distributor_1 as the truck_2, the hoist_7 is available, and the crate_1 is in the truck_2. </PRECON> Use hoist_7 to unload crate_1 from truck_2 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_7 from a truck_2 at a place distributor_1, the crate_1 is not in the truck_2, the hoist_7 is not available, and the hoist_7 is lifting the crate_1. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_7 to a crate_3 only if the hoist_7 and crate_3 are both at the place distributor_1, the crate_3 is clear, and the hoist_7 is lifting the crate_1. </PRECON> Use hoist_7 to drop crate_1 to crate_3 at distributor_1 <EFFECT> Once a crate_1 has been dropped by a hoist_7 to a crate_3 at a place distributor_1, the hoist_7 is available, the hoist_7 is not lifting the crate_1, the crate_1 is at the place distributor_1, the crate_3 is not clear, the crate_1 is clear, and the crate_1 is on the crate_3. </EFFECT> \n</PLAN>"}
{"domain": "depots", "instance_id": "120", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the logistics of transporting crates between a number of depots and distributors via trucks that are loaded by hoists. Depots and distributors are directly connected by roads (trucks can drive between any two depots or distributors).\nA depot is a type of place.\nA distributor is a type of place.\nA pallet is a type of surface.\nA crate is a type of surface.\nHere are the actions that can be performed:\nDrive a truck from one place to another place.\nUse a hoist to lift a crate from a surface at a place.\nUse a hoist to drop a crate to a surface at a place.\nUse a hoist to load a crate into a truck at a place.\nUse a hoist to unload a crate from a truck at a place.\nThe following are the restrictions on the actions:\nA truck can be driven from one place to another place only if the truck is at the origin place.\nOnce a truck has been driven from one place to another, it is not at the origin place and is at the destination place.\nA crate can be lifted by a hoist only if the hoist is at the same place as the crate, the hoist is available, and the crate is clear.\nOnce a crate has been lifted by a hoist from a surface at a place, the crate is not at the place, the hoist is lifting the crate, the hoist is not available, the surface is clear, and the crate is not on the surface.\nA crate can be dropped by a hoist to a surface only if the hoist and surface are both at the place, the surface is clear, and the hoist is lifting the crate.\nOnce a crate has been dropped by a hoist to a surface at a place, the hoist is available, the hoist is not lifting the crate, the crate is at the place, the surface is not clear, the crate is clear, and the crate is on the surface.\nA crate can be loaded by a hoist onto a truck at a place only if the hoist is at the same place, the truck is at the same place, and the hoist is lifting the crate.\nOnce a crate has been loaded by a hoist onto a truck at a place.\nA crate can be unloaded by a hoist from a truck at a place only if the hoist is at the same place as the truck, the hoist is available, and the crate is in the truck.\nOnce a crate has been unloaded by a hoist from a truck at a place, the crate is not in the truck, the hoist is not available, and the hoist is lifting the crate.", "input": "As initial conditions I have that, crate_1 is clear, hoist_7 is at distributor_3, pallet_9 is clear, truck_1 is at depot_0, pallet_9 is at distributor_5, pallet_4 is clear, pallet_1 is clear, hoist_8 is at distributor_4, pallet_0 is at depot_0, crate_2 is clear, hoist_1 is at depot_1, crate_5 is at depot_2, hoist_3 is at depot_3, hoist_5 is available, hoist_7 is available, hoist_6 is at distributor_2, hoist_5 is at distributor_1, crate_0 is on pallet_7, pallet_8 is at distributor_4, crate_5 is on crate_4, hoist_0 is at depot_0, crate_4 is at depot_2, crate_5 is clear, pallet_7 is at distributor_3, crate_0 is at distributor_3, crate_0 is clear, crate_2 is on pallet_6, pallet_6 is at distributor_2, pallet_1 is at depot_1, hoist_6 is available, crate_3 is at distributor_4, hoist_0 is available, crate_4 is on pallet_2, crate_2 is at distributor_2, hoist_8 is available, pallet_5 is at distributor_1, hoist_4 is available, hoist_9 is at distributor_5, hoist_1 is available, hoist_4 is at distributor_0, pallet_5 is clear, crate_1 is at depot_3, pallet_0 is clear, truck_2 is at depot_1, pallet_2 is at depot_2, crate_3 is clear, pallet_3 is at depot_3, truck_0 is at distributor_4, crate_3 is on pallet_8, hoist_3 is available, pallet_4 is at distributor_0, hoist_2 is at depot_2, crate_1 is on pallet_3, hoist_2 is available, hoist_9 is available.\nMy goal is to have that crate_0 is on crate_1, crate_2 is on pallet_1, crate_4 is on pallet_8, crate_5 is on pallet_4, crate_1 is on pallet_5.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A truck_0 can be driven from distributor_4 to depot_2 only if the truck_0 is at the distributor_4. </PRECON> drive truck_0 from distributor_4 to depot_2 <EFFECT> Once a truck_0 has been driven from distributor_4 to depot_2, it is not at the origin distributor_4 and is at the destination depot_2. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_1 to depot_3 only if the truck_2 is at the depot_1. </PRECON> drive truck_2 from depot_1 to depot_3 <EFFECT> Once a truck_2 has been driven from depot_1 to depot_3, it is not at the origin depot_1 and is at the destination depot_3. </EFFECT> \n <PRECON> A crate_5 can be lifted by a hoist_2 only if the hoist_2 is at the same place depot_2 as the crate_5, the hoist_2 is available, and the crate_5 is clear. </PRECON> Use hoist_2 to lift crate_5 from crate_4 at depot_2 <EFFECT> Once a crate_5 has been lifted by a hoist_2 from a crate_4 at a place depot_2, the crate_5 is not at the place depot_2, the hoist_2 is lifting the crate_5, the hoist_2 is not available, the crate_4 is clear, and the crate_5 is not on the crate_4. </EFFECT> \n <PRECON> A crate_5 can be loaded by a hoist_2 onto a truck_0 at a place depot_2 only if the hoist_2 is at the same place depot_2, the truck_0 is at the same place depot_2, and the hoist_2 is lifting the crate_5. </PRECON> Use hoist_2 to load crate_5 into truck_0 at depot_2 <EFFECT> Once a crate_5 has been loaded by a hoist_2 onto a truck_0 at a place depot_2. </EFFECT> \n <PRECON> A crate_4 can be lifted by a hoist_2 only if the hoist_2 is at the same place depot_2 as the crate_4, the hoist_2 is available, and the crate_4 is clear. </PRECON> Use hoist_2 to lift crate_4 from pallet_2 at depot_2 <EFFECT> Once a crate_4 has been lifted by a hoist_2 from a pallet_2 at a place depot_2, the crate_4 is not at the place depot_2, the hoist_2 is lifting the crate_4, the hoist_2 is not available, the pallet_2 is clear, and the crate_4 is not on the pallet_2. </EFFECT> \n <PRECON> A crate_4 can be loaded by a hoist_2 onto a truck_0 at a place depot_2 only if the hoist_2 is at the same place depot_2, the truck_0 is at the same place depot_2, and the hoist_2 is lifting the crate_4. </PRECON> Use hoist_2 to load crate_4 into truck_0 at depot_2 <EFFECT> Once a crate_4 has been loaded by a hoist_2 onto a truck_0 at a place depot_2. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_2 to distributor_0 only if the truck_0 is at the depot_2. </PRECON> drive truck_0 from depot_2 to distributor_0 <EFFECT> Once a truck_0 has been driven from depot_2 to distributor_0, it is not at the origin depot_2 and is at the destination distributor_0. </EFFECT> \n <PRECON> A crate_5 can be unloaded by a hoist_4 from a truck_0 at a place distributor_0 only if the hoist_4 is at the same place distributor_0 as the truck_0, the hoist_4 is available, and the crate_5 is in the truck_0. </PRECON> Use hoist_4 to unload crate_5 from truck_0 at distributor_0 <EFFECT> Once a crate_5 has been unloaded by a hoist_4 from a truck_0 at a place distributor_0, the crate_5 is not in the truck_0, the hoist_4 is not available, and the hoist_4 is lifting the crate_5. </EFFECT> \n <PRECON> A crate_5 can be dropped by a hoist_4 to a pallet_4 only if the hoist_4 and pallet_4 are both at the place distributor_0, the pallet_4 is clear, and the hoist_4 is lifting the crate_5. </PRECON> Use hoist_4 to drop crate_5 to pallet_4 at distributor_0 <EFFECT> Once a crate_5 has been dropped by a hoist_4 to a pallet_4 at a place distributor_0, the hoist_4 is available, the hoist_4 is not lifting the crate_5, the crate_5 is at the place distributor_0, the pallet_4 is not clear, the crate_5 is clear, and the crate_5 is on the pallet_4. </EFFECT> \n <PRECON> A truck_2 can be driven from distributor_1 to distributor_3 only if the truck_2 is at the distributor_1. </PRECON> drive truck_2 from distributor_1 to distributor_3 <EFFECT> Once a truck_2 has been driven from distributor_1 to distributor_3, it is not at the origin distributor_1 and is at the destination distributor_3. </EFFECT> WRONG \n <PRECON> A crate_2 can be lifted by a hoist_6 only if the hoist_6 is at the same place distributor_2 as the crate_2, the hoist_6 is available, and the crate_2 is clear. </PRECON> Use hoist_6 to lift crate_2 from pallet_6 at distributor_2 <EFFECT> Once a crate_2 has been lifted by a hoist_6 from a pallet_6 at a place distributor_2, the crate_2 is not at the place distributor_2, the hoist_6 is lifting the crate_2, the hoist_6 is not available, the pallet_6 is clear, and the crate_2 is not on the pallet_6. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_0 to distributor_2 only if the truck_0 is at the distributor_0. </PRECON> drive truck_0 from distributor_0 to distributor_2 <EFFECT> Once a truck_0 has been driven from distributor_0 to distributor_2, it is not at the origin distributor_0 and is at the destination distributor_2. </EFFECT> \n <PRECON> A crate_2 can be loaded by a hoist_6 onto a truck_0 at a place distributor_2 only if the hoist_6 is at the same place distributor_2, the truck_0 is at the same place distributor_2, and the hoist_6 is lifting the crate_2. </PRECON> Use hoist_6 to load crate_2 into truck_0 at distributor_2 <EFFECT> Once a crate_2 has been loaded by a hoist_6 onto a truck_0 at a place distributor_2. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_2 to depot_1 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to depot_1 <EFFECT> Once a truck_0 has been driven from distributor_2 to depot_1, it is not at the origin distributor_2 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_1 from a truck_0 at a place depot_1 only if the hoist_1 is at the same place depot_1 as the truck_0, the hoist_1 is available, and the crate_2 is in the truck_0. </PRECON> Use hoist_1 to unload crate_2 from truck_0 at depot_1 <EFFECT> Once a crate_2 has been unloaded by a hoist_1 from a truck_0 at a place depot_1, the crate_2 is not in the truck_0, the hoist_1 is not available, and the hoist_1 is lifting the crate_2. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_1 to a pallet_1 only if the hoist_1 and pallet_1 are both at the place depot_1, the pallet_1 is clear, and the hoist_1 is lifting the crate_2. </PRECON> Use hoist_1 to drop crate_2 to pallet_1 at depot_1 <EFFECT> Once a crate_2 has been dropped by a hoist_1 to a pallet_1 at a place depot_1, the hoist_1 is available, the hoist_1 is not lifting the crate_2, the crate_2 is at the place depot_1, the pallet_1 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_1. </EFFECT> \n <PRECON> A crate_1 can be lifted by a hoist_3 only if the hoist_3 is at the same place depot_3 as the crate_1, the hoist_3 is available, and the crate_1 is clear. </PRECON> Use hoist_3 to lift crate_1 from pallet_3 at depot_3 <EFFECT> Once a crate_1 has been lifted by a hoist_3 from a pallet_3 at a place depot_3, the crate_1 is not at the place depot_3, the hoist_3 is lifting the crate_1, the hoist_3 is not available, the pallet_3 is clear, and the crate_1 is not on the pallet_3. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_5 to a pallet_5 only if the hoist_5 and pallet_5 are both at the place distributor_1, the pallet_5 is clear, and the hoist_5 is lifting the crate_1. </PRECON> Use hoist_5 to drop crate_1 to pallet_5 at distributor_1 <EFFECT> Once a crate_1 has been dropped by a hoist_5 to a pallet_5 at a place distributor_1, the hoist_5 is available, the hoist_5 is not lifting the crate_1, the crate_1 is at the place distributor_1, the pallet_5 is not clear, the crate_1 is clear, and the crate_1 is on the pallet_5. </EFFECT> WRONG \n <PRECON> A crate_1 can be loaded by a hoist_3 onto a truck_2 at a place depot_3 only if the hoist_3 is at the same place depot_3, the truck_2 is at the same place depot_3, and the hoist_3 is lifting the crate_1. </PRECON> Use hoist_3 to load crate_1 into truck_2 at depot_3 <EFFECT> Once a crate_1 has been loaded by a hoist_3 onto a truck_2 at a place depot_3. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_3 to distributor_1 only if the truck_2 is at the depot_3. </PRECON> drive truck_2 from depot_3 to distributor_1 <EFFECT> Once a truck_2 has been driven from depot_3 to distributor_1, it is not at the origin depot_3 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_5 from a truck_2 at a place distributor_1 only if the hoist_5 is at the same place distributor_1 as the truck_2, the hoist_5 is available, and the crate_1 is in the truck_2. </PRECON> Use hoist_5 to unload crate_1 from truck_2 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_5 from a truck_2 at a place distributor_1, the crate_1 is not in the truck_2, the hoist_5 is not available, and the hoist_5 is lifting the crate_1. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_5 to a pallet_5 only if the hoist_5 and pallet_5 are both at the place distributor_1, the pallet_5 is clear, and the hoist_5 is lifting the crate_1. </PRECON> Use hoist_5 to drop crate_1 to pallet_5 at distributor_1 <EFFECT> Once a crate_1 has been dropped by a hoist_5 to a pallet_5 at a place distributor_1, the hoist_5 is available, the hoist_5 is not lifting the crate_1, the crate_1 is at the place distributor_1, the pallet_5 is not clear, the crate_1 is clear, and the crate_1 is on the pallet_5. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_1 to distributor_4 only if the truck_0 is at the depot_1. </PRECON> drive truck_0 from depot_1 to distributor_4 <EFFECT> Once a truck_0 has been driven from depot_1 to distributor_4, it is not at the origin depot_1 and is at the destination distributor_4. </EFFECT> \n <PRECON> A crate_0 can be lifted by a hoist_7 only if the hoist_7 is at the same place distributor_3 as the crate_0, the hoist_7 is available, and the crate_0 is clear. </PRECON> Use hoist_7 to lift crate_0 from pallet_7 at distributor_3 <EFFECT> Once a crate_0 has been lifted by a hoist_7 from a pallet_7 at a place distributor_3, the crate_0 is not at the place distributor_3, the hoist_7 is lifting the crate_0, the hoist_7 is not available, the pallet_7 is clear, and the crate_0 is not on the pallet_7. </EFFECT> \n <PRECON> A truck_2 can be driven from distributor_1 to distributor_3 only if the truck_2 is at the distributor_1. </PRECON> drive truck_2 from distributor_1 to distributor_3 <EFFECT> Once a truck_2 has been driven from distributor_1 to distributor_3, it is not at the origin distributor_1 and is at the destination distributor_3. </EFFECT> \n <PRECON> A crate_0 can be loaded by a hoist_7 onto a truck_2 at a place distributor_3 only if the hoist_7 is at the same place distributor_3, the truck_2 is at the same place distributor_3, and the hoist_7 is lifting the crate_0. </PRECON> Use hoist_7 to load crate_0 into truck_2 at distributor_3 <EFFECT> Once a crate_0 has been loaded by a hoist_7 onto a truck_2 at a place distributor_3. </EFFECT> \n <PRECON> A crate_4 can be unloaded by a hoist_8 from a truck_0 at a place distributor_4 only if the hoist_8 is at the same place distributor_4 as the truck_0, the hoist_8 is available, and the crate_4 is in the truck_0. </PRECON> Use hoist_8 to unload crate_4 from truck_0 at distributor_4 <EFFECT> Once a crate_4 has been unloaded by a hoist_8 from a truck_0 at a place distributor_4, the crate_4 is not in the truck_0, the hoist_8 is not available, and the hoist_8 is lifting the crate_4. </EFFECT> WRONG \n <PRECON> A truck_2 can be driven from distributor_3 to distributor_1 only if the truck_2 is at the distributor_3. </PRECON> drive truck_2 from distributor_3 to distributor_1 <EFFECT> Once a truck_2 has been driven from distributor_3 to distributor_1, it is not at the origin distributor_3 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_4 can be dropped by a hoist_8 to a pallet_8 only if the hoist_8 and pallet_8 are both at the place distributor_4, the pallet_8 is clear, and the hoist_8 is lifting the crate_4. </PRECON> Use hoist_8 to drop crate_4 to pallet_8 at distributor_4 <EFFECT> Once a crate_4 has been dropped by a hoist_8 to a pallet_8 at a place distributor_4, the hoist_8 is available, the hoist_8 is not lifting the crate_4, the crate_4 is at the place distributor_4, the pallet_8 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_8. </EFFECT> WRONG \n <PRECON> A crate_0 can be unloaded by a hoist_5 from a truck_2 at a place distributor_1 only if the hoist_5 is at the same place distributor_1 as the truck_2, the hoist_5 is available, and the crate_0 is in the truck_2. </PRECON> Use hoist_5 to unload crate_0 from truck_2 at distributor_1 <EFFECT> Once a crate_0 has been unloaded by a hoist_5 from a truck_2 at a place distributor_1, the crate_0 is not in the truck_2, the hoist_5 is not available, and the hoist_5 is lifting the crate_0. </EFFECT> \n <PRECON> A crate_4 can be dropped by a hoist_8 to a pallet_8 only if the hoist_8 and pallet_8 are both at the place distributor_4, the pallet_8 is clear, and the hoist_8 is lifting the crate_4. </PRECON> Use hoist_8 to drop crate_4 to pallet_8 at distributor_4 <EFFECT> Once a crate_4 has been dropped by a hoist_8 to a pallet_8 at a place distributor_4, the hoist_8 is available, the hoist_8 is not lifting the crate_4, the crate_4 is at the place distributor_4, the pallet_8 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_8. </EFFECT> WRONG \n <PRECON> A crate_0 can be dropped by a hoist_5 to a crate_1 only if the hoist_5 and crate_1 are both at the place distributor_1, the crate_1 is clear, and the hoist_5 is lifting the crate_0. </PRECON> Use hoist_5 to drop crate_0 to crate_1 at distributor_1 <EFFECT> Once a crate_0 has been dropped by a hoist_5 to a crate_1 at a place distributor_1, the hoist_5 is available, the hoist_5 is not lifting the crate_0, the crate_0 is at the place distributor_1, the crate_1 is not clear, the crate_0 is clear, and the crate_0 is on the crate_1. </EFFECT> \n <PRECON> A crate_3 can be lifted by a hoist_8 only if the hoist_8 is at the same place distributor_4 as the crate_3, the hoist_8 is available, and the crate_3 is clear. </PRECON> Use hoist_8 to lift crate_3 from pallet_8 at distributor_4 <EFFECT> Once a crate_3 has been lifted by a hoist_8 from a pallet_8 at a place distributor_4, the crate_3 is not at the place distributor_4, the hoist_8 is lifting the crate_3, the hoist_8 is not available, the pallet_8 is clear, and the crate_3 is not on the pallet_8. </EFFECT> \n <PRECON> A crate_3 can be loaded by a hoist_8 onto a truck_0 at a place distributor_4 only if the hoist_8 is at the same place distributor_4, the truck_0 is at the same place distributor_4, and the hoist_8 is lifting the crate_3. </PRECON> Use hoist_8 to load crate_3 into truck_0 at distributor_4 <EFFECT> Once a crate_3 has been loaded by a hoist_8 onto a truck_0 at a place distributor_4. </EFFECT> \n <PRECON> A crate_4 can be unloaded by a hoist_8 from a truck_0 at a place distributor_4 only if the hoist_8 is at the same place distributor_4 as the truck_0, the hoist_8 is available, and the crate_4 is in the truck_0. </PRECON> Use hoist_8 to unload crate_4 from truck_0 at distributor_4 <EFFECT> Once a crate_4 has been unloaded by a hoist_8 from a truck_0 at a place distributor_4, the crate_4 is not in the truck_0, the hoist_8 is not available, and the hoist_8 is lifting the crate_4. </EFFECT> \n <PRECON> A crate_4 can be dropped by a hoist_8 to a pallet_8 only if the hoist_8 and pallet_8 are both at the place distributor_4, the pallet_8 is clear, and the hoist_8 is lifting the crate_4. </PRECON> Use hoist_8 to drop crate_4 to pallet_8 at distributor_4 <EFFECT> Once a crate_4 has been dropped by a hoist_8 to a pallet_8 at a place distributor_4, the hoist_8 is available, the hoist_8 is not lifting the crate_4, the crate_4 is at the place distributor_4, the pallet_8 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_8. </EFFECT> \n</PLAN>", "plan_length": 31, "raw_plan": ["(drive truck0 distributor4 depot2)", "(drive truck2 depot1 depot3)", "(lift hoist2 crate5 crate4 depot2)", "(load hoist2 crate5 truck0 depot2)", "(lift hoist2 crate4 pallet2 depot2)", "(load hoist2 crate4 truck0 depot2)", "(drive truck0 depot2 distributor0)", "(unload hoist4 crate5 truck0 distributor0)", "(drop hoist4 crate5 pallet4 distributor0)", "(lift hoist6 crate2 pallet6 distributor2)", "(drive truck0 distributor0 distributor2)", "(load hoist6 crate2 truck0 distributor2)", "(drive truck0 distributor2 depot1)", "(unload hoist1 crate2 truck0 depot1)", "(drop hoist1 crate2 pallet1 depot1)", "(lift hoist3 crate1 pallet3 depot3)", "(load hoist3 crate1 truck2 depot3)", "(drive truck2 depot3 distributor1)", "(unload hoist5 crate1 truck2 distributor1)", "(drop hoist5 crate1 pallet5 distributor1)", "(drive truck0 depot1 distributor4)", "(lift hoist7 crate0 pallet7 distributor3)", "(drive truck2 distributor1 distributor3)", "(load hoist7 crate0 truck2 distributor3)", "(drive truck2 distributor3 distributor1)", "(unload hoist5 crate0 truck2 distributor1)", "(drop hoist5 crate0 crate1 distributor1)", "(lift hoist8 crate3 pallet8 distributor4)", "(load hoist8 crate3 truck0 distributor4)", "(unload hoist8 crate4 truck0 distributor4)", "(drop hoist8 crate4 pallet8 distributor4)"], "full_text_prompt": "I have to plan the logistics of transporting crates between a number of depots and distributors via trucks that are loaded by hoists. Depots and distributors are directly connected by roads (trucks can drive between any two depots or distributors).\nA depot is a type of place.\nA distributor is a type of place.\nA pallet is a type of surface.\nA crate is a type of surface.\nHere are the actions that can be performed:\nDrive a truck from one place to another place.\nUse a hoist to lift a crate from a surface at a place.\nUse a hoist to drop a crate to a surface at a place.\nUse a hoist to load a crate into a truck at a place.\nUse a hoist to unload a crate from a truck at a place.\nThe following are the restrictions on the actions:\nA truck can be driven from one place to another place only if the truck is at the origin place.\nOnce a truck has been driven from one place to another, it is not at the origin place and is at the destination place.\nA crate can be lifted by a hoist only if the hoist is at the same place as the crate, the hoist is available, and the crate is clear.\nOnce a crate has been lifted by a hoist from a surface at a place, the crate is not at the place, the hoist is lifting the crate, the hoist is not available, the surface is clear, and the crate is not on the surface.\nA crate can be dropped by a hoist to a surface only if the hoist and surface are both at the place, the surface is clear, and the hoist is lifting the crate.\nOnce a crate has been dropped by a hoist to a surface at a place, the hoist is available, the hoist is not lifting the crate, the crate is at the place, the surface is not clear, the crate is clear, and the crate is on the surface.\nA crate can be loaded by a hoist onto a truck at a place only if the hoist is at the same place, the truck is at the same place, and the hoist is lifting the crate.\nOnce a crate has been loaded by a hoist onto a truck at a place.\nA crate can be unloaded by a hoist from a truck at a place only if the hoist is at the same place as the truck, the hoist is available, and the crate is in the truck.\nOnce a crate has been unloaded by a hoist from a truck at a place, the crate is not in the truck, the hoist is not available, and the hoist is lifting the crate.As initial conditions I have that, crate_1 is clear, hoist_7 is at distributor_3, pallet_9 is clear, truck_1 is at depot_0, pallet_9 is at distributor_5, pallet_4 is clear, pallet_1 is clear, hoist_8 is at distributor_4, pallet_0 is at depot_0, crate_2 is clear, hoist_1 is at depot_1, crate_5 is at depot_2, hoist_3 is at depot_3, hoist_5 is available, hoist_7 is available, hoist_6 is at distributor_2, hoist_5 is at distributor_1, crate_0 is on pallet_7, pallet_8 is at distributor_4, crate_5 is on crate_4, hoist_0 is at depot_0, crate_4 is at depot_2, crate_5 is clear, pallet_7 is at distributor_3, crate_0 is at distributor_3, crate_0 is clear, crate_2 is on pallet_6, pallet_6 is at distributor_2, pallet_1 is at depot_1, hoist_6 is available, crate_3 is at distributor_4, hoist_0 is available, crate_4 is on pallet_2, crate_2 is at distributor_2, hoist_8 is available, pallet_5 is at distributor_1, hoist_4 is available, hoist_9 is at distributor_5, hoist_1 is available, hoist_4 is at distributor_0, pallet_5 is clear, crate_1 is at depot_3, pallet_0 is clear, truck_2 is at depot_1, pallet_2 is at depot_2, crate_3 is clear, pallet_3 is at depot_3, truck_0 is at distributor_4, crate_3 is on pallet_8, hoist_3 is available, pallet_4 is at distributor_0, hoist_2 is at depot_2, crate_1 is on pallet_3, hoist_2 is available, hoist_9 is available.My goal is to have that crate_0 is on crate_1, crate_2 is on pallet_1, crate_4 is on pallet_8, crate_5 is on pallet_4, crate_1 is on pallet_5.My plan is as follows:\n<PLAN>\n <PRECON> A truck_0 can be driven from distributor_4 to depot_2 only if the truck_0 is at the distributor_4. </PRECON> drive truck_0 from distributor_4 to depot_2 <EFFECT> Once a truck_0 has been driven from distributor_4 to depot_2, it is not at the origin distributor_4 and is at the destination depot_2. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_1 to depot_3 only if the truck_2 is at the depot_1. </PRECON> drive truck_2 from depot_1 to depot_3 <EFFECT> Once a truck_2 has been driven from depot_1 to depot_3, it is not at the origin depot_1 and is at the destination depot_3. </EFFECT> \n <PRECON> A crate_5 can be lifted by a hoist_2 only if the hoist_2 is at the same place depot_2 as the crate_5, the hoist_2 is available, and the crate_5 is clear. </PRECON> Use hoist_2 to lift crate_5 from crate_4 at depot_2 <EFFECT> Once a crate_5 has been lifted by a hoist_2 from a crate_4 at a place depot_2, the crate_5 is not at the place depot_2, the hoist_2 is lifting the crate_5, the hoist_2 is not available, the crate_4 is clear, and the crate_5 is not on the crate_4. </EFFECT> \n <PRECON> A crate_5 can be loaded by a hoist_2 onto a truck_0 at a place depot_2 only if the hoist_2 is at the same place depot_2, the truck_0 is at the same place depot_2, and the hoist_2 is lifting the crate_5. </PRECON> Use hoist_2 to load crate_5 into truck_0 at depot_2 <EFFECT> Once a crate_5 has been loaded by a hoist_2 onto a truck_0 at a place depot_2. </EFFECT> \n <PRECON> A crate_4 can be lifted by a hoist_2 only if the hoist_2 is at the same place depot_2 as the crate_4, the hoist_2 is available, and the crate_4 is clear. </PRECON> Use hoist_2 to lift crate_4 from pallet_2 at depot_2 <EFFECT> Once a crate_4 has been lifted by a hoist_2 from a pallet_2 at a place depot_2, the crate_4 is not at the place depot_2, the hoist_2 is lifting the crate_4, the hoist_2 is not available, the pallet_2 is clear, and the crate_4 is not on the pallet_2. </EFFECT> \n <PRECON> A crate_4 can be loaded by a hoist_2 onto a truck_0 at a place depot_2 only if the hoist_2 is at the same place depot_2, the truck_0 is at the same place depot_2, and the hoist_2 is lifting the crate_4. </PRECON> Use hoist_2 to load crate_4 into truck_0 at depot_2 <EFFECT> Once a crate_4 has been loaded by a hoist_2 onto a truck_0 at a place depot_2. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_2 to distributor_0 only if the truck_0 is at the depot_2. </PRECON> drive truck_0 from depot_2 to distributor_0 <EFFECT> Once a truck_0 has been driven from depot_2 to distributor_0, it is not at the origin depot_2 and is at the destination distributor_0. </EFFECT> \n <PRECON> A crate_5 can be unloaded by a hoist_4 from a truck_0 at a place distributor_0 only if the hoist_4 is at the same place distributor_0 as the truck_0, the hoist_4 is available, and the crate_5 is in the truck_0. </PRECON> Use hoist_4 to unload crate_5 from truck_0 at distributor_0 <EFFECT> Once a crate_5 has been unloaded by a hoist_4 from a truck_0 at a place distributor_0, the crate_5 is not in the truck_0, the hoist_4 is not available, and the hoist_4 is lifting the crate_5. </EFFECT> \n <PRECON> A crate_5 can be dropped by a hoist_4 to a pallet_4 only if the hoist_4 and pallet_4 are both at the place distributor_0, the pallet_4 is clear, and the hoist_4 is lifting the crate_5. </PRECON> Use hoist_4 to drop crate_5 to pallet_4 at distributor_0 <EFFECT> Once a crate_5 has been dropped by a hoist_4 to a pallet_4 at a place distributor_0, the hoist_4 is available, the hoist_4 is not lifting the crate_5, the crate_5 is at the place distributor_0, the pallet_4 is not clear, the crate_5 is clear, and the crate_5 is on the pallet_4. </EFFECT> \n <PRECON> A truck_2 can be driven from distributor_1 to distributor_3 only if the truck_2 is at the distributor_1. </PRECON> drive truck_2 from distributor_1 to distributor_3 <EFFECT> Once a truck_2 has been driven from distributor_1 to distributor_3, it is not at the origin distributor_1 and is at the destination distributor_3. </EFFECT> WRONG \n <PRECON> A crate_2 can be lifted by a hoist_6 only if the hoist_6 is at the same place distributor_2 as the crate_2, the hoist_6 is available, and the crate_2 is clear. </PRECON> Use hoist_6 to lift crate_2 from pallet_6 at distributor_2 <EFFECT> Once a crate_2 has been lifted by a hoist_6 from a pallet_6 at a place distributor_2, the crate_2 is not at the place distributor_2, the hoist_6 is lifting the crate_2, the hoist_6 is not available, the pallet_6 is clear, and the crate_2 is not on the pallet_6. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_0 to distributor_2 only if the truck_0 is at the distributor_0. </PRECON> drive truck_0 from distributor_0 to distributor_2 <EFFECT> Once a truck_0 has been driven from distributor_0 to distributor_2, it is not at the origin distributor_0 and is at the destination distributor_2. </EFFECT> \n <PRECON> A crate_2 can be loaded by a hoist_6 onto a truck_0 at a place distributor_2 only if the hoist_6 is at the same place distributor_2, the truck_0 is at the same place distributor_2, and the hoist_6 is lifting the crate_2. </PRECON> Use hoist_6 to load crate_2 into truck_0 at distributor_2 <EFFECT> Once a crate_2 has been loaded by a hoist_6 onto a truck_0 at a place distributor_2. </EFFECT> \n <PRECON> A truck_0 can be driven from distributor_2 to depot_1 only if the truck_0 is at the distributor_2. </PRECON> drive truck_0 from distributor_2 to depot_1 <EFFECT> Once a truck_0 has been driven from distributor_2 to depot_1, it is not at the origin distributor_2 and is at the destination depot_1. </EFFECT> \n <PRECON> A crate_2 can be unloaded by a hoist_1 from a truck_0 at a place depot_1 only if the hoist_1 is at the same place depot_1 as the truck_0, the hoist_1 is available, and the crate_2 is in the truck_0. </PRECON> Use hoist_1 to unload crate_2 from truck_0 at depot_1 <EFFECT> Once a crate_2 has been unloaded by a hoist_1 from a truck_0 at a place depot_1, the crate_2 is not in the truck_0, the hoist_1 is not available, and the hoist_1 is lifting the crate_2. </EFFECT> \n <PRECON> A crate_2 can be dropped by a hoist_1 to a pallet_1 only if the hoist_1 and pallet_1 are both at the place depot_1, the pallet_1 is clear, and the hoist_1 is lifting the crate_2. </PRECON> Use hoist_1 to drop crate_2 to pallet_1 at depot_1 <EFFECT> Once a crate_2 has been dropped by a hoist_1 to a pallet_1 at a place depot_1, the hoist_1 is available, the hoist_1 is not lifting the crate_2, the crate_2 is at the place depot_1, the pallet_1 is not clear, the crate_2 is clear, and the crate_2 is on the pallet_1. </EFFECT> \n <PRECON> A crate_1 can be lifted by a hoist_3 only if the hoist_3 is at the same place depot_3 as the crate_1, the hoist_3 is available, and the crate_1 is clear. </PRECON> Use hoist_3 to lift crate_1 from pallet_3 at depot_3 <EFFECT> Once a crate_1 has been lifted by a hoist_3 from a pallet_3 at a place depot_3, the crate_1 is not at the place depot_3, the hoist_3 is lifting the crate_1, the hoist_3 is not available, the pallet_3 is clear, and the crate_1 is not on the pallet_3. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_5 to a pallet_5 only if the hoist_5 and pallet_5 are both at the place distributor_1, the pallet_5 is clear, and the hoist_5 is lifting the crate_1. </PRECON> Use hoist_5 to drop crate_1 to pallet_5 at distributor_1 <EFFECT> Once a crate_1 has been dropped by a hoist_5 to a pallet_5 at a place distributor_1, the hoist_5 is available, the hoist_5 is not lifting the crate_1, the crate_1 is at the place distributor_1, the pallet_5 is not clear, the crate_1 is clear, and the crate_1 is on the pallet_5. </EFFECT> WRONG \n <PRECON> A crate_1 can be loaded by a hoist_3 onto a truck_2 at a place depot_3 only if the hoist_3 is at the same place depot_3, the truck_2 is at the same place depot_3, and the hoist_3 is lifting the crate_1. </PRECON> Use hoist_3 to load crate_1 into truck_2 at depot_3 <EFFECT> Once a crate_1 has been loaded by a hoist_3 onto a truck_2 at a place depot_3. </EFFECT> \n <PRECON> A truck_2 can be driven from depot_3 to distributor_1 only if the truck_2 is at the depot_3. </PRECON> drive truck_2 from depot_3 to distributor_1 <EFFECT> Once a truck_2 has been driven from depot_3 to distributor_1, it is not at the origin depot_3 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_1 can be unloaded by a hoist_5 from a truck_2 at a place distributor_1 only if the hoist_5 is at the same place distributor_1 as the truck_2, the hoist_5 is available, and the crate_1 is in the truck_2. </PRECON> Use hoist_5 to unload crate_1 from truck_2 at distributor_1 <EFFECT> Once a crate_1 has been unloaded by a hoist_5 from a truck_2 at a place distributor_1, the crate_1 is not in the truck_2, the hoist_5 is not available, and the hoist_5 is lifting the crate_1. </EFFECT> \n <PRECON> A crate_1 can be dropped by a hoist_5 to a pallet_5 only if the hoist_5 and pallet_5 are both at the place distributor_1, the pallet_5 is clear, and the hoist_5 is lifting the crate_1. </PRECON> Use hoist_5 to drop crate_1 to pallet_5 at distributor_1 <EFFECT> Once a crate_1 has been dropped by a hoist_5 to a pallet_5 at a place distributor_1, the hoist_5 is available, the hoist_5 is not lifting the crate_1, the crate_1 is at the place distributor_1, the pallet_5 is not clear, the crate_1 is clear, and the crate_1 is on the pallet_5. </EFFECT> \n <PRECON> A truck_0 can be driven from depot_1 to distributor_4 only if the truck_0 is at the depot_1. </PRECON> drive truck_0 from depot_1 to distributor_4 <EFFECT> Once a truck_0 has been driven from depot_1 to distributor_4, it is not at the origin depot_1 and is at the destination distributor_4. </EFFECT> \n <PRECON> A crate_0 can be lifted by a hoist_7 only if the hoist_7 is at the same place distributor_3 as the crate_0, the hoist_7 is available, and the crate_0 is clear. </PRECON> Use hoist_7 to lift crate_0 from pallet_7 at distributor_3 <EFFECT> Once a crate_0 has been lifted by a hoist_7 from a pallet_7 at a place distributor_3, the crate_0 is not at the place distributor_3, the hoist_7 is lifting the crate_0, the hoist_7 is not available, the pallet_7 is clear, and the crate_0 is not on the pallet_7. </EFFECT> \n <PRECON> A truck_2 can be driven from distributor_1 to distributor_3 only if the truck_2 is at the distributor_1. </PRECON> drive truck_2 from distributor_1 to distributor_3 <EFFECT> Once a truck_2 has been driven from distributor_1 to distributor_3, it is not at the origin distributor_1 and is at the destination distributor_3. </EFFECT> \n <PRECON> A crate_0 can be loaded by a hoist_7 onto a truck_2 at a place distributor_3 only if the hoist_7 is at the same place distributor_3, the truck_2 is at the same place distributor_3, and the hoist_7 is lifting the crate_0. </PRECON> Use hoist_7 to load crate_0 into truck_2 at distributor_3 <EFFECT> Once a crate_0 has been loaded by a hoist_7 onto a truck_2 at a place distributor_3. </EFFECT> \n <PRECON> A crate_4 can be unloaded by a hoist_8 from a truck_0 at a place distributor_4 only if the hoist_8 is at the same place distributor_4 as the truck_0, the hoist_8 is available, and the crate_4 is in the truck_0. </PRECON> Use hoist_8 to unload crate_4 from truck_0 at distributor_4 <EFFECT> Once a crate_4 has been unloaded by a hoist_8 from a truck_0 at a place distributor_4, the crate_4 is not in the truck_0, the hoist_8 is not available, and the hoist_8 is lifting the crate_4. </EFFECT> WRONG \n <PRECON> A truck_2 can be driven from distributor_3 to distributor_1 only if the truck_2 is at the distributor_3. </PRECON> drive truck_2 from distributor_3 to distributor_1 <EFFECT> Once a truck_2 has been driven from distributor_3 to distributor_1, it is not at the origin distributor_3 and is at the destination distributor_1. </EFFECT> \n <PRECON> A crate_4 can be dropped by a hoist_8 to a pallet_8 only if the hoist_8 and pallet_8 are both at the place distributor_4, the pallet_8 is clear, and the hoist_8 is lifting the crate_4. </PRECON> Use hoist_8 to drop crate_4 to pallet_8 at distributor_4 <EFFECT> Once a crate_4 has been dropped by a hoist_8 to a pallet_8 at a place distributor_4, the hoist_8 is available, the hoist_8 is not lifting the crate_4, the crate_4 is at the place distributor_4, the pallet_8 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_8. </EFFECT> WRONG \n <PRECON> A crate_0 can be unloaded by a hoist_5 from a truck_2 at a place distributor_1 only if the hoist_5 is at the same place distributor_1 as the truck_2, the hoist_5 is available, and the crate_0 is in the truck_2. </PRECON> Use hoist_5 to unload crate_0 from truck_2 at distributor_1 <EFFECT> Once a crate_0 has been unloaded by a hoist_5 from a truck_2 at a place distributor_1, the crate_0 is not in the truck_2, the hoist_5 is not available, and the hoist_5 is lifting the crate_0. </EFFECT> \n <PRECON> A crate_4 can be dropped by a hoist_8 to a pallet_8 only if the hoist_8 and pallet_8 are both at the place distributor_4, the pallet_8 is clear, and the hoist_8 is lifting the crate_4. </PRECON> Use hoist_8 to drop crate_4 to pallet_8 at distributor_4 <EFFECT> Once a crate_4 has been dropped by a hoist_8 to a pallet_8 at a place distributor_4, the hoist_8 is available, the hoist_8 is not lifting the crate_4, the crate_4 is at the place distributor_4, the pallet_8 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_8. </EFFECT> WRONG \n <PRECON> A crate_0 can be dropped by a hoist_5 to a crate_1 only if the hoist_5 and crate_1 are both at the place distributor_1, the crate_1 is clear, and the hoist_5 is lifting the crate_0. </PRECON> Use hoist_5 to drop crate_0 to crate_1 at distributor_1 <EFFECT> Once a crate_0 has been dropped by a hoist_5 to a crate_1 at a place distributor_1, the hoist_5 is available, the hoist_5 is not lifting the crate_0, the crate_0 is at the place distributor_1, the crate_1 is not clear, the crate_0 is clear, and the crate_0 is on the crate_1. </EFFECT> \n <PRECON> A crate_3 can be lifted by a hoist_8 only if the hoist_8 is at the same place distributor_4 as the crate_3, the hoist_8 is available, and the crate_3 is clear. </PRECON> Use hoist_8 to lift crate_3 from pallet_8 at distributor_4 <EFFECT> Once a crate_3 has been lifted by a hoist_8 from a pallet_8 at a place distributor_4, the crate_3 is not at the place distributor_4, the hoist_8 is lifting the crate_3, the hoist_8 is not available, the pallet_8 is clear, and the crate_3 is not on the pallet_8. </EFFECT> \n <PRECON> A crate_3 can be loaded by a hoist_8 onto a truck_0 at a place distributor_4 only if the hoist_8 is at the same place distributor_4, the truck_0 is at the same place distributor_4, and the hoist_8 is lifting the crate_3. </PRECON> Use hoist_8 to load crate_3 into truck_0 at distributor_4 <EFFECT> Once a crate_3 has been loaded by a hoist_8 onto a truck_0 at a place distributor_4. </EFFECT> \n <PRECON> A crate_4 can be unloaded by a hoist_8 from a truck_0 at a place distributor_4 only if the hoist_8 is at the same place distributor_4 as the truck_0, the hoist_8 is available, and the crate_4 is in the truck_0. </PRECON> Use hoist_8 to unload crate_4 from truck_0 at distributor_4 <EFFECT> Once a crate_4 has been unloaded by a hoist_8 from a truck_0 at a place distributor_4, the crate_4 is not in the truck_0, the hoist_8 is not available, and the hoist_8 is lifting the crate_4. </EFFECT> \n <PRECON> A crate_4 can be dropped by a hoist_8 to a pallet_8 only if the hoist_8 and pallet_8 are both at the place distributor_4, the pallet_8 is clear, and the hoist_8 is lifting the crate_4. </PRECON> Use hoist_8 to drop crate_4 to pallet_8 at distributor_4 <EFFECT> Once a crate_4 has been dropped by a hoist_8 to a pallet_8 at a place distributor_4, the hoist_8 is available, the hoist_8 is not lifting the crate_4, the crate_4 is at the place distributor_4, the pallet_8 is not clear, the crate_4 is clear, and the crate_4 is on the pallet_8. </EFFECT> \n</PLAN>"}
{"domain": "driverlog", "instance_id": "0", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to transport objects between locations using trucks driven by drivers. The drivers can walk between locations, board and disembark from trucks, and drive trucks between locations. The trucks can be loaded and unloaded with objects.\nHere are the actions that can be performed:\nLoad an object into a truck.\nUnload an object from a truck.\nA driver boards a truck.\nA driver disembarks from a truck.\nA driver drives a truck from one location to another location.\nA driver walks from one location to another location.\nThe following are the restrictions on the actions:\nAn object can be loaded into a truck only if the object is at the same location as the truck.\nOnce an object is loaded into a truck, the object is not at the location but is in the truck.\nAn object can be unloaded from a truck only if the object is in the truck.\nOnce an object is unloaded from a truck, the object is not in the truck but is at the location of the truck.\nA driver can board a truck only if the driver is at the same location as the truck.\nA driver can board a truck only if the truck is empty.\nOnce a driver boards a truck, we say the driver is driving the truck.\nOnce a driver boards a truck, the driver is no longer at the location.\nOnce a driver boards a truck, the truck is no longer empty.\nA driver can disembark from a truck only if the driver is driving the truck.\nOnce a driver disembarks from a truck, we say the driver is no longer driving the truck.\nOnce a driver disembarks from a truck, the driver is at the location of the truck.\nOnce a driver disembarks from a truck, the truck is empty.\nA driver can drive a truck from one location to another location only if the driver is driving the truck and the truck is at the from-location.\nA driver can drive a truck from one location to another location only if the from-location and to-location are linked.\nOnce a driver drives a truck from one location to another location, the truck is at the to-location and is no longer at the from-location.\nA driver can walk from one location to another location only if the driver is at the from-location and the from-location and to-location are linked.\nOnce a driver walks from one location to another location, the driver is at the to-location and is no longer at the from-location.", "input": "As initial conditions I have that, truck_2 is at place_0, truck_3 is at place_1, place_2 and path_2-0 are connected, truck_4 is at place_0, truck_2 is empty, place_1 and path_1-2 are connected, driver_2 is at place_2, path_2-0 and place_2 are connected, place_1 and place_2 are linked, path_1-2 and place_2 are connected, driver_1 is at place_0, truck_1 is at place_1, place_1 and place_0 are linked, path_2-0 and place_0 are connected, package_2 is at place_2, path_1-0 and place_0 are connected, path_1-0 and place_1 are connected, place_2 and path_1-2 are connected, package_5 is at place_0, place_0 and place_2 are linked, truck_3 is empty, truck_4 is empty, place_2 and place_0 are linked, place_0 and path_1-0 are connected, place_2 and place_1 are linked, package_1 is at place_2, package_4 is at place_0, place_0 and place_1 are linked, truck_1 is empty, place_0 and path_2-0 are connected, place_1 and path_1-0 are connected, path_1-2 and place_1 are connected, package_3 is at place_1.\nMy goal is to have that package_3 is at place_2, truck_4 is at place_0, package_1 is at place_2, package_2 is at place_0, driver_1 is at place_1, driver_2 is at place_1, package_4 is at place_1, truck_2 is at place_1, truck_1 is at place_2, package_5 is at place_1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A driver_1 can board a truck_2 only if the driver_1 is at the same place_0 as the truck_2. A driver_1 can board a truck_2 only if the truck_2 is empty. </PRECON> driver_1 boards truck_2 at place_0 <EFFECT> Once a driver_1 boards a truck_2, the driver_1 is no longer at the place_0. Once a driver_1 boards a truck_2, we say the driver_1 is driving the truck_2. Once a driver_1 boards a truck_2, the truck_2 is no longer empty. </EFFECT> \n <PRECON> An package_5 can be loaded into a truck_2 only if the package_5 is at the same place_0 as the truck_2. </PRECON> load package_5 into truck_2 at place_0 <EFFECT> Once an package_5 is loaded into a truck_2, the package_5 is not at the place_0 but is in the truck_2. </EFFECT> \n <PRECON> An package_4 can be loaded into a truck_2 only if the package_4 is at the same place_0 as the truck_2. </PRECON> load package_4 into truck_2 at place_0 <EFFECT> Once an package_4 is loaded into a truck_2, the package_4 is not at the place_0 but is in the truck_2. </EFFECT> \n <PRECON> A driver_2 can walk from place_2 to path_1-2 only if the driver_2 is at the place_2 and the place_2 and path_1-2 are linked. </PRECON> driver_2 walks from place_2 to path_1-2 <EFFECT> Once a driver_2 walks from place_2 to path_1-2, the driver_2 is at the path_1-2 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_2 can walk from path_1-2 to place_1 only if the driver_2 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_2 walks from path_1-2 to place_1 <EFFECT> Once a driver_2 walks from path_1-2 to place_1, the driver_2 is at the place_1 and is no longer at the path_1-2. </EFFECT> \n <PRECON> A driver_2 can board a truck_1 only if the driver_2 is at the same place_1 as the truck_1. A driver_2 can board a truck_1 only if the truck_1 is empty. </PRECON> driver_2 boards truck_1 at place_1 <EFFECT> Once a driver_2 boards a truck_1, the driver_2 is no longer at the place_1. Once a driver_2 boards a truck_1, we say the driver_2 is driving the truck_1. Once a driver_2 boards a truck_1, the truck_1 is no longer empty. </EFFECT> \n <PRECON> An package_3 can be loaded into a truck_1 only if the package_3 is at the same place_1 as the truck_1. </PRECON> load package_3 into truck_1 at place_1 <EFFECT> Once an package_3 is loaded into a truck_1, the package_3 is not at the place_1 but is in the truck_1. </EFFECT> \n <PRECON> A driver_2 can drive a truck_1 from place_1 to place_2 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_1. A driver_2 can drive a truck_1 from place_1 to place_2 only if the place_1 and place_2 are linked. </PRECON> driver_2 drives truck_1 from place_1 to place_2 <EFFECT> Once a driver_2 drives a truck_1 from place_1 to place_2, the truck_1 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> An package_3 can be unloaded from a truck_1 only if the package_3 is in the truck_1. </PRECON> unload package_3 from truck_1 at place_2 <EFFECT> Once an package_3 is unloaded from a truck_1, the package_3 is not in the truck_1 but is at the place_2 of the truck_1. </EFFECT> \n <PRECON> An package_2 can be loaded into a truck_1 only if the package_2 is at the same place_2 as the truck_1. </PRECON> load package_2 into truck_1 at place_2 <EFFECT> Once an package_2 is loaded into a truck_1, the package_2 is not at the place_2 but is in the truck_1. </EFFECT> \n <PRECON> A driver_1 can drive a truck_2 from place_0 to place_1 only if the driver_1 is driving the truck_2 and the truck_2 is at the place_0. A driver_1 can drive a truck_2 from place_0 to place_1 only if the place_0 and place_1 are linked. </PRECON> driver_1 drives truck_2 from place_0 to place_1 <EFFECT> Once a driver_1 drives a truck_2 from place_0 to place_1, the truck_2 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can walk from path_1-2 to place_1 only if the driver_2 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_2 walks from path_1-2 to place_1 <EFFECT> Once a driver_2 walks from path_1-2 to place_1, the driver_2 is at the place_1 and is no longer at the path_1-2. </EFFECT> WRONG \n <PRECON> A driver_1 can disembark from a truck_2 only if the driver_1 is driving the truck_2. </PRECON> driver_1 disembarks from truck_2 at place_1 <EFFECT> Once a driver_1 disembarks from a truck_2, the driver_1 is at the place_1 of the truck_2. Once a driver_1 disembarks from a truck_2, we say the driver_1 is no longer driving the truck_2. Once a driver_1 disembarks from a truck_2, the truck_2 is empty. </EFFECT> \n <PRECON> An package_5 can be unloaded from a truck_2 only if the package_5 is in the truck_2. </PRECON> unload package_5 from truck_2 at place_1 <EFFECT> Once an package_5 is unloaded from a truck_2, the package_5 is not in the truck_2 but is at the place_1 of the truck_2. </EFFECT> \n <PRECON> An package_4 can be unloaded from a truck_2 only if the package_4 is in the truck_2. </PRECON> unload package_4 from truck_2 at place_1 <EFFECT> Once an package_4 is unloaded from a truck_2, the package_4 is not in the truck_2 but is at the place_1 of the truck_2. </EFFECT> \n <PRECON> A driver_2 can drive a truck_1 from place_2 to place_0 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_2. A driver_2 can drive a truck_1 from place_2 to place_0 only if the place_2 and place_0 are linked. </PRECON> driver_2 drives truck_1 from place_2 to place_0 <EFFECT> Once a driver_2 drives a truck_1 from place_2 to place_0, the truck_1 is at the place_0 and is no longer at the place_2. </EFFECT> \n <PRECON> An package_2 can be unloaded from a truck_1 only if the package_2 is in the truck_1. </PRECON> unload package_2 from truck_1 at place_0 <EFFECT> Once an package_2 is unloaded from a truck_1, the package_2 is not in the truck_1 but is at the place_0 of the truck_1. </EFFECT> \n <PRECON> A driver_2 can walk from path_1-2 to place_1 only if the driver_2 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_2 walks from path_1-2 to place_1 <EFFECT> Once a driver_2 walks from path_1-2 to place_1, the driver_2 is at the place_1 and is no longer at the path_1-2. </EFFECT> WRONG \n <PRECON> A driver_2 can drive a truck_1 from place_0 to place_1 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_0. A driver_2 can drive a truck_1 from place_0 to place_1 only if the place_0 and place_1 are linked. </PRECON> driver_2 drives truck_1 from place_0 to place_1 <EFFECT> Once a driver_2 drives a truck_1 from place_0 to place_1, the truck_1 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can drive a truck_1 from place_1 to place_2 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_1. A driver_2 can drive a truck_1 from place_1 to place_2 only if the place_1 and place_2 are linked. </PRECON> driver_2 drives truck_1 from place_1 to place_2 <EFFECT> Once a driver_2 drives a truck_1 from place_1 to place_2, the truck_1 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_1 only if the driver_2 is driving the truck_1. </PRECON> driver_2 disembarks from truck_1 at place_2 <EFFECT> Once a driver_2 disembarks from a truck_1, the driver_2 is at the place_2 of the truck_1. Once a driver_2 disembarks from a truck_1, we say the driver_2 is no longer driving the truck_1. Once a driver_2 disembarks from a truck_1, the truck_1 is empty. </EFFECT> \n <PRECON> A driver_2 can walk from path_1-2 to place_1 only if the driver_2 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_2 walks from path_1-2 to place_1 <EFFECT> Once a driver_2 walks from path_1-2 to place_1, the driver_2 is at the place_1 and is no longer at the path_1-2. </EFFECT> WRONG \n <PRECON> A driver_2 can walk from place_2 to path_1-2 only if the driver_2 is at the place_2 and the place_2 and path_1-2 are linked. </PRECON> driver_2 walks from place_2 to path_1-2 <EFFECT> Once a driver_2 walks from place_2 to path_1-2, the driver_2 is at the path_1-2 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_2 can walk from path_1-2 to place_1 only if the driver_2 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_2 walks from path_1-2 to place_1 <EFFECT> Once a driver_2 walks from path_1-2 to place_1, the driver_2 is at the place_1 and is no longer at the path_1-2. </EFFECT> \n</PLAN>", "plan_length": 21, "raw_plan": ["(board-truck driver1 truck2 s0)", "(load-truck package5 truck2 s0)", "(load-truck package4 truck2 s0)", "(walk driver2 s2 p1-2)", "(walk driver2 p1-2 s1)", "(board-truck driver2 truck1 s1)", "(load-truck package3 truck1 s1)", "(drive-truck truck1 s1 s2 driver2)", "(unload-truck package3 truck1 s2)", "(load-truck package2 truck1 s2)", "(drive-truck truck2 s0 s1 driver1)", "(disembark-truck driver1 truck2 s1)", "(unload-truck package5 truck2 s1)", "(unload-truck package4 truck2 s1)", "(drive-truck truck1 s2 s0 driver2)", "(unload-truck package2 truck1 s0)", "(drive-truck truck1 s0 s1 driver2)", "(drive-truck truck1 s1 s2 driver2)", "(disembark-truck driver2 truck1 s2)", "(walk driver2 s2 p1-2)", "(walk driver2 p1-2 s1)"], "full_text_prompt": "I have to plan how to transport objects between locations using trucks driven by drivers. The drivers can walk between locations, board and disembark from trucks, and drive trucks between locations. The trucks can be loaded and unloaded with objects.\nHere are the actions that can be performed:\nLoad an object into a truck.\nUnload an object from a truck.\nA driver boards a truck.\nA driver disembarks from a truck.\nA driver drives a truck from one location to another location.\nA driver walks from one location to another location.\nThe following are the restrictions on the actions:\nAn object can be loaded into a truck only if the object is at the same location as the truck.\nOnce an object is loaded into a truck, the object is not at the location but is in the truck.\nAn object can be unloaded from a truck only if the object is in the truck.\nOnce an object is unloaded from a truck, the object is not in the truck but is at the location of the truck.\nA driver can board a truck only if the driver is at the same location as the truck.\nA driver can board a truck only if the truck is empty.\nOnce a driver boards a truck, we say the driver is driving the truck.\nOnce a driver boards a truck, the driver is no longer at the location.\nOnce a driver boards a truck, the truck is no longer empty.\nA driver can disembark from a truck only if the driver is driving the truck.\nOnce a driver disembarks from a truck, we say the driver is no longer driving the truck.\nOnce a driver disembarks from a truck, the driver is at the location of the truck.\nOnce a driver disembarks from a truck, the truck is empty.\nA driver can drive a truck from one location to another location only if the driver is driving the truck and the truck is at the from-location.\nA driver can drive a truck from one location to another location only if the from-location and to-location are linked.\nOnce a driver drives a truck from one location to another location, the truck is at the to-location and is no longer at the from-location.\nA driver can walk from one location to another location only if the driver is at the from-location and the from-location and to-location are linked.\nOnce a driver walks from one location to another location, the driver is at the to-location and is no longer at the from-location.As initial conditions I have that, truck_2 is at place_0, truck_3 is at place_1, place_2 and path_2-0 are connected, truck_4 is at place_0, truck_2 is empty, place_1 and path_1-2 are connected, driver_2 is at place_2, path_2-0 and place_2 are connected, place_1 and place_2 are linked, path_1-2 and place_2 are connected, driver_1 is at place_0, truck_1 is at place_1, place_1 and place_0 are linked, path_2-0 and place_0 are connected, package_2 is at place_2, path_1-0 and place_0 are connected, path_1-0 and place_1 are connected, place_2 and path_1-2 are connected, package_5 is at place_0, place_0 and place_2 are linked, truck_3 is empty, truck_4 is empty, place_2 and place_0 are linked, place_0 and path_1-0 are connected, place_2 and place_1 are linked, package_1 is at place_2, package_4 is at place_0, place_0 and place_1 are linked, truck_1 is empty, place_0 and path_2-0 are connected, place_1 and path_1-0 are connected, path_1-2 and place_1 are connected, package_3 is at place_1.My goal is to have that package_3 is at place_2, truck_4 is at place_0, package_1 is at place_2, package_2 is at place_0, driver_1 is at place_1, driver_2 is at place_1, package_4 is at place_1, truck_2 is at place_1, truck_1 is at place_2, package_5 is at place_1.My plan is as follows:\n<PLAN>\n <PRECON> A driver_1 can board a truck_2 only if the driver_1 is at the same place_0 as the truck_2. A driver_1 can board a truck_2 only if the truck_2 is empty. </PRECON> driver_1 boards truck_2 at place_0 <EFFECT> Once a driver_1 boards a truck_2, the driver_1 is no longer at the place_0. Once a driver_1 boards a truck_2, we say the driver_1 is driving the truck_2. Once a driver_1 boards a truck_2, the truck_2 is no longer empty. </EFFECT> \n <PRECON> An package_5 can be loaded into a truck_2 only if the package_5 is at the same place_0 as the truck_2. </PRECON> load package_5 into truck_2 at place_0 <EFFECT> Once an package_5 is loaded into a truck_2, the package_5 is not at the place_0 but is in the truck_2. </EFFECT> \n <PRECON> An package_4 can be loaded into a truck_2 only if the package_4 is at the same place_0 as the truck_2. </PRECON> load package_4 into truck_2 at place_0 <EFFECT> Once an package_4 is loaded into a truck_2, the package_4 is not at the place_0 but is in the truck_2. </EFFECT> \n <PRECON> A driver_2 can walk from place_2 to path_1-2 only if the driver_2 is at the place_2 and the place_2 and path_1-2 are linked. </PRECON> driver_2 walks from place_2 to path_1-2 <EFFECT> Once a driver_2 walks from place_2 to path_1-2, the driver_2 is at the path_1-2 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_2 can walk from path_1-2 to place_1 only if the driver_2 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_2 walks from path_1-2 to place_1 <EFFECT> Once a driver_2 walks from path_1-2 to place_1, the driver_2 is at the place_1 and is no longer at the path_1-2. </EFFECT> \n <PRECON> A driver_2 can board a truck_1 only if the driver_2 is at the same place_1 as the truck_1. A driver_2 can board a truck_1 only if the truck_1 is empty. </PRECON> driver_2 boards truck_1 at place_1 <EFFECT> Once a driver_2 boards a truck_1, the driver_2 is no longer at the place_1. Once a driver_2 boards a truck_1, we say the driver_2 is driving the truck_1. Once a driver_2 boards a truck_1, the truck_1 is no longer empty. </EFFECT> \n <PRECON> An package_3 can be loaded into a truck_1 only if the package_3 is at the same place_1 as the truck_1. </PRECON> load package_3 into truck_1 at place_1 <EFFECT> Once an package_3 is loaded into a truck_1, the package_3 is not at the place_1 but is in the truck_1. </EFFECT> \n <PRECON> A driver_2 can drive a truck_1 from place_1 to place_2 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_1. A driver_2 can drive a truck_1 from place_1 to place_2 only if the place_1 and place_2 are linked. </PRECON> driver_2 drives truck_1 from place_1 to place_2 <EFFECT> Once a driver_2 drives a truck_1 from place_1 to place_2, the truck_1 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> An package_3 can be unloaded from a truck_1 only if the package_3 is in the truck_1. </PRECON> unload package_3 from truck_1 at place_2 <EFFECT> Once an package_3 is unloaded from a truck_1, the package_3 is not in the truck_1 but is at the place_2 of the truck_1. </EFFECT> \n <PRECON> An package_2 can be loaded into a truck_1 only if the package_2 is at the same place_2 as the truck_1. </PRECON> load package_2 into truck_1 at place_2 <EFFECT> Once an package_2 is loaded into a truck_1, the package_2 is not at the place_2 but is in the truck_1. </EFFECT> \n <PRECON> A driver_1 can drive a truck_2 from place_0 to place_1 only if the driver_1 is driving the truck_2 and the truck_2 is at the place_0. A driver_1 can drive a truck_2 from place_0 to place_1 only if the place_0 and place_1 are linked. </PRECON> driver_1 drives truck_2 from place_0 to place_1 <EFFECT> Once a driver_1 drives a truck_2 from place_0 to place_1, the truck_2 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can walk from path_1-2 to place_1 only if the driver_2 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_2 walks from path_1-2 to place_1 <EFFECT> Once a driver_2 walks from path_1-2 to place_1, the driver_2 is at the place_1 and is no longer at the path_1-2. </EFFECT> WRONG \n <PRECON> A driver_1 can disembark from a truck_2 only if the driver_1 is driving the truck_2. </PRECON> driver_1 disembarks from truck_2 at place_1 <EFFECT> Once a driver_1 disembarks from a truck_2, the driver_1 is at the place_1 of the truck_2. Once a driver_1 disembarks from a truck_2, we say the driver_1 is no longer driving the truck_2. Once a driver_1 disembarks from a truck_2, the truck_2 is empty. </EFFECT> \n <PRECON> An package_5 can be unloaded from a truck_2 only if the package_5 is in the truck_2. </PRECON> unload package_5 from truck_2 at place_1 <EFFECT> Once an package_5 is unloaded from a truck_2, the package_5 is not in the truck_2 but is at the place_1 of the truck_2. </EFFECT> \n <PRECON> An package_4 can be unloaded from a truck_2 only if the package_4 is in the truck_2. </PRECON> unload package_4 from truck_2 at place_1 <EFFECT> Once an package_4 is unloaded from a truck_2, the package_4 is not in the truck_2 but is at the place_1 of the truck_2. </EFFECT> \n <PRECON> A driver_2 can drive a truck_1 from place_2 to place_0 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_2. A driver_2 can drive a truck_1 from place_2 to place_0 only if the place_2 and place_0 are linked. </PRECON> driver_2 drives truck_1 from place_2 to place_0 <EFFECT> Once a driver_2 drives a truck_1 from place_2 to place_0, the truck_1 is at the place_0 and is no longer at the place_2. </EFFECT> \n <PRECON> An package_2 can be unloaded from a truck_1 only if the package_2 is in the truck_1. </PRECON> unload package_2 from truck_1 at place_0 <EFFECT> Once an package_2 is unloaded from a truck_1, the package_2 is not in the truck_1 but is at the place_0 of the truck_1. </EFFECT> \n <PRECON> A driver_2 can walk from path_1-2 to place_1 only if the driver_2 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_2 walks from path_1-2 to place_1 <EFFECT> Once a driver_2 walks from path_1-2 to place_1, the driver_2 is at the place_1 and is no longer at the path_1-2. </EFFECT> WRONG \n <PRECON> A driver_2 can drive a truck_1 from place_0 to place_1 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_0. A driver_2 can drive a truck_1 from place_0 to place_1 only if the place_0 and place_1 are linked. </PRECON> driver_2 drives truck_1 from place_0 to place_1 <EFFECT> Once a driver_2 drives a truck_1 from place_0 to place_1, the truck_1 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can drive a truck_1 from place_1 to place_2 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_1. A driver_2 can drive a truck_1 from place_1 to place_2 only if the place_1 and place_2 are linked. </PRECON> driver_2 drives truck_1 from place_1 to place_2 <EFFECT> Once a driver_2 drives a truck_1 from place_1 to place_2, the truck_1 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_1 only if the driver_2 is driving the truck_1. </PRECON> driver_2 disembarks from truck_1 at place_2 <EFFECT> Once a driver_2 disembarks from a truck_1, the driver_2 is at the place_2 of the truck_1. Once a driver_2 disembarks from a truck_1, we say the driver_2 is no longer driving the truck_1. Once a driver_2 disembarks from a truck_1, the truck_1 is empty. </EFFECT> \n <PRECON> A driver_2 can walk from path_1-2 to place_1 only if the driver_2 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_2 walks from path_1-2 to place_1 <EFFECT> Once a driver_2 walks from path_1-2 to place_1, the driver_2 is at the place_1 and is no longer at the path_1-2. </EFFECT> WRONG \n <PRECON> A driver_2 can walk from place_2 to path_1-2 only if the driver_2 is at the place_2 and the place_2 and path_1-2 are linked. </PRECON> driver_2 walks from place_2 to path_1-2 <EFFECT> Once a driver_2 walks from place_2 to path_1-2, the driver_2 is at the path_1-2 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_2 can walk from path_1-2 to place_1 only if the driver_2 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_2 walks from path_1-2 to place_1 <EFFECT> Once a driver_2 walks from path_1-2 to place_1, the driver_2 is at the place_1 and is no longer at the path_1-2. </EFFECT> \n</PLAN>"}
{"domain": "driverlog", "instance_id": "40", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to transport objects between locations using trucks driven by drivers. The drivers can walk between locations, board and disembark from trucks, and drive trucks between locations. The trucks can be loaded and unloaded with objects.\nHere are the actions that can be performed:\nLoad an object into a truck.\nUnload an object from a truck.\nA driver boards a truck.\nA driver disembarks from a truck.\nA driver drives a truck from one location to another location.\nA driver walks from one location to another location.\nThe following are the restrictions on the actions:\nAn object can be loaded into a truck only if the object is at the same location as the truck.\nOnce an object is loaded into a truck, the object is not at the location but is in the truck.\nAn object can be unloaded from a truck only if the object is in the truck.\nOnce an object is unloaded from a truck, the object is not in the truck but is at the location of the truck.\nA driver can board a truck only if the driver is at the same location as the truck.\nA driver can board a truck only if the truck is empty.\nOnce a driver boards a truck, we say the driver is driving the truck.\nOnce a driver boards a truck, the driver is no longer at the location.\nOnce a driver boards a truck, the truck is no longer empty.\nA driver can disembark from a truck only if the driver is driving the truck.\nOnce a driver disembarks from a truck, we say the driver is no longer driving the truck.\nOnce a driver disembarks from a truck, the driver is at the location of the truck.\nOnce a driver disembarks from a truck, the truck is empty.\nA driver can drive a truck from one location to another location only if the driver is driving the truck and the truck is at the from-location.\nA driver can drive a truck from one location to another location only if the from-location and to-location are linked.\nOnce a driver drives a truck from one location to another location, the truck is at the to-location and is no longer at the from-location.\nA driver can walk from one location to another location only if the driver is at the from-location and the from-location and to-location are linked.\nOnce a driver walks from one location to another location, the driver is at the to-location and is no longer at the from-location.", "input": "As initial conditions I have that, driver_1 is at place_3, truck_1 is at place_2, driver_2 is at place_1, place_3 and path_2-3 are connected, driver_3 is at place_3, place_2 and path_1-2 are connected, place_1 and place_2 are linked, path_1-2 and place_2 are connected, place_0 and place_2 are linked, truck_2 is empty, path_2-3 and place_2 are connected, truck_2 is at place_0, truck_1 is empty, package_3 is at place_0, place_2 and place_0 are linked, place_0 and path_0-1 are connected, place_3 and place_0 are linked, place_1 and place_3 are linked, path_2-0 and place_0 are connected, place_1 and place_0 are linked, path_0-1 and place_1 are connected, path_2-0 and place_2 are connected, place_1 and path_0-1 are connected, path_2-3 and place_3 are connected, place_1 and path_1-2 are connected, place_0 and place_3 are linked, place_3 and place_2 are linked, place_0 and place_1 are linked, place_3 and place_1 are linked, package_2 is at place_2, place_0 and path_2-0 are connected, path_0-1 and place_0 are connected, place_2 and place_1 are linked, path_1-2 and place_1 are connected, place_2 and place_3 are linked, place_2 and path_2-3 are connected, place_2 and path_2-0 are connected, package_1 is at place_2.\nMy goal is to have that driver_1 is at place_1, package_2 is at place_1, package_1 is at place_1, package_3 is at place_3, truck_2 is at place_0, driver_2 is at place_0, driver_3 is at place_1, truck_1 is at place_0.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A driver_2 can drive a truck_1 from place_1 to place_0 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_1. A driver_2 can drive a truck_1 from place_1 to place_0 only if the place_1 and place_0 are linked. </PRECON> driver_2 drives truck_1 from place_1 to place_0 <EFFECT> Once a driver_2 drives a truck_1 from place_1 to place_0, the truck_1 is at the place_0 and is no longer at the place_1. </EFFECT> WRONG \n <PRECON> An package_2 can be loaded into a truck_1 only if the package_2 is at the same place_2 as the truck_1. </PRECON> load package_2 into truck_1 at place_2 <EFFECT> Once an package_2 is loaded into a truck_1, the package_2 is not at the place_2 but is in the truck_1. </EFFECT> \n <PRECON> An package_1 can be loaded into a truck_1 only if the package_1 is at the same place_2 as the truck_1. </PRECON> load package_1 into truck_1 at place_2 <EFFECT> Once an package_1 is loaded into a truck_1, the package_1 is not at the place_2 but is in the truck_1. </EFFECT> \n <PRECON> A driver_2 can board a truck_1 only if the driver_2 is at the same place_1 as the truck_1. A driver_2 can board a truck_1 only if the truck_1 is empty. </PRECON> driver_2 boards truck_1 at place_1 <EFFECT> Once a driver_2 boards a truck_1, the driver_2 is no longer at the place_1. Once a driver_2 boards a truck_1, we say the driver_2 is driving the truck_1. Once a driver_2 boards a truck_1, the truck_1 is no longer empty. </EFFECT> WRONG \n <PRECON> An package_3 can be loaded into a truck_2 only if the package_3 is at the same place_0 as the truck_2. </PRECON> load package_3 into truck_2 at place_0 <EFFECT> Once an package_3 is loaded into a truck_2, the package_3 is not at the place_0 but is in the truck_2. </EFFECT> \n <PRECON> A driver_1 can walk from place_3 to path_2-3 only if the driver_1 is at the place_3 and the place_3 and path_2-3 are linked. </PRECON> driver_1 walks from place_3 to path_2-3 <EFFECT> Once a driver_1 walks from place_3 to path_2-3, the driver_1 is at the path_2-3 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_1 can walk from path_2-3 to place_2 only if the driver_1 is at the path_2-3 and the path_2-3 and place_2 are linked. </PRECON> driver_1 walks from path_2-3 to place_2 <EFFECT> Once a driver_1 walks from path_2-3 to place_2, the driver_1 is at the place_2 and is no longer at the path_2-3. </EFFECT> \n <PRECON> A driver_1 can board a truck_1 only if the driver_1 is at the same place_2 as the truck_1. A driver_1 can board a truck_1 only if the truck_1 is empty. </PRECON> driver_1 boards truck_1 at place_2 <EFFECT> Once a driver_1 boards a truck_1, the driver_1 is no longer at the place_2. Once a driver_1 boards a truck_1, we say the driver_1 is driving the truck_1. Once a driver_1 boards a truck_1, the truck_1 is no longer empty. </EFFECT> \n <PRECON> A driver_1 can drive a truck_1 from place_2 to place_0 only if the driver_1 is driving the truck_1 and the truck_1 is at the place_2. A driver_1 can drive a truck_1 from place_2 to place_0 only if the place_2 and place_0 are linked. </PRECON> driver_1 drives truck_1 from place_2 to place_0 <EFFECT> Once a driver_1 drives a truck_1 from place_2 to place_0, the truck_1 is at the place_0 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_1 can drive a truck_1 from place_0 to place_1 only if the driver_1 is driving the truck_1 and the truck_1 is at the place_0. A driver_1 can drive a truck_1 from place_0 to place_1 only if the place_0 and place_1 are linked. </PRECON> driver_1 drives truck_1 from place_0 to place_1 <EFFECT> Once a driver_1 drives a truck_1 from place_0 to place_1, the truck_1 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> WRONG \n <PRECON> A driver_1 can disembark from a truck_1 only if the driver_1 is driving the truck_1. </PRECON> driver_1 disembarks from truck_1 at place_1 <EFFECT> Once a driver_1 disembarks from a truck_1, we say the driver_1 is no longer driving the truck_1. Once a driver_1 disembarks from a truck_1, the driver_1 is at the place_1 of the truck_1. Once a driver_1 disembarks from a truck_1, the truck_1 is empty. </EFFECT> \n <PRECON> An package_2 can be unloaded from a truck_1 only if the package_2 is in the truck_1. </PRECON> unload package_2 from truck_1 at place_1 <EFFECT> Once an package_2 is unloaded from a truck_1, the package_2 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> \n <PRECON> An package_1 can be unloaded from a truck_1 only if the package_1 is in the truck_1. </PRECON> unload package_1 from truck_1 at place_1 <EFFECT> Once an package_1 is unloaded from a truck_1, the package_1 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> \n <PRECON> A driver_2 can board a truck_1 only if the driver_2 is at the same place_1 as the truck_1. A driver_2 can board a truck_1 only if the truck_1 is empty. </PRECON> driver_2 boards truck_1 at place_1 <EFFECT> Once a driver_2 boards a truck_1, the driver_2 is no longer at the place_1. Once a driver_2 boards a truck_1, we say the driver_2 is driving the truck_1. Once a driver_2 boards a truck_1, the truck_1 is no longer empty. </EFFECT> \n <PRECON> A driver_2 can drive a truck_1 from place_1 to place_0 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_1. A driver_2 can drive a truck_1 from place_1 to place_0 only if the place_1 and place_0 are linked. </PRECON> driver_2 drives truck_1 from place_1 to place_0 <EFFECT> Once a driver_2 drives a truck_1 from place_1 to place_0, the truck_1 is at the place_0 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_1 only if the driver_2 is driving the truck_1. </PRECON> driver_2 disembarks from truck_1 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_1, we say the driver_2 is no longer driving the truck_1. Once a driver_2 disembarks from a truck_1, the driver_2 is at the place_0 of the truck_1. Once a driver_2 disembarks from a truck_1, the truck_1 is empty. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_0 to place_3 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_0. A driver_2 can drive a truck_2 from place_0 to place_3 only if the place_0 and place_3 are linked. </PRECON> driver_2 drives truck_2 from place_0 to place_3 <EFFECT> Once a driver_2 drives a truck_2 from place_0 to place_3, the truck_2 is at the place_3 and is no longer at the place_0. </EFFECT> WRONG \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> WRONG \n <PRECON> A driver_3 can walk from place_2 to path_1-2 only if the driver_3 is at the place_2 and the place_2 and path_1-2 are linked. </PRECON> driver_3 walks from place_2 to path_1-2 <EFFECT> Once a driver_3 walks from place_2 to path_1-2, the driver_3 is at the path_1-2 and is no longer at the place_2. </EFFECT> WRONG \n <PRECON> A driver_3 can walk from place_3 to path_2-3 only if the driver_3 is at the place_3 and the place_3 and path_2-3 are linked. </PRECON> driver_3 walks from place_3 to path_2-3 <EFFECT> Once a driver_3 walks from place_3 to path_2-3, the driver_3 is at the path_2-3 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_3 can walk from path_2-3 to place_2 only if the driver_3 is at the path_2-3 and the path_2-3 and place_2 are linked. </PRECON> driver_3 walks from path_2-3 to place_2 <EFFECT> Once a driver_3 walks from path_2-3 to place_2, the driver_3 is at the place_2 and is no longer at the path_2-3. </EFFECT> \n <PRECON> A driver_3 can walk from place_2 to path_1-2 only if the driver_3 is at the place_2 and the place_2 and path_1-2 are linked. </PRECON> driver_3 walks from place_2 to path_1-2 <EFFECT> Once a driver_3 walks from place_2 to path_1-2, the driver_3 is at the path_1-2 and is no longer at the place_2. </EFFECT> \n <PRECON> An package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at place_3 <EFFECT> Once an package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 but is at the place_3 of the truck_2. </EFFECT> WRONG \n <PRECON> A driver_3 can walk from path_1-2 to place_1 only if the driver_3 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_3 walks from path_1-2 to place_1 <EFFECT> Once a driver_3 walks from path_1-2 to place_1, the driver_3 is at the place_1 and is no longer at the path_1-2. </EFFECT> \n <PRECON> A driver_2 can board a truck_2 only if the driver_2 is at the same place_0 as the truck_2. A driver_2 can board a truck_2 only if the truck_2 is empty. </PRECON> driver_2 boards truck_2 at place_0 <EFFECT> Once a driver_2 boards a truck_2, the driver_2 is no longer at the place_0. Once a driver_2 boards a truck_2, we say the driver_2 is driving the truck_2. Once a driver_2 boards a truck_2, the truck_2 is no longer empty. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_0 to place_3 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_0. A driver_2 can drive a truck_2 from place_0 to place_3 only if the place_0 and place_3 are linked. </PRECON> driver_2 drives truck_2 from place_0 to place_3 <EFFECT> Once a driver_2 drives a truck_2 from place_0 to place_3, the truck_2 is at the place_3 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> WRONG \n <PRECON> An package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at place_3 <EFFECT> Once an package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 but is at the place_3 of the truck_2. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> WRONG \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> WRONG \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> \n</PLAN>", "plan_length": 23, "raw_plan": ["(load-truck package2 truck1 s2)", "(load-truck package1 truck1 s2)", "(load-truck package3 truck2 s0)", "(walk driver1 s3 p2-3)", "(walk driver1 p2-3 s2)", "(board-truck driver1 truck1 s2)", "(drive-truck truck1 s2 s0 driver1)", "(drive-truck truck1 s0 s1 driver1)", "(disembark-truck driver1 truck1 s1)", "(unload-truck package2 truck1 s1)", "(unload-truck package1 truck1 s1)", "(board-truck driver2 truck1 s1)", "(drive-truck truck1 s1 s0 driver2)", "(disembark-truck driver2 truck1 s0)", "(walk driver3 s3 p2-3)", "(walk driver3 p2-3 s2)", "(walk driver3 s2 p1-2)", "(walk driver3 p1-2 s1)", "(board-truck driver2 truck2 s0)", "(drive-truck truck2 s0 s3 driver2)", "(unload-truck package3 truck2 s3)", "(drive-truck truck2 s3 s0 driver2)", "(disembark-truck driver2 truck2 s0)"], "full_text_prompt": "I have to plan how to transport objects between locations using trucks driven by drivers. The drivers can walk between locations, board and disembark from trucks, and drive trucks between locations. The trucks can be loaded and unloaded with objects.\nHere are the actions that can be performed:\nLoad an object into a truck.\nUnload an object from a truck.\nA driver boards a truck.\nA driver disembarks from a truck.\nA driver drives a truck from one location to another location.\nA driver walks from one location to another location.\nThe following are the restrictions on the actions:\nAn object can be loaded into a truck only if the object is at the same location as the truck.\nOnce an object is loaded into a truck, the object is not at the location but is in the truck.\nAn object can be unloaded from a truck only if the object is in the truck.\nOnce an object is unloaded from a truck, the object is not in the truck but is at the location of the truck.\nA driver can board a truck only if the driver is at the same location as the truck.\nA driver can board a truck only if the truck is empty.\nOnce a driver boards a truck, we say the driver is driving the truck.\nOnce a driver boards a truck, the driver is no longer at the location.\nOnce a driver boards a truck, the truck is no longer empty.\nA driver can disembark from a truck only if the driver is driving the truck.\nOnce a driver disembarks from a truck, we say the driver is no longer driving the truck.\nOnce a driver disembarks from a truck, the driver is at the location of the truck.\nOnce a driver disembarks from a truck, the truck is empty.\nA driver can drive a truck from one location to another location only if the driver is driving the truck and the truck is at the from-location.\nA driver can drive a truck from one location to another location only if the from-location and to-location are linked.\nOnce a driver drives a truck from one location to another location, the truck is at the to-location and is no longer at the from-location.\nA driver can walk from one location to another location only if the driver is at the from-location and the from-location and to-location are linked.\nOnce a driver walks from one location to another location, the driver is at the to-location and is no longer at the from-location.As initial conditions I have that, driver_1 is at place_3, truck_1 is at place_2, driver_2 is at place_1, place_3 and path_2-3 are connected, driver_3 is at place_3, place_2 and path_1-2 are connected, place_1 and place_2 are linked, path_1-2 and place_2 are connected, place_0 and place_2 are linked, truck_2 is empty, path_2-3 and place_2 are connected, truck_2 is at place_0, truck_1 is empty, package_3 is at place_0, place_2 and place_0 are linked, place_0 and path_0-1 are connected, place_3 and place_0 are linked, place_1 and place_3 are linked, path_2-0 and place_0 are connected, place_1 and place_0 are linked, path_0-1 and place_1 are connected, path_2-0 and place_2 are connected, place_1 and path_0-1 are connected, path_2-3 and place_3 are connected, place_1 and path_1-2 are connected, place_0 and place_3 are linked, place_3 and place_2 are linked, place_0 and place_1 are linked, place_3 and place_1 are linked, package_2 is at place_2, place_0 and path_2-0 are connected, path_0-1 and place_0 are connected, place_2 and place_1 are linked, path_1-2 and place_1 are connected, place_2 and place_3 are linked, place_2 and path_2-3 are connected, place_2 and path_2-0 are connected, package_1 is at place_2.My goal is to have that driver_1 is at place_1, package_2 is at place_1, package_1 is at place_1, package_3 is at place_3, truck_2 is at place_0, driver_2 is at place_0, driver_3 is at place_1, truck_1 is at place_0.My plan is as follows:\n<PLAN>\n <PRECON> A driver_2 can drive a truck_1 from place_1 to place_0 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_1. A driver_2 can drive a truck_1 from place_1 to place_0 only if the place_1 and place_0 are linked. </PRECON> driver_2 drives truck_1 from place_1 to place_0 <EFFECT> Once a driver_2 drives a truck_1 from place_1 to place_0, the truck_1 is at the place_0 and is no longer at the place_1. </EFFECT> WRONG \n <PRECON> An package_2 can be loaded into a truck_1 only if the package_2 is at the same place_2 as the truck_1. </PRECON> load package_2 into truck_1 at place_2 <EFFECT> Once an package_2 is loaded into a truck_1, the package_2 is not at the place_2 but is in the truck_1. </EFFECT> \n <PRECON> An package_1 can be loaded into a truck_1 only if the package_1 is at the same place_2 as the truck_1. </PRECON> load package_1 into truck_1 at place_2 <EFFECT> Once an package_1 is loaded into a truck_1, the package_1 is not at the place_2 but is in the truck_1. </EFFECT> \n <PRECON> A driver_2 can board a truck_1 only if the driver_2 is at the same place_1 as the truck_1. A driver_2 can board a truck_1 only if the truck_1 is empty. </PRECON> driver_2 boards truck_1 at place_1 <EFFECT> Once a driver_2 boards a truck_1, the driver_2 is no longer at the place_1. Once a driver_2 boards a truck_1, we say the driver_2 is driving the truck_1. Once a driver_2 boards a truck_1, the truck_1 is no longer empty. </EFFECT> WRONG \n <PRECON> An package_3 can be loaded into a truck_2 only if the package_3 is at the same place_0 as the truck_2. </PRECON> load package_3 into truck_2 at place_0 <EFFECT> Once an package_3 is loaded into a truck_2, the package_3 is not at the place_0 but is in the truck_2. </EFFECT> \n <PRECON> A driver_1 can walk from place_3 to path_2-3 only if the driver_1 is at the place_3 and the place_3 and path_2-3 are linked. </PRECON> driver_1 walks from place_3 to path_2-3 <EFFECT> Once a driver_1 walks from place_3 to path_2-3, the driver_1 is at the path_2-3 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_1 can walk from path_2-3 to place_2 only if the driver_1 is at the path_2-3 and the path_2-3 and place_2 are linked. </PRECON> driver_1 walks from path_2-3 to place_2 <EFFECT> Once a driver_1 walks from path_2-3 to place_2, the driver_1 is at the place_2 and is no longer at the path_2-3. </EFFECT> \n <PRECON> A driver_1 can board a truck_1 only if the driver_1 is at the same place_2 as the truck_1. A driver_1 can board a truck_1 only if the truck_1 is empty. </PRECON> driver_1 boards truck_1 at place_2 <EFFECT> Once a driver_1 boards a truck_1, the driver_1 is no longer at the place_2. Once a driver_1 boards a truck_1, we say the driver_1 is driving the truck_1. Once a driver_1 boards a truck_1, the truck_1 is no longer empty. </EFFECT> \n <PRECON> A driver_1 can drive a truck_1 from place_2 to place_0 only if the driver_1 is driving the truck_1 and the truck_1 is at the place_2. A driver_1 can drive a truck_1 from place_2 to place_0 only if the place_2 and place_0 are linked. </PRECON> driver_1 drives truck_1 from place_2 to place_0 <EFFECT> Once a driver_1 drives a truck_1 from place_2 to place_0, the truck_1 is at the place_0 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_1 can drive a truck_1 from place_0 to place_1 only if the driver_1 is driving the truck_1 and the truck_1 is at the place_0. A driver_1 can drive a truck_1 from place_0 to place_1 only if the place_0 and place_1 are linked. </PRECON> driver_1 drives truck_1 from place_0 to place_1 <EFFECT> Once a driver_1 drives a truck_1 from place_0 to place_1, the truck_1 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> WRONG \n <PRECON> A driver_1 can disembark from a truck_1 only if the driver_1 is driving the truck_1. </PRECON> driver_1 disembarks from truck_1 at place_1 <EFFECT> Once a driver_1 disembarks from a truck_1, we say the driver_1 is no longer driving the truck_1. Once a driver_1 disembarks from a truck_1, the driver_1 is at the place_1 of the truck_1. Once a driver_1 disembarks from a truck_1, the truck_1 is empty. </EFFECT> \n <PRECON> An package_2 can be unloaded from a truck_1 only if the package_2 is in the truck_1. </PRECON> unload package_2 from truck_1 at place_1 <EFFECT> Once an package_2 is unloaded from a truck_1, the package_2 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> \n <PRECON> An package_1 can be unloaded from a truck_1 only if the package_1 is in the truck_1. </PRECON> unload package_1 from truck_1 at place_1 <EFFECT> Once an package_1 is unloaded from a truck_1, the package_1 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> \n <PRECON> A driver_2 can board a truck_1 only if the driver_2 is at the same place_1 as the truck_1. A driver_2 can board a truck_1 only if the truck_1 is empty. </PRECON> driver_2 boards truck_1 at place_1 <EFFECT> Once a driver_2 boards a truck_1, the driver_2 is no longer at the place_1. Once a driver_2 boards a truck_1, we say the driver_2 is driving the truck_1. Once a driver_2 boards a truck_1, the truck_1 is no longer empty. </EFFECT> \n <PRECON> A driver_2 can drive a truck_1 from place_1 to place_0 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_1. A driver_2 can drive a truck_1 from place_1 to place_0 only if the place_1 and place_0 are linked. </PRECON> driver_2 drives truck_1 from place_1 to place_0 <EFFECT> Once a driver_2 drives a truck_1 from place_1 to place_0, the truck_1 is at the place_0 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_1 only if the driver_2 is driving the truck_1. </PRECON> driver_2 disembarks from truck_1 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_1, we say the driver_2 is no longer driving the truck_1. Once a driver_2 disembarks from a truck_1, the driver_2 is at the place_0 of the truck_1. Once a driver_2 disembarks from a truck_1, the truck_1 is empty. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_0 to place_3 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_0. A driver_2 can drive a truck_2 from place_0 to place_3 only if the place_0 and place_3 are linked. </PRECON> driver_2 drives truck_2 from place_0 to place_3 <EFFECT> Once a driver_2 drives a truck_2 from place_0 to place_3, the truck_2 is at the place_3 and is no longer at the place_0. </EFFECT> WRONG \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> WRONG \n <PRECON> A driver_3 can walk from place_2 to path_1-2 only if the driver_3 is at the place_2 and the place_2 and path_1-2 are linked. </PRECON> driver_3 walks from place_2 to path_1-2 <EFFECT> Once a driver_3 walks from place_2 to path_1-2, the driver_3 is at the path_1-2 and is no longer at the place_2. </EFFECT> WRONG \n <PRECON> A driver_3 can walk from place_3 to path_2-3 only if the driver_3 is at the place_3 and the place_3 and path_2-3 are linked. </PRECON> driver_3 walks from place_3 to path_2-3 <EFFECT> Once a driver_3 walks from place_3 to path_2-3, the driver_3 is at the path_2-3 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_3 can walk from path_2-3 to place_2 only if the driver_3 is at the path_2-3 and the path_2-3 and place_2 are linked. </PRECON> driver_3 walks from path_2-3 to place_2 <EFFECT> Once a driver_3 walks from path_2-3 to place_2, the driver_3 is at the place_2 and is no longer at the path_2-3. </EFFECT> \n <PRECON> A driver_3 can walk from place_2 to path_1-2 only if the driver_3 is at the place_2 and the place_2 and path_1-2 are linked. </PRECON> driver_3 walks from place_2 to path_1-2 <EFFECT> Once a driver_3 walks from place_2 to path_1-2, the driver_3 is at the path_1-2 and is no longer at the place_2. </EFFECT> \n <PRECON> An package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at place_3 <EFFECT> Once an package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 but is at the place_3 of the truck_2. </EFFECT> WRONG \n <PRECON> A driver_3 can walk from path_1-2 to place_1 only if the driver_3 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_3 walks from path_1-2 to place_1 <EFFECT> Once a driver_3 walks from path_1-2 to place_1, the driver_3 is at the place_1 and is no longer at the path_1-2. </EFFECT> \n <PRECON> A driver_2 can board a truck_2 only if the driver_2 is at the same place_0 as the truck_2. A driver_2 can board a truck_2 only if the truck_2 is empty. </PRECON> driver_2 boards truck_2 at place_0 <EFFECT> Once a driver_2 boards a truck_2, the driver_2 is no longer at the place_0. Once a driver_2 boards a truck_2, we say the driver_2 is driving the truck_2. Once a driver_2 boards a truck_2, the truck_2 is no longer empty. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_0 to place_3 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_0. A driver_2 can drive a truck_2 from place_0 to place_3 only if the place_0 and place_3 are linked. </PRECON> driver_2 drives truck_2 from place_0 to place_3 <EFFECT> Once a driver_2 drives a truck_2 from place_0 to place_3, the truck_2 is at the place_3 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> WRONG \n <PRECON> An package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at place_3 <EFFECT> Once an package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 but is at the place_3 of the truck_2. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> WRONG \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> WRONG \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> \n</PLAN>"}
{"domain": "driverlog", "instance_id": "160", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to transport objects between locations using trucks driven by drivers. The drivers can walk between locations, board and disembark from trucks, and drive trucks between locations. The trucks can be loaded and unloaded with objects.\nHere are the actions that can be performed:\nLoad an object into a truck.\nUnload an object from a truck.\nA driver boards a truck.\nA driver disembarks from a truck.\nA driver drives a truck from one location to another location.\nA driver walks from one location to another location.\nThe following are the restrictions on the actions:\nAn object can be loaded into a truck only if the object is at the same location as the truck.\nOnce an object is loaded into a truck, the object is not at the location but is in the truck.\nAn object can be unloaded from a truck only if the object is in the truck.\nOnce an object is unloaded from a truck, the object is not in the truck but is at the location of the truck.\nA driver can board a truck only if the driver is at the same location as the truck.\nA driver can board a truck only if the truck is empty.\nOnce a driver boards a truck, we say the driver is driving the truck.\nOnce a driver boards a truck, the driver is no longer at the location.\nOnce a driver boards a truck, the truck is no longer empty.\nA driver can disembark from a truck only if the driver is driving the truck.\nOnce a driver disembarks from a truck, we say the driver is no longer driving the truck.\nOnce a driver disembarks from a truck, the driver is at the location of the truck.\nOnce a driver disembarks from a truck, the truck is empty.\nA driver can drive a truck from one location to another location only if the driver is driving the truck and the truck is at the from-location.\nA driver can drive a truck from one location to another location only if the from-location and to-location are linked.\nOnce a driver drives a truck from one location to another location, the truck is at the to-location and is no longer at the from-location.\nA driver can walk from one location to another location only if the driver is at the from-location and the from-location and to-location are linked.\nOnce a driver walks from one location to another location, the driver is at the to-location and is no longer at the from-location.", "input": "As initial conditions I have that, package_5 is at place_3, truck_4 is empty, path_1-3 and place_3 are connected, truck_2 is at place_1, path_0-2 and place_0 are connected, place_1 and place_3 are linked, path_2-1 and place_2 are connected, place_0 and path_0-2 are connected, driver_3 is at place_1, place_2 and place_1 are linked, truck_3 is empty, place_3 and path_1-3 are connected, path_0-1 and place_0 are connected, place_2 and path_2-1 are connected, place_3 and path_0-3 are connected, driver_2 is at place_2, package_2 is at place_0, path_0-3 and place_0 are connected, path_0-1 and place_1 are connected, truck_2 is empty, place_3 and place_0 are linked, truck_1 is at place_1, driver_1 is at place_3, place_1 and place_0 are linked, place_1 and path_1-3 are connected, place_1 and path_0-1 are connected, truck_3 is at place_0, place_0 and place_3 are linked, place_0 and place_2 are linked, place_0 and place_1 are linked, place_1 and path_2-1 are connected, package_3 is at place_3, place_2 and path_0-2 are connected, path_2-1 and place_1 are connected, package_1 is at place_3, path_0-2 and place_2 are connected, path_0-3 and place_3 are connected, truck_1 is empty, driver_4 is at place_1, path_1-3 and place_1 are connected, truck_4 is at place_2, place_0 and path_0-1 are connected, place_2 and place_3 are linked, place_3 and path_2-3 are connected, place_0 and path_0-3 are connected, place_3 and place_2 are linked, place_2 and path_2-3 are connected, package_4 is at place_2, place_3 and place_1 are linked, path_2-3 and place_2 are connected, place_1 and place_2 are linked, path_2-3 and place_3 are connected, place_2 and place_0 are linked.\nMy goal is to have that package_3 is at place_1, driver_2 is at place_3, driver_3 is at place_2, package_2 is at place_1, driver_1 is at place_3, truck_2 is at place_0, truck_1 is at place_2, package_1 is at place_1, package_4 is at place_3, package_5 is at place_1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A driver_4 can board a truck_2 only if the truck_2 is empty. A driver_4 can board a truck_2 only if the driver_4 is at the same place_1 as the truck_2. </PRECON> driver_4 boards truck_2 at place_1 <EFFECT> Once a driver_4 boards a truck_2, the driver_4 is no longer at the place_1. Once a driver_4 boards a truck_2, we say the driver_4 is driving the truck_2. Once a driver_4 boards a truck_2, the truck_2 is no longer empty. </EFFECT> \n <PRECON> A driver_4 can drive a truck_2 from place_1 to place_3 only if the driver_4 is driving the truck_2 and the truck_2 is at the place_1. A driver_4 can drive a truck_2 from place_1 to place_3 only if the place_1 and place_3 are linked. </PRECON> driver_4 drives truck_2 from place_1 to place_3 <EFFECT> Once a driver_4 drives a truck_2 from place_1 to place_3, the truck_2 is at the place_3 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_3 can board a truck_1 only if the truck_1 is empty. A driver_3 can board a truck_1 only if the driver_3 is at the same place_1 as the truck_1. </PRECON> driver_3 boards truck_1 at place_1 <EFFECT> Once a driver_3 boards a truck_1, the driver_3 is no longer at the place_1. Once a driver_3 boards a truck_1, we say the driver_3 is driving the truck_1. Once a driver_3 boards a truck_1, the truck_1 is no longer empty. </EFFECT> \n <PRECON> A driver_4 can drive a truck_2 from place_3 to place_0 only if the driver_4 is driving the truck_2 and the truck_2 is at the place_3. A driver_4 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_4 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_4 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> \n <PRECON> An package_2 can be loaded into a truck_2 only if the package_2 is at the same place_0 as the truck_2. </PRECON> load package_2 into truck_2 at place_0 <EFFECT> Once an package_2 is loaded into a truck_2, the package_2 is not at the place_0 but is in the truck_2. </EFFECT> \n <PRECON> A driver_2 can walk from place_2 to path_2-3 only if the driver_2 is at the place_2 and the place_2 and path_2-3 are linked. </PRECON> driver_2 walks from place_2 to path_2-3 <EFFECT> Once a driver_2 walks from place_2 to path_2-3, the driver_2 is at the path_2-3 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_2 can walk from path_2-3 to place_3 only if the driver_2 is at the path_2-3 and the path_2-3 and place_3 are linked. </PRECON> driver_2 walks from path_2-3 to place_3 <EFFECT> Once a driver_2 walks from path_2-3 to place_3, the driver_2 is at the place_3 and is no longer at the path_2-3. </EFFECT> \n <PRECON> A driver_4 can drive a truck_2 from place_0 to place_1 only if the driver_4 is driving the truck_2 and the truck_2 is at the place_0. A driver_4 can drive a truck_2 from place_0 to place_1 only if the place_0 and place_1 are linked. </PRECON> driver_4 drives truck_2 from place_0 to place_1 <EFFECT> Once a driver_4 drives a truck_2 from place_0 to place_1, the truck_2 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> An package_2 can be unloaded from a truck_2 only if the package_2 is in the truck_2. </PRECON> unload package_2 from truck_2 at place_1 <EFFECT> Once an package_2 is unloaded from a truck_2, the package_2 is not in the truck_2 but is at the place_1 of the truck_2. </EFFECT> \n <PRECON> A driver_4 can drive a truck_2 from place_1 to place_0 only if the driver_4 is driving the truck_2 and the truck_2 is at the place_1. A driver_4 can drive a truck_2 from place_1 to place_0 only if the place_1 and place_0 are linked. </PRECON> driver_4 drives truck_2 from place_1 to place_0 <EFFECT> Once a driver_4 drives a truck_2 from place_1 to place_0, the truck_2 is at the place_0 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_1 from place_1 to place_2 only if the driver_3 is driving the truck_1 and the truck_1 is at the place_1. A driver_3 can drive a truck_1 from place_1 to place_2 only if the place_1 and place_2 are linked. </PRECON> driver_3 drives truck_1 from place_1 to place_2 <EFFECT> Once a driver_3 drives a truck_1 from place_1 to place_2, the truck_1 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> An package_4 can be loaded into a truck_1 only if the package_4 is at the same place_2 as the truck_1. </PRECON> load package_4 into truck_1 at place_2 <EFFECT> Once an package_4 is loaded into a truck_1, the package_4 is not at the place_2 but is in the truck_1. </EFFECT> \n <PRECON> An package_1 can be loaded into a truck_1 only if the package_1 is at the same place_3 as the truck_1. </PRECON> load package_1 into truck_1 at place_3 <EFFECT> Once an package_1 is loaded into a truck_1, the package_1 is not at the place_3 but is in the truck_1. </EFFECT> WRONG \n <PRECON> A driver_3 can drive a truck_1 from place_2 to place_3 only if the driver_3 is driving the truck_1 and the truck_1 is at the place_2. A driver_3 can drive a truck_1 from place_2 to place_3 only if the place_2 and place_3 are linked. </PRECON> driver_3 drives truck_1 from place_2 to place_3 <EFFECT> Once a driver_3 drives a truck_1 from place_2 to place_3, the truck_1 is at the place_3 and is no longer at the place_2. </EFFECT> \n <PRECON> An package_5 can be loaded into a truck_1 only if the package_5 is at the same place_3 as the truck_1. </PRECON> load package_5 into truck_1 at place_3 <EFFECT> Once an package_5 is loaded into a truck_1, the package_5 is not at the place_3 but is in the truck_1. </EFFECT> \n <PRECON> An package_4 can be unloaded from a truck_1 only if the package_4 is in the truck_1. </PRECON> unload package_4 from truck_1 at place_3 <EFFECT> Once an package_4 is unloaded from a truck_1, the package_4 is not in the truck_1 but is at the place_3 of the truck_1. </EFFECT> \n <PRECON> An package_3 can be loaded into a truck_1 only if the package_3 is at the same place_3 as the truck_1. </PRECON> load package_3 into truck_1 at place_3 <EFFECT> Once an package_3 is loaded into a truck_1, the package_3 is not at the place_3 but is in the truck_1. </EFFECT> \n <PRECON> An package_3 can be unloaded from a truck_1 only if the package_3 is in the truck_1. </PRECON> unload package_3 from truck_1 at place_1 <EFFECT> Once an package_3 is unloaded from a truck_1, the package_3 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> WRONG \n <PRECON> An package_1 can be loaded into a truck_1 only if the package_1 is at the same place_3 as the truck_1. </PRECON> load package_1 into truck_1 at place_3 <EFFECT> Once an package_1 is loaded into a truck_1, the package_1 is not at the place_3 but is in the truck_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_1 from place_3 to place_1 only if the driver_3 is driving the truck_1 and the truck_1 is at the place_3. A driver_3 can drive a truck_1 from place_3 to place_1 only if the place_3 and place_1 are linked. </PRECON> driver_3 drives truck_1 from place_3 to place_1 <EFFECT> Once a driver_3 drives a truck_1 from place_3 to place_1, the truck_1 is at the place_1 and is no longer at the place_3. </EFFECT> \n <PRECON> An package_5 can be unloaded from a truck_1 only if the package_5 is in the truck_1. </PRECON> unload package_5 from truck_1 at place_1 <EFFECT> Once an package_5 is unloaded from a truck_1, the package_5 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> \n <PRECON> An package_3 can be unloaded from a truck_1 only if the package_3 is in the truck_1. </PRECON> unload package_3 from truck_1 at place_1 <EFFECT> Once an package_3 is unloaded from a truck_1, the package_3 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> \n <PRECON> An package_1 can be unloaded from a truck_1 only if the package_1 is in the truck_1. </PRECON> unload package_1 from truck_1 at place_1 <EFFECT> Once an package_1 is unloaded from a truck_1, the package_1 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_1 from place_1 to place_2 only if the driver_3 is driving the truck_1 and the truck_1 is at the place_1. A driver_3 can drive a truck_1 from place_1 to place_2 only if the place_1 and place_2 are linked. </PRECON> driver_3 drives truck_1 from place_1 to place_2 <EFFECT> Once a driver_3 drives a truck_1 from place_1 to place_2, the truck_1 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_3 can disembark from a truck_1 only if the driver_3 is driving the truck_1. </PRECON> driver_3 disembarks from truck_1 at place_2 <EFFECT> Once a driver_3 disembarks from a truck_1, we say the driver_3 is no longer driving the truck_1. Once a driver_3 disembarks from a truck_1, the driver_3 is at the place_2 of the truck_1. Once a driver_3 disembarks from a truck_1, the truck_1 is empty. </EFFECT> \n</PLAN>", "plan_length": 23, "raw_plan": ["(board-truck driver4 truck2 s1)", "(drive-truck truck2 s1 s3 driver4)", "(board-truck driver3 truck1 s1)", "(drive-truck truck2 s3 s0 driver4)", "(load-truck package2 truck2 s0)", "(walk driver2 s2 p2-3)", "(walk driver2 p2-3 s3)", "(drive-truck truck2 s0 s1 driver4)", "(unload-truck package2 truck2 s1)", "(drive-truck truck2 s1 s0 driver4)", "(drive-truck truck1 s1 s2 driver3)", "(load-truck package4 truck1 s2)", "(drive-truck truck1 s2 s3 driver3)", "(load-truck package5 truck1 s3)", "(unload-truck package4 truck1 s3)", "(load-truck package3 truck1 s3)", "(load-truck package1 truck1 s3)", "(drive-truck truck1 s3 s1 driver3)", "(unload-truck package5 truck1 s1)", "(unload-truck package3 truck1 s1)", "(unload-truck package1 truck1 s1)", "(drive-truck truck1 s1 s2 driver3)", "(disembark-truck driver3 truck1 s2)"], "full_text_prompt": "I have to plan how to transport objects between locations using trucks driven by drivers. The drivers can walk between locations, board and disembark from trucks, and drive trucks between locations. The trucks can be loaded and unloaded with objects.\nHere are the actions that can be performed:\nLoad an object into a truck.\nUnload an object from a truck.\nA driver boards a truck.\nA driver disembarks from a truck.\nA driver drives a truck from one location to another location.\nA driver walks from one location to another location.\nThe following are the restrictions on the actions:\nAn object can be loaded into a truck only if the object is at the same location as the truck.\nOnce an object is loaded into a truck, the object is not at the location but is in the truck.\nAn object can be unloaded from a truck only if the object is in the truck.\nOnce an object is unloaded from a truck, the object is not in the truck but is at the location of the truck.\nA driver can board a truck only if the driver is at the same location as the truck.\nA driver can board a truck only if the truck is empty.\nOnce a driver boards a truck, we say the driver is driving the truck.\nOnce a driver boards a truck, the driver is no longer at the location.\nOnce a driver boards a truck, the truck is no longer empty.\nA driver can disembark from a truck only if the driver is driving the truck.\nOnce a driver disembarks from a truck, we say the driver is no longer driving the truck.\nOnce a driver disembarks from a truck, the driver is at the location of the truck.\nOnce a driver disembarks from a truck, the truck is empty.\nA driver can drive a truck from one location to another location only if the driver is driving the truck and the truck is at the from-location.\nA driver can drive a truck from one location to another location only if the from-location and to-location are linked.\nOnce a driver drives a truck from one location to another location, the truck is at the to-location and is no longer at the from-location.\nA driver can walk from one location to another location only if the driver is at the from-location and the from-location and to-location are linked.\nOnce a driver walks from one location to another location, the driver is at the to-location and is no longer at the from-location.As initial conditions I have that, package_5 is at place_3, truck_4 is empty, path_1-3 and place_3 are connected, truck_2 is at place_1, path_0-2 and place_0 are connected, place_1 and place_3 are linked, path_2-1 and place_2 are connected, place_0 and path_0-2 are connected, driver_3 is at place_1, place_2 and place_1 are linked, truck_3 is empty, place_3 and path_1-3 are connected, path_0-1 and place_0 are connected, place_2 and path_2-1 are connected, place_3 and path_0-3 are connected, driver_2 is at place_2, package_2 is at place_0, path_0-3 and place_0 are connected, path_0-1 and place_1 are connected, truck_2 is empty, place_3 and place_0 are linked, truck_1 is at place_1, driver_1 is at place_3, place_1 and place_0 are linked, place_1 and path_1-3 are connected, place_1 and path_0-1 are connected, truck_3 is at place_0, place_0 and place_3 are linked, place_0 and place_2 are linked, place_0 and place_1 are linked, place_1 and path_2-1 are connected, package_3 is at place_3, place_2 and path_0-2 are connected, path_2-1 and place_1 are connected, package_1 is at place_3, path_0-2 and place_2 are connected, path_0-3 and place_3 are connected, truck_1 is empty, driver_4 is at place_1, path_1-3 and place_1 are connected, truck_4 is at place_2, place_0 and path_0-1 are connected, place_2 and place_3 are linked, place_3 and path_2-3 are connected, place_0 and path_0-3 are connected, place_3 and place_2 are linked, place_2 and path_2-3 are connected, package_4 is at place_2, place_3 and place_1 are linked, path_2-3 and place_2 are connected, place_1 and place_2 are linked, path_2-3 and place_3 are connected, place_2 and place_0 are linked.My goal is to have that package_3 is at place_1, driver_2 is at place_3, driver_3 is at place_2, package_2 is at place_1, driver_1 is at place_3, truck_2 is at place_0, truck_1 is at place_2, package_1 is at place_1, package_4 is at place_3, package_5 is at place_1.My plan is as follows:\n<PLAN>\n <PRECON> A driver_4 can board a truck_2 only if the truck_2 is empty. A driver_4 can board a truck_2 only if the driver_4 is at the same place_1 as the truck_2. </PRECON> driver_4 boards truck_2 at place_1 <EFFECT> Once a driver_4 boards a truck_2, the driver_4 is no longer at the place_1. Once a driver_4 boards a truck_2, we say the driver_4 is driving the truck_2. Once a driver_4 boards a truck_2, the truck_2 is no longer empty. </EFFECT> \n <PRECON> A driver_4 can drive a truck_2 from place_1 to place_3 only if the driver_4 is driving the truck_2 and the truck_2 is at the place_1. A driver_4 can drive a truck_2 from place_1 to place_3 only if the place_1 and place_3 are linked. </PRECON> driver_4 drives truck_2 from place_1 to place_3 <EFFECT> Once a driver_4 drives a truck_2 from place_1 to place_3, the truck_2 is at the place_3 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_3 can board a truck_1 only if the truck_1 is empty. A driver_3 can board a truck_1 only if the driver_3 is at the same place_1 as the truck_1. </PRECON> driver_3 boards truck_1 at place_1 <EFFECT> Once a driver_3 boards a truck_1, the driver_3 is no longer at the place_1. Once a driver_3 boards a truck_1, we say the driver_3 is driving the truck_1. Once a driver_3 boards a truck_1, the truck_1 is no longer empty. </EFFECT> \n <PRECON> A driver_4 can drive a truck_2 from place_3 to place_0 only if the driver_4 is driving the truck_2 and the truck_2 is at the place_3. A driver_4 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_4 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_4 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> \n <PRECON> An package_2 can be loaded into a truck_2 only if the package_2 is at the same place_0 as the truck_2. </PRECON> load package_2 into truck_2 at place_0 <EFFECT> Once an package_2 is loaded into a truck_2, the package_2 is not at the place_0 but is in the truck_2. </EFFECT> \n <PRECON> A driver_2 can walk from place_2 to path_2-3 only if the driver_2 is at the place_2 and the place_2 and path_2-3 are linked. </PRECON> driver_2 walks from place_2 to path_2-3 <EFFECT> Once a driver_2 walks from place_2 to path_2-3, the driver_2 is at the path_2-3 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_2 can walk from path_2-3 to place_3 only if the driver_2 is at the path_2-3 and the path_2-3 and place_3 are linked. </PRECON> driver_2 walks from path_2-3 to place_3 <EFFECT> Once a driver_2 walks from path_2-3 to place_3, the driver_2 is at the place_3 and is no longer at the path_2-3. </EFFECT> \n <PRECON> A driver_4 can drive a truck_2 from place_0 to place_1 only if the driver_4 is driving the truck_2 and the truck_2 is at the place_0. A driver_4 can drive a truck_2 from place_0 to place_1 only if the place_0 and place_1 are linked. </PRECON> driver_4 drives truck_2 from place_0 to place_1 <EFFECT> Once a driver_4 drives a truck_2 from place_0 to place_1, the truck_2 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> An package_2 can be unloaded from a truck_2 only if the package_2 is in the truck_2. </PRECON> unload package_2 from truck_2 at place_1 <EFFECT> Once an package_2 is unloaded from a truck_2, the package_2 is not in the truck_2 but is at the place_1 of the truck_2. </EFFECT> \n <PRECON> A driver_4 can drive a truck_2 from place_1 to place_0 only if the driver_4 is driving the truck_2 and the truck_2 is at the place_1. A driver_4 can drive a truck_2 from place_1 to place_0 only if the place_1 and place_0 are linked. </PRECON> driver_4 drives truck_2 from place_1 to place_0 <EFFECT> Once a driver_4 drives a truck_2 from place_1 to place_0, the truck_2 is at the place_0 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_1 from place_1 to place_2 only if the driver_3 is driving the truck_1 and the truck_1 is at the place_1. A driver_3 can drive a truck_1 from place_1 to place_2 only if the place_1 and place_2 are linked. </PRECON> driver_3 drives truck_1 from place_1 to place_2 <EFFECT> Once a driver_3 drives a truck_1 from place_1 to place_2, the truck_1 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> An package_4 can be loaded into a truck_1 only if the package_4 is at the same place_2 as the truck_1. </PRECON> load package_4 into truck_1 at place_2 <EFFECT> Once an package_4 is loaded into a truck_1, the package_4 is not at the place_2 but is in the truck_1. </EFFECT> \n <PRECON> An package_1 can be loaded into a truck_1 only if the package_1 is at the same place_3 as the truck_1. </PRECON> load package_1 into truck_1 at place_3 <EFFECT> Once an package_1 is loaded into a truck_1, the package_1 is not at the place_3 but is in the truck_1. </EFFECT> WRONG \n <PRECON> A driver_3 can drive a truck_1 from place_2 to place_3 only if the driver_3 is driving the truck_1 and the truck_1 is at the place_2. A driver_3 can drive a truck_1 from place_2 to place_3 only if the place_2 and place_3 are linked. </PRECON> driver_3 drives truck_1 from place_2 to place_3 <EFFECT> Once a driver_3 drives a truck_1 from place_2 to place_3, the truck_1 is at the place_3 and is no longer at the place_2. </EFFECT> \n <PRECON> An package_5 can be loaded into a truck_1 only if the package_5 is at the same place_3 as the truck_1. </PRECON> load package_5 into truck_1 at place_3 <EFFECT> Once an package_5 is loaded into a truck_1, the package_5 is not at the place_3 but is in the truck_1. </EFFECT> \n <PRECON> An package_4 can be unloaded from a truck_1 only if the package_4 is in the truck_1. </PRECON> unload package_4 from truck_1 at place_3 <EFFECT> Once an package_4 is unloaded from a truck_1, the package_4 is not in the truck_1 but is at the place_3 of the truck_1. </EFFECT> \n <PRECON> An package_3 can be loaded into a truck_1 only if the package_3 is at the same place_3 as the truck_1. </PRECON> load package_3 into truck_1 at place_3 <EFFECT> Once an package_3 is loaded into a truck_1, the package_3 is not at the place_3 but is in the truck_1. </EFFECT> \n <PRECON> An package_3 can be unloaded from a truck_1 only if the package_3 is in the truck_1. </PRECON> unload package_3 from truck_1 at place_1 <EFFECT> Once an package_3 is unloaded from a truck_1, the package_3 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> WRONG \n <PRECON> An package_1 can be loaded into a truck_1 only if the package_1 is at the same place_3 as the truck_1. </PRECON> load package_1 into truck_1 at place_3 <EFFECT> Once an package_1 is loaded into a truck_1, the package_1 is not at the place_3 but is in the truck_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_1 from place_3 to place_1 only if the driver_3 is driving the truck_1 and the truck_1 is at the place_3. A driver_3 can drive a truck_1 from place_3 to place_1 only if the place_3 and place_1 are linked. </PRECON> driver_3 drives truck_1 from place_3 to place_1 <EFFECT> Once a driver_3 drives a truck_1 from place_3 to place_1, the truck_1 is at the place_1 and is no longer at the place_3. </EFFECT> \n <PRECON> An package_5 can be unloaded from a truck_1 only if the package_5 is in the truck_1. </PRECON> unload package_5 from truck_1 at place_1 <EFFECT> Once an package_5 is unloaded from a truck_1, the package_5 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> \n <PRECON> An package_3 can be unloaded from a truck_1 only if the package_3 is in the truck_1. </PRECON> unload package_3 from truck_1 at place_1 <EFFECT> Once an package_3 is unloaded from a truck_1, the package_3 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> \n <PRECON> An package_1 can be unloaded from a truck_1 only if the package_1 is in the truck_1. </PRECON> unload package_1 from truck_1 at place_1 <EFFECT> Once an package_1 is unloaded from a truck_1, the package_1 is not in the truck_1 but is at the place_1 of the truck_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_1 from place_1 to place_2 only if the driver_3 is driving the truck_1 and the truck_1 is at the place_1. A driver_3 can drive a truck_1 from place_1 to place_2 only if the place_1 and place_2 are linked. </PRECON> driver_3 drives truck_1 from place_1 to place_2 <EFFECT> Once a driver_3 drives a truck_1 from place_1 to place_2, the truck_1 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_3 can disembark from a truck_1 only if the driver_3 is driving the truck_1. </PRECON> driver_3 disembarks from truck_1 at place_2 <EFFECT> Once a driver_3 disembarks from a truck_1, we say the driver_3 is no longer driving the truck_1. Once a driver_3 disembarks from a truck_1, the driver_3 is at the place_2 of the truck_1. Once a driver_3 disembarks from a truck_1, the truck_1 is empty. </EFFECT> \n</PLAN>"}
{"domain": "driverlog", "instance_id": "80", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to transport objects between locations using trucks driven by drivers. The drivers can walk between locations, board and disembark from trucks, and drive trucks between locations. The trucks can be loaded and unloaded with objects.\nHere are the actions that can be performed:\nLoad an object into a truck.\nUnload an object from a truck.\nA driver boards a truck.\nA driver disembarks from a truck.\nA driver drives a truck from one location to another location.\nA driver walks from one location to another location.\nThe following are the restrictions on the actions:\nAn object can be loaded into a truck only if the object is at the same location as the truck.\nOnce an object is loaded into a truck, the object is not at the location but is in the truck.\nAn object can be unloaded from a truck only if the object is in the truck.\nOnce an object is unloaded from a truck, the object is not in the truck but is at the location of the truck.\nA driver can board a truck only if the driver is at the same location as the truck.\nA driver can board a truck only if the truck is empty.\nOnce a driver boards a truck, we say the driver is driving the truck.\nOnce a driver boards a truck, the driver is no longer at the location.\nOnce a driver boards a truck, the truck is no longer empty.\nA driver can disembark from a truck only if the driver is driving the truck.\nOnce a driver disembarks from a truck, we say the driver is no longer driving the truck.\nOnce a driver disembarks from a truck, the driver is at the location of the truck.\nOnce a driver disembarks from a truck, the truck is empty.\nA driver can drive a truck from one location to another location only if the driver is driving the truck and the truck is at the from-location.\nA driver can drive a truck from one location to another location only if the from-location and to-location are linked.\nOnce a driver drives a truck from one location to another location, the truck is at the to-location and is no longer at the from-location.\nA driver can walk from one location to another location only if the driver is at the from-location and the from-location and to-location are linked.\nOnce a driver walks from one location to another location, the driver is at the to-location and is no longer at the from-location.", "input": "As initial conditions I have that, driver_2 is at place_1, place_0 and path_0-2 are connected, path_0-2 and place_0 are connected, package_1 is at place_2, place_0 and path_0-3 are connected, place_3 and place_0 are linked, place_2 and path_1-2 are connected, place_0 and place_1 are linked, truck_2 is at place_0, truck_3 is empty, path_1-2 and place_2 are connected, path_0-1 and place_0 are connected, driver_1 is at place_0, driver_3 is at place_3, path_3-2 and place_3 are connected, package_2 is at place_0, place_0 and place_2 are linked, place_0 and path_0-1 are connected, place_1 and path_0-1 are connected, package_4 is at place_0, place_1 and place_0 are linked, path_0-1 and place_1 are connected, path_0-2 and place_2 are connected, package_3 is at place_1, place_3 and path_3-2 are connected, place_2 and place_0 are linked, place_2 and path_3-2 are connected, place_2 and path_0-2 are connected, place_3 and place_2 are linked, place_0 and place_3 are linked, truck_1 is empty, place_2 and place_3 are linked, path_3-2 and place_2 are connected, truck_1 is at place_1, path_1-2 and place_1 are connected, place_3 and path_0-3 are connected, place_2 and place_1 are linked, path_0-3 and place_3 are connected, path_0-3 and place_0 are connected, place_1 and path_1-2 are connected, truck_3 is at place_3, truck_2 is empty, place_1 and place_2 are linked.\nMy goal is to have that driver_2 is at place_0, truck_3 is at place_1, package_3 is at place_3, package_1 is at place_1, package_4 is at place_1, package_2 is at place_3, driver_1 is at place_0.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A driver_2 can board a truck_1 only if the driver_2 is at the same place_1 as the truck_1. A driver_2 can board a truck_1 only if the truck_1 is empty. </PRECON> driver_2 boards truck_1 at place_1 <EFFECT> Once a driver_2 boards a truck_1, the driver_2 is no longer at the place_1. Once a driver_2 boards a truck_1, we say the driver_2 is driving the truck_1. Once a driver_2 boards a truck_1, the truck_1 is no longer empty. </EFFECT> \n <PRECON> A driver_2 can drive a truck_1 from place_1 to place_0 only if the place_1 and place_0 are linked. A driver_2 can drive a truck_1 from place_1 to place_0 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_1. </PRECON> driver_2 drives truck_1 from place_1 to place_0 <EFFECT> Once a driver_2 drives a truck_1 from place_1 to place_0, the truck_1 is at the place_0 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_1 only if the driver_2 is driving the truck_1. </PRECON> driver_2 disembarks from truck_1 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_1, the truck_1 is empty. Once a driver_2 disembarks from a truck_1, the driver_2 is at the place_0 of the truck_1. Once a driver_2 disembarks from a truck_1, we say the driver_2 is no longer driving the truck_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_3 only if the place_2 and place_3 are linked. A driver_3 can drive a truck_3 from place_2 to place_3 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_3 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_3, the truck_3 is at the place_3 and is no longer at the place_2. </EFFECT> WRONG \n <PRECON> A driver_3 can board a truck_3 only if the driver_3 is at the same place_3 as the truck_3. A driver_3 can board a truck_3 only if the truck_3 is empty. </PRECON> driver_3 boards truck_3 at place_3 <EFFECT> Once a driver_3 boards a truck_3, the driver_3 is no longer at the place_3. Once a driver_3 boards a truck_3, we say the driver_3 is driving the truck_3. Once a driver_3 boards a truck_3, the truck_3 is no longer empty. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_3 to place_0 only if the place_3 and place_0 are linked. A driver_3 can drive a truck_3 from place_3 to place_0 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_3. </PRECON> driver_3 drives truck_3 from place_3 to place_0 <EFFECT> Once a driver_3 drives a truck_3 from place_3 to place_0, the truck_3 is at the place_0 and is no longer at the place_3. </EFFECT> \n <PRECON> An package_4 can be loaded into a truck_3 only if the package_4 is at the same place_0 as the truck_3. </PRECON> load package_4 into truck_3 at place_0 <EFFECT> Once an package_4 is loaded into a truck_3, the package_4 is not at the place_0 but is in the truck_3. </EFFECT> \n <PRECON> An package_2 can be loaded into a truck_3 only if the package_2 is at the same place_0 as the truck_3. </PRECON> load package_2 into truck_3 at place_0 <EFFECT> Once an package_2 is loaded into a truck_3, the package_2 is not at the place_0 but is in the truck_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_0 to place_1 only if the place_0 and place_1 are linked. A driver_3 can drive a truck_3 from place_0 to place_1 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_0. </PRECON> driver_3 drives truck_3 from place_0 to place_1 <EFFECT> Once a driver_3 drives a truck_3 from place_0 to place_1, the truck_3 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> An package_4 can be unloaded from a truck_3 only if the package_4 is in the truck_3. </PRECON> unload package_4 from truck_3 at place_1 <EFFECT> Once an package_4 is unloaded from a truck_3, the package_4 is not in the truck_3 but is at the place_1 of the truck_3. </EFFECT> \n <PRECON> An package_3 can be loaded into a truck_3 only if the package_3 is at the same place_1 as the truck_3. </PRECON> load package_3 into truck_3 at place_1 <EFFECT> Once an package_3 is loaded into a truck_3, the package_3 is not at the place_1 but is in the truck_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_1 only if the place_2 and place_1 are linked. A driver_3 can drive a truck_3 from place_2 to place_1 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_1 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_1, the truck_3 is at the place_1 and is no longer at the place_2. </EFFECT> WRONG \n <PRECON> A driver_3 can drive a truck_3 from place_1 to place_2 only if the place_1 and place_2 are linked. A driver_3 can drive a truck_3 from place_1 to place_2 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_1. </PRECON> driver_3 drives truck_3 from place_1 to place_2 <EFFECT> Once a driver_3 drives a truck_3 from place_1 to place_2, the truck_3 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_1 only if the place_2 and place_1 are linked. A driver_3 can drive a truck_3 from place_2 to place_1 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_1 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_1, the truck_3 is at the place_1 and is no longer at the place_2. </EFFECT> WRONG \n <PRECON> An package_1 can be loaded into a truck_3 only if the package_1 is at the same place_2 as the truck_3. </PRECON> load package_1 into truck_3 at place_2 <EFFECT> Once an package_1 is loaded into a truck_3, the package_1 is not at the place_2 but is in the truck_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_1 only if the place_2 and place_1 are linked. A driver_3 can drive a truck_3 from place_2 to place_1 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_1 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_1, the truck_3 is at the place_1 and is no longer at the place_2. </EFFECT> \n <PRECON> An package_1 can be unloaded from a truck_3 only if the package_1 is in the truck_3. </PRECON> unload package_1 from truck_3 at place_1 <EFFECT> Once an package_1 is unloaded from a truck_3, the package_1 is not in the truck_3 but is at the place_1 of the truck_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_1 to place_2 only if the place_1 and place_2 are linked. A driver_3 can drive a truck_3 from place_1 to place_2 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_1. </PRECON> driver_3 drives truck_3 from place_1 to place_2 <EFFECT> Once a driver_3 drives a truck_3 from place_1 to place_2, the truck_3 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_3 only if the place_2 and place_3 are linked. A driver_3 can drive a truck_3 from place_2 to place_3 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_3 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_3, the truck_3 is at the place_3 and is no longer at the place_2. </EFFECT> \n <PRECON> An package_3 can be unloaded from a truck_3 only if the package_3 is in the truck_3. </PRECON> unload package_3 from truck_3 at place_3 <EFFECT> Once an package_3 is unloaded from a truck_3, the package_3 is not in the truck_3 but is at the place_3 of the truck_3. </EFFECT> \n <PRECON> An package_2 can be unloaded from a truck_3 only if the package_2 is in the truck_3. </PRECON> unload package_2 from truck_3 at place_3 <EFFECT> Once an package_2 is unloaded from a truck_3, the package_2 is not in the truck_3 but is at the place_3 of the truck_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_3 to place_2 only if the place_3 and place_2 are linked. A driver_3 can drive a truck_3 from place_3 to place_2 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_3. </PRECON> driver_3 drives truck_3 from place_3 to place_2 <EFFECT> Once a driver_3 drives a truck_3 from place_3 to place_2, the truck_3 is at the place_2 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_1 only if the place_2 and place_1 are linked. A driver_3 can drive a truck_3 from place_2 to place_1 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_1 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_1, the truck_3 is at the place_1 and is no longer at the place_2. </EFFECT> \n</PLAN>", "plan_length": 20, "raw_plan": ["(board-truck driver2 truck1 s1)", "(drive-truck truck1 s1 s0 driver2)", "(disembark-truck driver2 truck1 s0)", "(board-truck driver3 truck3 s3)", "(drive-truck truck3 s3 s0 driver3)", "(load-truck package4 truck3 s0)", "(load-truck package2 truck3 s0)", "(drive-truck truck3 s0 s1 driver3)", "(unload-truck package4 truck3 s1)", "(load-truck package3 truck3 s1)", "(drive-truck truck3 s1 s2 driver3)", "(load-truck package1 truck3 s2)", "(drive-truck truck3 s2 s1 driver3)", "(unload-truck package1 truck3 s1)", "(drive-truck truck3 s1 s2 driver3)", "(drive-truck truck3 s2 s3 driver3)", "(unload-truck package3 truck3 s3)", "(unload-truck package2 truck3 s3)", "(drive-truck truck3 s3 s2 driver3)", "(drive-truck truck3 s2 s1 driver3)"], "full_text_prompt": "I have to plan how to transport objects between locations using trucks driven by drivers. The drivers can walk between locations, board and disembark from trucks, and drive trucks between locations. The trucks can be loaded and unloaded with objects.\nHere are the actions that can be performed:\nLoad an object into a truck.\nUnload an object from a truck.\nA driver boards a truck.\nA driver disembarks from a truck.\nA driver drives a truck from one location to another location.\nA driver walks from one location to another location.\nThe following are the restrictions on the actions:\nAn object can be loaded into a truck only if the object is at the same location as the truck.\nOnce an object is loaded into a truck, the object is not at the location but is in the truck.\nAn object can be unloaded from a truck only if the object is in the truck.\nOnce an object is unloaded from a truck, the object is not in the truck but is at the location of the truck.\nA driver can board a truck only if the driver is at the same location as the truck.\nA driver can board a truck only if the truck is empty.\nOnce a driver boards a truck, we say the driver is driving the truck.\nOnce a driver boards a truck, the driver is no longer at the location.\nOnce a driver boards a truck, the truck is no longer empty.\nA driver can disembark from a truck only if the driver is driving the truck.\nOnce a driver disembarks from a truck, we say the driver is no longer driving the truck.\nOnce a driver disembarks from a truck, the driver is at the location of the truck.\nOnce a driver disembarks from a truck, the truck is empty.\nA driver can drive a truck from one location to another location only if the driver is driving the truck and the truck is at the from-location.\nA driver can drive a truck from one location to another location only if the from-location and to-location are linked.\nOnce a driver drives a truck from one location to another location, the truck is at the to-location and is no longer at the from-location.\nA driver can walk from one location to another location only if the driver is at the from-location and the from-location and to-location are linked.\nOnce a driver walks from one location to another location, the driver is at the to-location and is no longer at the from-location.As initial conditions I have that, driver_2 is at place_1, place_0 and path_0-2 are connected, path_0-2 and place_0 are connected, package_1 is at place_2, place_0 and path_0-3 are connected, place_3 and place_0 are linked, place_2 and path_1-2 are connected, place_0 and place_1 are linked, truck_2 is at place_0, truck_3 is empty, path_1-2 and place_2 are connected, path_0-1 and place_0 are connected, driver_1 is at place_0, driver_3 is at place_3, path_3-2 and place_3 are connected, package_2 is at place_0, place_0 and place_2 are linked, place_0 and path_0-1 are connected, place_1 and path_0-1 are connected, package_4 is at place_0, place_1 and place_0 are linked, path_0-1 and place_1 are connected, path_0-2 and place_2 are connected, package_3 is at place_1, place_3 and path_3-2 are connected, place_2 and place_0 are linked, place_2 and path_3-2 are connected, place_2 and path_0-2 are connected, place_3 and place_2 are linked, place_0 and place_3 are linked, truck_1 is empty, place_2 and place_3 are linked, path_3-2 and place_2 are connected, truck_1 is at place_1, path_1-2 and place_1 are connected, place_3 and path_0-3 are connected, place_2 and place_1 are linked, path_0-3 and place_3 are connected, path_0-3 and place_0 are connected, place_1 and path_1-2 are connected, truck_3 is at place_3, truck_2 is empty, place_1 and place_2 are linked.My goal is to have that driver_2 is at place_0, truck_3 is at place_1, package_3 is at place_3, package_1 is at place_1, package_4 is at place_1, package_2 is at place_3, driver_1 is at place_0.My plan is as follows:\n<PLAN>\n <PRECON> A driver_2 can board a truck_1 only if the driver_2 is at the same place_1 as the truck_1. A driver_2 can board a truck_1 only if the truck_1 is empty. </PRECON> driver_2 boards truck_1 at place_1 <EFFECT> Once a driver_2 boards a truck_1, the driver_2 is no longer at the place_1. Once a driver_2 boards a truck_1, we say the driver_2 is driving the truck_1. Once a driver_2 boards a truck_1, the truck_1 is no longer empty. </EFFECT> \n <PRECON> A driver_2 can drive a truck_1 from place_1 to place_0 only if the place_1 and place_0 are linked. A driver_2 can drive a truck_1 from place_1 to place_0 only if the driver_2 is driving the truck_1 and the truck_1 is at the place_1. </PRECON> driver_2 drives truck_1 from place_1 to place_0 <EFFECT> Once a driver_2 drives a truck_1 from place_1 to place_0, the truck_1 is at the place_0 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_1 only if the driver_2 is driving the truck_1. </PRECON> driver_2 disembarks from truck_1 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_1, the truck_1 is empty. Once a driver_2 disembarks from a truck_1, the driver_2 is at the place_0 of the truck_1. Once a driver_2 disembarks from a truck_1, we say the driver_2 is no longer driving the truck_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_3 only if the place_2 and place_3 are linked. A driver_3 can drive a truck_3 from place_2 to place_3 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_3 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_3, the truck_3 is at the place_3 and is no longer at the place_2. </EFFECT> WRONG \n <PRECON> A driver_3 can board a truck_3 only if the driver_3 is at the same place_3 as the truck_3. A driver_3 can board a truck_3 only if the truck_3 is empty. </PRECON> driver_3 boards truck_3 at place_3 <EFFECT> Once a driver_3 boards a truck_3, the driver_3 is no longer at the place_3. Once a driver_3 boards a truck_3, we say the driver_3 is driving the truck_3. Once a driver_3 boards a truck_3, the truck_3 is no longer empty. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_3 to place_0 only if the place_3 and place_0 are linked. A driver_3 can drive a truck_3 from place_3 to place_0 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_3. </PRECON> driver_3 drives truck_3 from place_3 to place_0 <EFFECT> Once a driver_3 drives a truck_3 from place_3 to place_0, the truck_3 is at the place_0 and is no longer at the place_3. </EFFECT> \n <PRECON> An package_4 can be loaded into a truck_3 only if the package_4 is at the same place_0 as the truck_3. </PRECON> load package_4 into truck_3 at place_0 <EFFECT> Once an package_4 is loaded into a truck_3, the package_4 is not at the place_0 but is in the truck_3. </EFFECT> \n <PRECON> An package_2 can be loaded into a truck_3 only if the package_2 is at the same place_0 as the truck_3. </PRECON> load package_2 into truck_3 at place_0 <EFFECT> Once an package_2 is loaded into a truck_3, the package_2 is not at the place_0 but is in the truck_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_0 to place_1 only if the place_0 and place_1 are linked. A driver_3 can drive a truck_3 from place_0 to place_1 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_0. </PRECON> driver_3 drives truck_3 from place_0 to place_1 <EFFECT> Once a driver_3 drives a truck_3 from place_0 to place_1, the truck_3 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> An package_4 can be unloaded from a truck_3 only if the package_4 is in the truck_3. </PRECON> unload package_4 from truck_3 at place_1 <EFFECT> Once an package_4 is unloaded from a truck_3, the package_4 is not in the truck_3 but is at the place_1 of the truck_3. </EFFECT> \n <PRECON> An package_3 can be loaded into a truck_3 only if the package_3 is at the same place_1 as the truck_3. </PRECON> load package_3 into truck_3 at place_1 <EFFECT> Once an package_3 is loaded into a truck_3, the package_3 is not at the place_1 but is in the truck_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_1 only if the place_2 and place_1 are linked. A driver_3 can drive a truck_3 from place_2 to place_1 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_1 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_1, the truck_3 is at the place_1 and is no longer at the place_2. </EFFECT> WRONG \n <PRECON> A driver_3 can drive a truck_3 from place_1 to place_2 only if the place_1 and place_2 are linked. A driver_3 can drive a truck_3 from place_1 to place_2 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_1. </PRECON> driver_3 drives truck_3 from place_1 to place_2 <EFFECT> Once a driver_3 drives a truck_3 from place_1 to place_2, the truck_3 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_1 only if the place_2 and place_1 are linked. A driver_3 can drive a truck_3 from place_2 to place_1 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_1 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_1, the truck_3 is at the place_1 and is no longer at the place_2. </EFFECT> WRONG \n <PRECON> An package_1 can be loaded into a truck_3 only if the package_1 is at the same place_2 as the truck_3. </PRECON> load package_1 into truck_3 at place_2 <EFFECT> Once an package_1 is loaded into a truck_3, the package_1 is not at the place_2 but is in the truck_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_1 only if the place_2 and place_1 are linked. A driver_3 can drive a truck_3 from place_2 to place_1 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_1 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_1, the truck_3 is at the place_1 and is no longer at the place_2. </EFFECT> \n <PRECON> An package_1 can be unloaded from a truck_3 only if the package_1 is in the truck_3. </PRECON> unload package_1 from truck_3 at place_1 <EFFECT> Once an package_1 is unloaded from a truck_3, the package_1 is not in the truck_3 but is at the place_1 of the truck_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_1 to place_2 only if the place_1 and place_2 are linked. A driver_3 can drive a truck_3 from place_1 to place_2 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_1. </PRECON> driver_3 drives truck_3 from place_1 to place_2 <EFFECT> Once a driver_3 drives a truck_3 from place_1 to place_2, the truck_3 is at the place_2 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_3 only if the place_2 and place_3 are linked. A driver_3 can drive a truck_3 from place_2 to place_3 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_3 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_3, the truck_3 is at the place_3 and is no longer at the place_2. </EFFECT> \n <PRECON> An package_3 can be unloaded from a truck_3 only if the package_3 is in the truck_3. </PRECON> unload package_3 from truck_3 at place_3 <EFFECT> Once an package_3 is unloaded from a truck_3, the package_3 is not in the truck_3 but is at the place_3 of the truck_3. </EFFECT> \n <PRECON> An package_2 can be unloaded from a truck_3 only if the package_2 is in the truck_3. </PRECON> unload package_2 from truck_3 at place_3 <EFFECT> Once an package_2 is unloaded from a truck_3, the package_2 is not in the truck_3 but is at the place_3 of the truck_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_3 to place_2 only if the place_3 and place_2 are linked. A driver_3 can drive a truck_3 from place_3 to place_2 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_3. </PRECON> driver_3 drives truck_3 from place_3 to place_2 <EFFECT> Once a driver_3 drives a truck_3 from place_3 to place_2, the truck_3 is at the place_2 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_3 can drive a truck_3 from place_2 to place_1 only if the place_2 and place_1 are linked. A driver_3 can drive a truck_3 from place_2 to place_1 only if the driver_3 is driving the truck_3 and the truck_3 is at the place_2. </PRECON> driver_3 drives truck_3 from place_2 to place_1 <EFFECT> Once a driver_3 drives a truck_3 from place_2 to place_1, the truck_3 is at the place_1 and is no longer at the place_2. </EFFECT> \n</PLAN>"}
{"domain": "driverlog", "instance_id": "120", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to transport objects between locations using trucks driven by drivers. The drivers can walk between locations, board and disembark from trucks, and drive trucks between locations. The trucks can be loaded and unloaded with objects.\nHere are the actions that can be performed:\nLoad an object into a truck.\nUnload an object from a truck.\nA driver boards a truck.\nA driver disembarks from a truck.\nA driver drives a truck from one location to another location.\nA driver walks from one location to another location.\nThe following are the restrictions on the actions:\nAn object can be loaded into a truck only if the object is at the same location as the truck.\nOnce an object is loaded into a truck, the object is not at the location but is in the truck.\nAn object can be unloaded from a truck only if the object is in the truck.\nOnce an object is unloaded from a truck, the object is not in the truck but is at the location of the truck.\nA driver can board a truck only if the driver is at the same location as the truck.\nA driver can board a truck only if the truck is empty.\nOnce a driver boards a truck, we say the driver is driving the truck.\nOnce a driver boards a truck, the driver is no longer at the location.\nOnce a driver boards a truck, the truck is no longer empty.\nA driver can disembark from a truck only if the driver is driving the truck.\nOnce a driver disembarks from a truck, we say the driver is no longer driving the truck.\nOnce a driver disembarks from a truck, the driver is at the location of the truck.\nOnce a driver disembarks from a truck, the truck is empty.\nA driver can drive a truck from one location to another location only if the driver is driving the truck and the truck is at the from-location.\nA driver can drive a truck from one location to another location only if the from-location and to-location are linked.\nOnce a driver drives a truck from one location to another location, the truck is at the to-location and is no longer at the from-location.\nA driver can walk from one location to another location only if the driver is at the from-location and the from-location and to-location are linked.\nOnce a driver walks from one location to another location, the driver is at the to-location and is no longer at the from-location.", "input": "As initial conditions I have that, place_1 and place_0 are linked, truck_1 is at place_3, place_0 and place_3 are linked, place_2 and place_3 are linked, package_4 is at place_2, path_2-3 and place_3 are connected, package_1 is at place_2, path_2-3 and place_2 are connected, path_0-1 and place_0 are connected, place_3 and path_1-3 are connected, place_2 and place_0 are linked, place_0 and place_1 are linked, place_3 and path_2-3 are connected, path_1-2 and place_2 are connected, truck_1 is empty, path_1-3 and place_3 are connected, place_3 and place_0 are linked, truck_2 is empty, place_2 and path_1-2 are connected, place_0 and path_0-1 are connected, path_1-2 and place_1 are connected, driver_4 is at place_2, place_2 and path_2-3 are connected, path_0-3 and place_0 are connected, driver_1 is at place_0, package_2 is at place_2, place_3 and path_0-3 are connected, path_1-3 and place_1 are connected, path_0-1 and place_1 are connected, driver_3 is at place_1, driver_2 is at place_2, place_0 and path_0-3 are connected, place_1 and path_0-1 are connected, place_1 and place_2 are linked, place_2 and place_1 are linked, place_3 and place_2 are linked, path_0-3 and place_3 are connected, truck_2 is at place_2, place_1 and path_1-3 are connected, place_1 and path_1-2 are connected, package_3 is at place_2, place_0 and place_2 are linked.\nMy goal is to have that package_2 is at place_1, truck_2 is at place_0, package_1 is at place_0, truck_1 is at place_3, driver_2 is at place_0, package_4 is at place_3, driver_4 is at place_1, driver_1 is at place_2, package_3 is at place_1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> WRONG \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> WRONG \n <PRECON> A driver_2 can board a truck_2 only if the truck_2 is empty. A driver_2 can board a truck_2 only if the driver_2 is at the same place_2 as the truck_2. </PRECON> driver_2 boards truck_2 at place_2 <EFFECT> Once a driver_2 boards a truck_2, the truck_2 is no longer empty. Once a driver_2 boards a truck_2, we say the driver_2 is driving the truck_2. Once a driver_2 boards a truck_2, the driver_2 is no longer at the place_2. </EFFECT> \n <PRECON> A driver_1 can walk from place_0 to path_0-3 only if the driver_1 is at the place_0 and the place_0 and path_0-3 are linked. </PRECON> driver_1 walks from place_0 to path_0-3 <EFFECT> Once a driver_1 walks from place_0 to path_0-3, the driver_1 is at the path_0-3 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_1 can walk from path_0-3 to place_3 only if the driver_1 is at the path_0-3 and the path_0-3 and place_3 are linked. </PRECON> driver_1 walks from path_0-3 to place_3 <EFFECT> Once a driver_1 walks from path_0-3 to place_3, the driver_1 is at the place_3 and is no longer at the path_0-3. </EFFECT> \n <PRECON> A driver_1 can walk from place_3 to path_2-3 only if the driver_1 is at the place_3 and the place_3 and path_2-3 are linked. </PRECON> driver_1 walks from place_3 to path_2-3 <EFFECT> Once a driver_1 walks from place_3 to path_2-3, the driver_1 is at the path_2-3 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> WRONG \n <PRECON> A driver_1 can walk from path_2-3 to place_2 only if the driver_1 is at the path_2-3 and the path_2-3 and place_2 are linked. </PRECON> driver_1 walks from path_2-3 to place_2 <EFFECT> Once a driver_1 walks from path_2-3 to place_2, the driver_1 is at the place_2 and is no longer at the path_2-3. </EFFECT> \n <PRECON> A driver_4 can walk from place_2 to path_1-2 only if the driver_4 is at the place_2 and the place_2 and path_1-2 are linked. </PRECON> driver_4 walks from place_2 to path_1-2 <EFFECT> Once a driver_4 walks from place_2 to path_1-2, the driver_4 is at the path_1-2 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_4 can walk from path_1-2 to place_1 only if the driver_4 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_4 walks from path_1-2 to place_1 <EFFECT> Once a driver_4 walks from path_1-2 to place_1, the driver_4 is at the place_1 and is no longer at the path_1-2. </EFFECT> \n <PRECON> An package_4 can be loaded into a truck_2 only if the package_4 is at the same place_2 as the truck_2. </PRECON> load package_4 into truck_2 at place_2 <EFFECT> Once an package_4 is loaded into a truck_2, the package_4 is not at the place_2 but is in the truck_2. </EFFECT> \n <PRECON> An package_3 can be loaded into a truck_2 only if the package_3 is at the same place_2 as the truck_2. </PRECON> load package_3 into truck_2 at place_2 <EFFECT> Once an package_3 is loaded into a truck_2, the package_3 is not at the place_2 but is in the truck_2. </EFFECT> \n <PRECON> An package_2 can be loaded into a truck_2 only if the package_2 is at the same place_2 as the truck_2. </PRECON> load package_2 into truck_2 at place_2 <EFFECT> Once an package_2 is loaded into a truck_2, the package_2 is not at the place_2 but is in the truck_2. </EFFECT> \n <PRECON> An package_1 can be loaded into a truck_2 only if the package_1 is at the same place_2 as the truck_2. </PRECON> load package_1 into truck_2 at place_2 <EFFECT> Once an package_1 is loaded into a truck_2, the package_1 is not at the place_2 but is in the truck_2. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_2 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_2. A driver_2 can drive a truck_2 from place_2 to place_0 only if the place_2 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_2 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_2 to place_0, the truck_2 is at the place_0 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> \n <PRECON> An package_1 can be unloaded from a truck_2 only if the package_1 is in the truck_2. </PRECON> unload package_1 from truck_2 at place_0 <EFFECT> Once an package_1 is unloaded from a truck_2, the package_1 is not in the truck_2 but is at the place_0 of the truck_2. </EFFECT> \n <PRECON> A driver_2 can board a truck_2 only if the truck_2 is empty. A driver_2 can board a truck_2 only if the driver_2 is at the same place_0 as the truck_2. </PRECON> driver_2 boards truck_2 at place_0 <EFFECT> Once a driver_2 boards a truck_2, the truck_2 is no longer empty. Once a driver_2 boards a truck_2, we say the driver_2 is driving the truck_2. Once a driver_2 boards a truck_2, the driver_2 is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_0 to place_1 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_0. A driver_2 can drive a truck_2 from place_0 to place_1 only if the place_0 and place_1 are linked. </PRECON> driver_2 drives truck_2 from place_0 to place_1 <EFFECT> Once a driver_2 drives a truck_2 from place_0 to place_1, the truck_2 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_1 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_1. A driver_2 can drive a truck_2 from place_1 to place_0 only if the place_1 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_1 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_1 to place_0, the truck_2 is at the place_0 and is no longer at the place_1. </EFFECT> WRONG \n <PRECON> An package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at place_1 <EFFECT> Once an package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 but is at the place_1 of the truck_2. </EFFECT> \n <PRECON> An package_2 can be unloaded from a truck_2 only if the package_2 is in the truck_2. </PRECON> unload package_2 from truck_2 at place_1 <EFFECT> Once an package_2 is unloaded from a truck_2, the package_2 is not in the truck_2 but is at the place_1 of the truck_2. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_1 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_1. A driver_2 can drive a truck_2 from place_1 to place_0 only if the place_1 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_1 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_1 to place_0, the truck_2 is at the place_0 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_0 to place_3 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_0. A driver_2 can drive a truck_2 from place_0 to place_3 only if the place_0 and place_3 are linked. </PRECON> driver_2 drives truck_2 from place_0 to place_3 <EFFECT> Once a driver_2 drives a truck_2 from place_0 to place_3, the truck_2 is at the place_3 and is no longer at the place_0. </EFFECT> \n <PRECON> An package_4 can be unloaded from a truck_2 only if the package_4 is in the truck_2. </PRECON> unload package_4 from truck_2 at place_3 <EFFECT> Once an package_4 is unloaded from a truck_2, the package_4 is not in the truck_2 but is at the place_3 of the truck_2. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> \n</PLAN>", "plan_length": 23, "raw_plan": ["(board-truck driver2 truck2 s2)", "(walk driver1 s0 p0-3)", "(walk driver1 p0-3 s3)", "(walk driver1 s3 p2-3)", "(walk driver1 p2-3 s2)", "(walk driver4 s2 p1-2)", "(walk driver4 p1-2 s1)", "(load-truck package4 truck2 s2)", "(load-truck package3 truck2 s2)", "(load-truck package2 truck2 s2)", "(load-truck package1 truck2 s2)", "(drive-truck truck2 s2 s0 driver2)", "(disembark-truck driver2 truck2 s0)", "(unload-truck package1 truck2 s0)", "(board-truck driver2 truck2 s0)", "(drive-truck truck2 s0 s1 driver2)", "(unload-truck package3 truck2 s1)", "(unload-truck package2 truck2 s1)", "(drive-truck truck2 s1 s0 driver2)", "(drive-truck truck2 s0 s3 driver2)", "(unload-truck package4 truck2 s3)", "(drive-truck truck2 s3 s0 driver2)", "(disembark-truck driver2 truck2 s0)"], "full_text_prompt": "I have to plan how to transport objects between locations using trucks driven by drivers. The drivers can walk between locations, board and disembark from trucks, and drive trucks between locations. The trucks can be loaded and unloaded with objects.\nHere are the actions that can be performed:\nLoad an object into a truck.\nUnload an object from a truck.\nA driver boards a truck.\nA driver disembarks from a truck.\nA driver drives a truck from one location to another location.\nA driver walks from one location to another location.\nThe following are the restrictions on the actions:\nAn object can be loaded into a truck only if the object is at the same location as the truck.\nOnce an object is loaded into a truck, the object is not at the location but is in the truck.\nAn object can be unloaded from a truck only if the object is in the truck.\nOnce an object is unloaded from a truck, the object is not in the truck but is at the location of the truck.\nA driver can board a truck only if the driver is at the same location as the truck.\nA driver can board a truck only if the truck is empty.\nOnce a driver boards a truck, we say the driver is driving the truck.\nOnce a driver boards a truck, the driver is no longer at the location.\nOnce a driver boards a truck, the truck is no longer empty.\nA driver can disembark from a truck only if the driver is driving the truck.\nOnce a driver disembarks from a truck, we say the driver is no longer driving the truck.\nOnce a driver disembarks from a truck, the driver is at the location of the truck.\nOnce a driver disembarks from a truck, the truck is empty.\nA driver can drive a truck from one location to another location only if the driver is driving the truck and the truck is at the from-location.\nA driver can drive a truck from one location to another location only if the from-location and to-location are linked.\nOnce a driver drives a truck from one location to another location, the truck is at the to-location and is no longer at the from-location.\nA driver can walk from one location to another location only if the driver is at the from-location and the from-location and to-location are linked.\nOnce a driver walks from one location to another location, the driver is at the to-location and is no longer at the from-location.As initial conditions I have that, place_1 and place_0 are linked, truck_1 is at place_3, place_0 and place_3 are linked, place_2 and place_3 are linked, package_4 is at place_2, path_2-3 and place_3 are connected, package_1 is at place_2, path_2-3 and place_2 are connected, path_0-1 and place_0 are connected, place_3 and path_1-3 are connected, place_2 and place_0 are linked, place_0 and place_1 are linked, place_3 and path_2-3 are connected, path_1-2 and place_2 are connected, truck_1 is empty, path_1-3 and place_3 are connected, place_3 and place_0 are linked, truck_2 is empty, place_2 and path_1-2 are connected, place_0 and path_0-1 are connected, path_1-2 and place_1 are connected, driver_4 is at place_2, place_2 and path_2-3 are connected, path_0-3 and place_0 are connected, driver_1 is at place_0, package_2 is at place_2, place_3 and path_0-3 are connected, path_1-3 and place_1 are connected, path_0-1 and place_1 are connected, driver_3 is at place_1, driver_2 is at place_2, place_0 and path_0-3 are connected, place_1 and path_0-1 are connected, place_1 and place_2 are linked, place_2 and place_1 are linked, place_3 and place_2 are linked, path_0-3 and place_3 are connected, truck_2 is at place_2, place_1 and path_1-3 are connected, place_1 and path_1-2 are connected, package_3 is at place_2, place_0 and place_2 are linked.My goal is to have that package_2 is at place_1, truck_2 is at place_0, package_1 is at place_0, truck_1 is at place_3, driver_2 is at place_0, package_4 is at place_3, driver_4 is at place_1, driver_1 is at place_2, package_3 is at place_1.My plan is as follows:\n<PLAN>\n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> WRONG \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> WRONG \n <PRECON> A driver_2 can board a truck_2 only if the truck_2 is empty. A driver_2 can board a truck_2 only if the driver_2 is at the same place_2 as the truck_2. </PRECON> driver_2 boards truck_2 at place_2 <EFFECT> Once a driver_2 boards a truck_2, the truck_2 is no longer empty. Once a driver_2 boards a truck_2, we say the driver_2 is driving the truck_2. Once a driver_2 boards a truck_2, the driver_2 is no longer at the place_2. </EFFECT> \n <PRECON> A driver_1 can walk from place_0 to path_0-3 only if the driver_1 is at the place_0 and the place_0 and path_0-3 are linked. </PRECON> driver_1 walks from place_0 to path_0-3 <EFFECT> Once a driver_1 walks from place_0 to path_0-3, the driver_1 is at the path_0-3 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_1 can walk from path_0-3 to place_3 only if the driver_1 is at the path_0-3 and the path_0-3 and place_3 are linked. </PRECON> driver_1 walks from path_0-3 to place_3 <EFFECT> Once a driver_1 walks from path_0-3 to place_3, the driver_1 is at the place_3 and is no longer at the path_0-3. </EFFECT> \n <PRECON> A driver_1 can walk from place_3 to path_2-3 only if the driver_1 is at the place_3 and the place_3 and path_2-3 are linked. </PRECON> driver_1 walks from place_3 to path_2-3 <EFFECT> Once a driver_1 walks from place_3 to path_2-3, the driver_1 is at the path_2-3 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> WRONG \n <PRECON> A driver_1 can walk from path_2-3 to place_2 only if the driver_1 is at the path_2-3 and the path_2-3 and place_2 are linked. </PRECON> driver_1 walks from path_2-3 to place_2 <EFFECT> Once a driver_1 walks from path_2-3 to place_2, the driver_1 is at the place_2 and is no longer at the path_2-3. </EFFECT> \n <PRECON> A driver_4 can walk from place_2 to path_1-2 only if the driver_4 is at the place_2 and the place_2 and path_1-2 are linked. </PRECON> driver_4 walks from place_2 to path_1-2 <EFFECT> Once a driver_4 walks from place_2 to path_1-2, the driver_4 is at the path_1-2 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_4 can walk from path_1-2 to place_1 only if the driver_4 is at the path_1-2 and the path_1-2 and place_1 are linked. </PRECON> driver_4 walks from path_1-2 to place_1 <EFFECT> Once a driver_4 walks from path_1-2 to place_1, the driver_4 is at the place_1 and is no longer at the path_1-2. </EFFECT> \n <PRECON> An package_4 can be loaded into a truck_2 only if the package_4 is at the same place_2 as the truck_2. </PRECON> load package_4 into truck_2 at place_2 <EFFECT> Once an package_4 is loaded into a truck_2, the package_4 is not at the place_2 but is in the truck_2. </EFFECT> \n <PRECON> An package_3 can be loaded into a truck_2 only if the package_3 is at the same place_2 as the truck_2. </PRECON> load package_3 into truck_2 at place_2 <EFFECT> Once an package_3 is loaded into a truck_2, the package_3 is not at the place_2 but is in the truck_2. </EFFECT> \n <PRECON> An package_2 can be loaded into a truck_2 only if the package_2 is at the same place_2 as the truck_2. </PRECON> load package_2 into truck_2 at place_2 <EFFECT> Once an package_2 is loaded into a truck_2, the package_2 is not at the place_2 but is in the truck_2. </EFFECT> \n <PRECON> An package_1 can be loaded into a truck_2 only if the package_1 is at the same place_2 as the truck_2. </PRECON> load package_1 into truck_2 at place_2 <EFFECT> Once an package_1 is loaded into a truck_2, the package_1 is not at the place_2 but is in the truck_2. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_2 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_2. A driver_2 can drive a truck_2 from place_2 to place_0 only if the place_2 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_2 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_2 to place_0, the truck_2 is at the place_0 and is no longer at the place_2. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> \n <PRECON> An package_1 can be unloaded from a truck_2 only if the package_1 is in the truck_2. </PRECON> unload package_1 from truck_2 at place_0 <EFFECT> Once an package_1 is unloaded from a truck_2, the package_1 is not in the truck_2 but is at the place_0 of the truck_2. </EFFECT> \n <PRECON> A driver_2 can board a truck_2 only if the truck_2 is empty. A driver_2 can board a truck_2 only if the driver_2 is at the same place_0 as the truck_2. </PRECON> driver_2 boards truck_2 at place_0 <EFFECT> Once a driver_2 boards a truck_2, the truck_2 is no longer empty. Once a driver_2 boards a truck_2, we say the driver_2 is driving the truck_2. Once a driver_2 boards a truck_2, the driver_2 is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_0 to place_1 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_0. A driver_2 can drive a truck_2 from place_0 to place_1 only if the place_0 and place_1 are linked. </PRECON> driver_2 drives truck_2 from place_0 to place_1 <EFFECT> Once a driver_2 drives a truck_2 from place_0 to place_1, the truck_2 is at the place_1 and is no longer at the place_0. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_1 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_1. A driver_2 can drive a truck_2 from place_1 to place_0 only if the place_1 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_1 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_1 to place_0, the truck_2 is at the place_0 and is no longer at the place_1. </EFFECT> WRONG \n <PRECON> An package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at place_1 <EFFECT> Once an package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 but is at the place_1 of the truck_2. </EFFECT> \n <PRECON> An package_2 can be unloaded from a truck_2 only if the package_2 is in the truck_2. </PRECON> unload package_2 from truck_2 at place_1 <EFFECT> Once an package_2 is unloaded from a truck_2, the package_2 is not in the truck_2 but is at the place_1 of the truck_2. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_1 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_1. A driver_2 can drive a truck_2 from place_1 to place_0 only if the place_1 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_1 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_1 to place_0, the truck_2 is at the place_0 and is no longer at the place_1. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_0 to place_3 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_0. A driver_2 can drive a truck_2 from place_0 to place_3 only if the place_0 and place_3 are linked. </PRECON> driver_2 drives truck_2 from place_0 to place_3 <EFFECT> Once a driver_2 drives a truck_2 from place_0 to place_3, the truck_2 is at the place_3 and is no longer at the place_0. </EFFECT> \n <PRECON> An package_4 can be unloaded from a truck_2 only if the package_4 is in the truck_2. </PRECON> unload package_4 from truck_2 at place_3 <EFFECT> Once an package_4 is unloaded from a truck_2, the package_4 is not in the truck_2 but is at the place_3 of the truck_2. </EFFECT> \n <PRECON> A driver_2 can drive a truck_2 from place_3 to place_0 only if the driver_2 is driving the truck_2 and the truck_2 is at the place_3. A driver_2 can drive a truck_2 from place_3 to place_0 only if the place_3 and place_0 are linked. </PRECON> driver_2 drives truck_2 from place_3 to place_0 <EFFECT> Once a driver_2 drives a truck_2 from place_3 to place_0, the truck_2 is at the place_0 and is no longer at the place_3. </EFFECT> \n <PRECON> A driver_2 can disembark from a truck_2 only if the driver_2 is driving the truck_2. </PRECON> driver_2 disembarks from truck_2 at place_0 <EFFECT> Once a driver_2 disembarks from a truck_2, we say the driver_2 is no longer driving the truck_2. Once a driver_2 disembarks from a truck_2, the driver_2 is at the place_0 of the truck_2. Once a driver_2 disembarks from a truck_2, the truck_2 is empty. </EFFECT> \n</PLAN>"}
{"domain": "grippers", "instance_id": "40", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to move objects between rooms using a robot with grippers. The robot can move between rooms and pick up or drop objects using its grippers.\nHere are the actions that can be performed:\nMove the robot from one room to another room.\nA robot pick up an object from a room.\nA robot drop an object in a room.\nThe following are the restrictions on the actions:\nA robot can move from one room to another room only if the robot is in the from-room.\nOnce the robot has moved from one room to another room, the robot is no longer in the from-room and is in the to-room.\nA robot can pick up an object from a room only if the robot is in the room and the object is also in the same room.\nA robot can pick up an object from a room only if the robot's gripper is free.\nOnce the robot has picked up an object from a room, the object is no longer in the room and is carried by the robot.\nOnce the robot has picked up an object from a room, the robot's gripper is no longer free.\nA robot can drop an object in a room only if the robot is in the room and the robot is carrying the object.\nOnce the robot has dropped an object in a room, the object is in the room and is no longer carried by the robot.\nOnce the robot has dropped an object in a room, the robot's gripper is free.", "input": "As initial conditions I have that, robot_1 is at room_2, robot_1's right_gripper_1 is free, robot_2 is at room_4, robot_2's left_gripper_2 is free, robot_2's right_gripper_2 is free, robot_1's left_gripper_1 is free, ball_1 is at room_4, ball_3 is at room_2, ball_5 is at room_4, ball_4 is at room_1, ball_2 is at room_2.\nMy goal is to have that ball_3 is at room_4, ball_1 is at room_3, ball_4 is at room_4, ball_2 is at room_1, ball_5 is at room_1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A robot_2 can pick up an ball_1 from a room_4 only if the robot_2 is in the room_4 and the ball_1 is also in the same room_4. A robot_2 can pick up an ball_1 from a room_4 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_1 at room_4 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_1 from a room_4, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_1 from a room_4, the ball_1 is no longer in the room_4 and is carried by the robot_2. </EFFECT> WRONG \n <PRECON> A robot_2 can move from room_4 to room_3 only if the robot_2 is in the room_4. </PRECON> move robot_2 from room_4 to room_3 <EFFECT> Once the robot_2 has moved from room_4 to room_3, the robot_2 is no longer in the room_4 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_2 from a room_2 only if the robot_1 is in the room_2 and the ball_2 is also in the same room_2. A robot_1 can pick up an ball_2 from a room_2 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_2 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_2 from a room_2, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_2 from a room_2, the ball_2 is no longer in the room_2 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_2 in a room_1 only if the robot_1 is in the room_1 and the robot_1 is carrying the ball_2. </PRECON> robot_1 drops ball_2 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_2 in a room_1, the ball_2 is in the room_1 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_2 in a room_1, the robot_1's left_gripper_1 is free. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_2 to room_1 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_1 <EFFECT> Once the robot_1 has moved from room_2 to room_1, the robot_1 is no longer in the room_2 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_5 in a room_1 only if the robot_1 is in the room_1 and the robot_1 is carrying the ball_5. </PRECON> robot_1 drops ball_5 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_5 in a room_1, the ball_5 is in the room_1 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_5 in a room_1, the robot_1's left_gripper_1 is free. </EFFECT> WRONG \n <PRECON> A robot_1 can pick up an ball_4 from a room_1 only if the robot_1 is in the room_1 and the ball_4 is also in the same room_1. A robot_1 can pick up an ball_4 from a room_1 only if the robot_1's right_gripper_1 is free. </PRECON> robot_1 picks ball_4 at room_1 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_4 from a room_1, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_4 from a room_1, the ball_4 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> WRONG \n <PRECON> A robot_1 can drop an ball_2 in a room_1 only if the robot_1 is in the room_1 and the robot_1 is carrying the ball_2. </PRECON> robot_1 drops ball_2 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_2 in a room_1, the ball_2 is in the room_1 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_2 in a room_1, the robot_1's left_gripper_1 is free. </EFFECT> \n <PRECON> A robot_2 can move from room_3 to room_4 only if the robot_2 is in the room_3. </PRECON> move robot_2 from room_3 to room_4 <EFFECT> Once the robot_2 has moved from room_3 to room_4, the robot_2 is no longer in the room_3 and is in the room_4. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_1 to room_2 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_2 <EFFECT> Once the robot_1 has moved from room_1 to room_2, the robot_1 is no longer in the room_1 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> WRONG \n <PRECON> A robot_1 can pick up an ball_3 from a room_2 only if the robot_1 is in the room_2 and the ball_3 is also in the same room_2. A robot_1 can pick up an ball_3 from a room_2 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_3 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_3 from a room_2, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_3 from a room_2, the ball_3 is no longer in the room_2 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> \n <PRECON> A robot_1 can drop an ball_3 in a room_4 only if the robot_1 is in the room_4 and the robot_1 is carrying the ball_3. </PRECON> robot_1 drops ball_3 at room_4 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_3 in a room_4, the ball_3 is in the room_4 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_3 in a room_4, the robot_1's left_gripper_1 is free. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_5 from a room_4 only if the robot_1 is in the room_4 and the ball_5 is also in the same room_4. A robot_1 can pick up an ball_5 from a room_4 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_5 at room_4 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_5 from a room_4, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_5 from a room_4, the ball_5 is no longer in the room_4 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_4 in a room_4 only if the robot_1 is in the room_4 and the robot_1 is carrying the ball_4. </PRECON> robot_1 drops ball_4 at room_4 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_4 in a room_4, the ball_4 is in the room_4 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_4 in a room_4, the robot_1's right_gripper_1 is free. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_1 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_1 <EFFECT> Once the robot_1 has moved from room_4 to room_1, the robot_1 is no longer in the room_4 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_5 in a room_1 only if the robot_1 is in the room_1 and the robot_1 is carrying the ball_5. </PRECON> robot_1 drops ball_5 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_5 in a room_1, the ball_5 is in the room_1 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_5 in a room_1, the robot_1's left_gripper_1 is free. </EFFECT> \n <PRECON> A robot_2 can move from room_3 to room_4 only if the robot_2 is in the room_3. </PRECON> move robot_2 from room_3 to room_4 <EFFECT> Once the robot_2 has moved from room_3 to room_4, the robot_2 is no longer in the room_3 and is in the room_4. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_1 from a room_4 only if the robot_2 is in the room_4 and the ball_1 is also in the same room_4. A robot_2 can pick up an ball_1 from a room_4 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_1 at room_4 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_1 from a room_4, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_1 from a room_4, the ball_1 is no longer in the room_4 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_4 to room_3 only if the robot_2 is in the room_4. </PRECON> move robot_2 from room_4 to room_3 <EFFECT> Once the robot_2 has moved from room_4 to room_3, the robot_2 is no longer in the room_4 and is in the room_3. </EFFECT> \n <PRECON> A robot_2 can drop an ball_1 in a room_3 only if the robot_2 is in the room_3 and the robot_2 is carrying the ball_1. </PRECON> robot_2 drops ball_1 at room_3 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_1 in a room_3, the ball_1 is in the room_3 and is no longer carried by the robot_2. Once the robot_2 has dropped an ball_1 in a room_3, the robot_2's left_gripper_2 is free. </EFFECT> \n</PLAN>", "plan_length": 17, "raw_plan": ["(move robot2 room4 room3)", "(pick robot1 ball2 room2 lgripper1)", "(move robot1 room2 room1)", "(pick robot1 ball4 room1 rgripper1)", "(drop robot1 ball2 room1 lgripper1)", "(move robot1 room1 room2)", "(pick robot1 ball3 room2 lgripper1)", "(move robot1 room2 room4)", "(drop robot1 ball3 room4 lgripper1)", "(pick robot1 ball5 room4 lgripper1)", "(drop robot1 ball4 room4 rgripper1)", "(move robot1 room4 room1)", "(drop robot1 ball5 room1 lgripper1)", "(move robot2 room3 room4)", "(pick robot2 ball1 room4 lgripper2)", "(move robot2 room4 room3)", "(drop robot2 ball1 room3 lgripper2)"], "full_text_prompt": "I have to plan how to move objects between rooms using a robot with grippers. The robot can move between rooms and pick up or drop objects using its grippers.\nHere are the actions that can be performed:\nMove the robot from one room to another room.\nA robot pick up an object from a room.\nA robot drop an object in a room.\nThe following are the restrictions on the actions:\nA robot can move from one room to another room only if the robot is in the from-room.\nOnce the robot has moved from one room to another room, the robot is no longer in the from-room and is in the to-room.\nA robot can pick up an object from a room only if the robot is in the room and the object is also in the same room.\nA robot can pick up an object from a room only if the robot's gripper is free.\nOnce the robot has picked up an object from a room, the object is no longer in the room and is carried by the robot.\nOnce the robot has picked up an object from a room, the robot's gripper is no longer free.\nA robot can drop an object in a room only if the robot is in the room and the robot is carrying the object.\nOnce the robot has dropped an object in a room, the object is in the room and is no longer carried by the robot.\nOnce the robot has dropped an object in a room, the robot's gripper is free.As initial conditions I have that, robot_1 is at room_2, robot_1's right_gripper_1 is free, robot_2 is at room_4, robot_2's left_gripper_2 is free, robot_2's right_gripper_2 is free, robot_1's left_gripper_1 is free, ball_1 is at room_4, ball_3 is at room_2, ball_5 is at room_4, ball_4 is at room_1, ball_2 is at room_2.My goal is to have that ball_3 is at room_4, ball_1 is at room_3, ball_4 is at room_4, ball_2 is at room_1, ball_5 is at room_1.My plan is as follows:\n<PLAN>\n <PRECON> A robot_2 can pick up an ball_1 from a room_4 only if the robot_2 is in the room_4 and the ball_1 is also in the same room_4. A robot_2 can pick up an ball_1 from a room_4 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_1 at room_4 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_1 from a room_4, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_1 from a room_4, the ball_1 is no longer in the room_4 and is carried by the robot_2. </EFFECT> WRONG \n <PRECON> A robot_2 can move from room_4 to room_3 only if the robot_2 is in the room_4. </PRECON> move robot_2 from room_4 to room_3 <EFFECT> Once the robot_2 has moved from room_4 to room_3, the robot_2 is no longer in the room_4 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_2 from a room_2 only if the robot_1 is in the room_2 and the ball_2 is also in the same room_2. A robot_1 can pick up an ball_2 from a room_2 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_2 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_2 from a room_2, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_2 from a room_2, the ball_2 is no longer in the room_2 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_2 in a room_1 only if the robot_1 is in the room_1 and the robot_1 is carrying the ball_2. </PRECON> robot_1 drops ball_2 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_2 in a room_1, the ball_2 is in the room_1 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_2 in a room_1, the robot_1's left_gripper_1 is free. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_2 to room_1 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_1 <EFFECT> Once the robot_1 has moved from room_2 to room_1, the robot_1 is no longer in the room_2 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_5 in a room_1 only if the robot_1 is in the room_1 and the robot_1 is carrying the ball_5. </PRECON> robot_1 drops ball_5 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_5 in a room_1, the ball_5 is in the room_1 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_5 in a room_1, the robot_1's left_gripper_1 is free. </EFFECT> WRONG \n <PRECON> A robot_1 can pick up an ball_4 from a room_1 only if the robot_1 is in the room_1 and the ball_4 is also in the same room_1. A robot_1 can pick up an ball_4 from a room_1 only if the robot_1's right_gripper_1 is free. </PRECON> robot_1 picks ball_4 at room_1 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_4 from a room_1, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_4 from a room_1, the ball_4 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> WRONG \n <PRECON> A robot_1 can drop an ball_2 in a room_1 only if the robot_1 is in the room_1 and the robot_1 is carrying the ball_2. </PRECON> robot_1 drops ball_2 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_2 in a room_1, the ball_2 is in the room_1 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_2 in a room_1, the robot_1's left_gripper_1 is free. </EFFECT> \n <PRECON> A robot_2 can move from room_3 to room_4 only if the robot_2 is in the room_3. </PRECON> move robot_2 from room_3 to room_4 <EFFECT> Once the robot_2 has moved from room_3 to room_4, the robot_2 is no longer in the room_3 and is in the room_4. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_1 to room_2 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_2 <EFFECT> Once the robot_1 has moved from room_1 to room_2, the robot_1 is no longer in the room_1 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> WRONG \n <PRECON> A robot_1 can pick up an ball_3 from a room_2 only if the robot_1 is in the room_2 and the ball_3 is also in the same room_2. A robot_1 can pick up an ball_3 from a room_2 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_3 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_3 from a room_2, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_3 from a room_2, the ball_3 is no longer in the room_2 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> \n <PRECON> A robot_1 can drop an ball_3 in a room_4 only if the robot_1 is in the room_4 and the robot_1 is carrying the ball_3. </PRECON> robot_1 drops ball_3 at room_4 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_3 in a room_4, the ball_3 is in the room_4 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_3 in a room_4, the robot_1's left_gripper_1 is free. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_5 from a room_4 only if the robot_1 is in the room_4 and the ball_5 is also in the same room_4. A robot_1 can pick up an ball_5 from a room_4 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_5 at room_4 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_5 from a room_4, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_5 from a room_4, the ball_5 is no longer in the room_4 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_4 in a room_4 only if the robot_1 is in the room_4 and the robot_1 is carrying the ball_4. </PRECON> robot_1 drops ball_4 at room_4 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_4 in a room_4, the ball_4 is in the room_4 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_4 in a room_4, the robot_1's right_gripper_1 is free. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_1 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_1 <EFFECT> Once the robot_1 has moved from room_4 to room_1, the robot_1 is no longer in the room_4 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_5 in a room_1 only if the robot_1 is in the room_1 and the robot_1 is carrying the ball_5. </PRECON> robot_1 drops ball_5 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_5 in a room_1, the ball_5 is in the room_1 and is no longer carried by the robot_1. Once the robot_1 has dropped an ball_5 in a room_1, the robot_1's left_gripper_1 is free. </EFFECT> \n <PRECON> A robot_2 can move from room_3 to room_4 only if the robot_2 is in the room_3. </PRECON> move robot_2 from room_3 to room_4 <EFFECT> Once the robot_2 has moved from room_3 to room_4, the robot_2 is no longer in the room_3 and is in the room_4. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_1 from a room_4 only if the robot_2 is in the room_4 and the ball_1 is also in the same room_4. A robot_2 can pick up an ball_1 from a room_4 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_1 at room_4 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_1 from a room_4, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_1 from a room_4, the ball_1 is no longer in the room_4 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_4 to room_3 only if the robot_2 is in the room_4. </PRECON> move robot_2 from room_4 to room_3 <EFFECT> Once the robot_2 has moved from room_4 to room_3, the robot_2 is no longer in the room_4 and is in the room_3. </EFFECT> \n <PRECON> A robot_2 can drop an ball_1 in a room_3 only if the robot_2 is in the room_3 and the robot_2 is carrying the ball_1. </PRECON> robot_2 drops ball_1 at room_3 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_1 in a room_3, the ball_1 is in the room_3 and is no longer carried by the robot_2. Once the robot_2 has dropped an ball_1 in a room_3, the robot_2's left_gripper_2 is free. </EFFECT> \n</PLAN>"}
{"domain": "grippers", "instance_id": "0", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to move objects between rooms using a robot with grippers. The robot can move between rooms and pick up or drop objects using its grippers.\nHere are the actions that can be performed:\nMove the robot from one room to another room.\nA robot pick up an object from a room.\nA robot drop an object in a room.\nThe following are the restrictions on the actions:\nA robot can move from one room to another room only if the robot is in the from-room.\nOnce the robot has moved from one room to another room, the robot is no longer in the from-room and is in the to-room.\nA robot can pick up an object from a room only if the robot is in the room and the object is also in the same room.\nA robot can pick up an object from a room only if the robot's gripper is free.\nOnce the robot has picked up an object from a room, the object is no longer in the room and is carried by the robot.\nOnce the robot has picked up an object from a room, the robot's gripper is no longer free.\nA robot can drop an object in a room only if the robot is in the room and the robot is carrying the object.\nOnce the robot has dropped an object in a room, the object is in the room and is no longer carried by the robot.\nOnce the robot has dropped an object in a room, the robot's gripper is free.", "input": "As initial conditions I have that, ball_5 is at room_5, robot_1's right_gripper_1 is free, robot_3's left_gripper_3 is free, robot_3's right_gripper_3 is free, robot_1 is at room_4, robot_2 is at room_6, robot_2's right_gripper_2 is free, ball_1 is at room_1, robot_1's left_gripper_1 is free, ball_3 is at room_2, ball_4 is at room_3, ball_6 is at room_2, robot_2's left_gripper_2 is free, robot_3 is at room_5, ball_2 is at room_5.\nMy goal is to have that ball_3 is at room_1, ball_6 is at room_5, ball_2 is at room_6, ball_5 is at room_3, ball_1 is at room_5, ball_4 is at room_3.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A robot_3 can move from room_5 to room_3 only if the robot_3 is in the room_5. </PRECON> move robot_3 from room_5 to room_3 <EFFECT> Once the robot_3 has moved from room_5 to room_3, the robot_3 is no longer in the room_5 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_1 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_1 <EFFECT> Once the robot_1 has moved from room_4 to room_1, the robot_1 is no longer in the room_4 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_1 from a room_1 only if the robot_1 is in the room_1 and the ball_1 is also in the same room_1. A robot_1 can pick up an ball_1 from a room_1 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_1 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_1 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_1 from a room_1, the ball_1 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_1 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_1 <EFFECT> Once the robot_1 has moved from room_2 to room_1, the robot_1 is no longer in the room_2 and is in the room_1. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_1 to room_5 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_5 <EFFECT> Once the robot_1 has moved from room_1 to room_5, the robot_1 is no longer in the room_1 and is in the room_5. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_5 from a room_5 only if the robot_1 is in the room_5 and the ball_5 is also in the same room_5. A robot_1 can pick up an ball_5 from a room_5 only if the robot_1's right_gripper_1 is free. </PRECON> robot_1 picks ball_5 at room_5 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_5 from a room_5, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_5 from a room_5, the ball_5 is no longer in the room_5 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_1 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_1. </PRECON> robot_1 drops ball_1 at room_5 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_1 in a room_5, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_1 in a room_5, the ball_1 is in the room_5 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_5 to room_1 only if the robot_1 is in the room_5. </PRECON> move robot_1 from room_5 to room_1 <EFFECT> Once the robot_1 has moved from room_5 to room_1, the robot_1 is no longer in the room_5 and is in the room_1. </EFFECT> \n <PRECON> A robot_2 can move from room_6 to room_5 only if the robot_2 is in the room_6. </PRECON> move robot_2 from room_6 to room_5 <EFFECT> Once the robot_2 has moved from room_6 to room_5, the robot_2 is no longer in the room_6 and is in the room_5. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_2 from a room_5 only if the robot_2 is in the room_5 and the ball_2 is also in the same room_5. A robot_2 can pick up an ball_2 from a room_5 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_2 at room_5 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_2 from a room_5, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_2 from a room_5, the ball_2 is no longer in the room_5 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_5 to room_6 only if the robot_2 is in the room_5. </PRECON> move robot_2 from room_5 to room_6 <EFFECT> Once the robot_2 has moved from room_5 to room_6, the robot_2 is no longer in the room_5 and is in the room_6. </EFFECT> \n <PRECON> A robot_2 can drop an ball_2 in a room_6 only if the robot_2 is in the room_6 and the robot_2 is carrying the ball_2. </PRECON> robot_2 drops ball_2 at room_6 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_2 in a room_6, the robot_2's left_gripper_2 is free. Once the robot_2 has dropped an ball_2 in a room_6, the ball_2 is in the room_6 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_3 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_3 <EFFECT> Once the robot_1 has moved from room_1 to room_3, the robot_1 is no longer in the room_1 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can drop an ball_5 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_5. </PRECON> robot_1 drops ball_5 at room_3 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_5 in a room_3, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_5 in a room_3, the ball_5 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_2 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_2 <EFFECT> Once the robot_1 has moved from room_1 to room_2, the robot_1 is no longer in the room_1 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_3 from a room_2 only if the robot_1 is in the room_2 and the ball_3 is also in the same room_2. A robot_1 can pick up an ball_3 from a room_2 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_3 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_3 from a room_2, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_3 from a room_2, the ball_3 is no longer in the room_2 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_5 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_5 <EFFECT> Once the robot_1 has moved from room_1 to room_5, the robot_1 is no longer in the room_1 and is in the room_5. </EFFECT> WRONG \n <PRECON> A robot_1 can pick up an ball_6 from a room_2 only if the robot_1 is in the room_2 and the ball_6 is also in the same room_2. A robot_1 can pick up an ball_6 from a room_2 only if the robot_1's right_gripper_1 is free. </PRECON> robot_1 picks ball_6 at room_2 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_6 from a room_2, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_6 from a room_2, the ball_6 is no longer in the room_2 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_1 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_1 <EFFECT> Once the robot_1 has moved from room_2 to room_1, the robot_1 is no longer in the room_2 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_6 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_5 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_5, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_5, the ball_6 is in the room_5 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can drop an ball_6 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_5 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_5, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_5, the ball_6 is in the room_5 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can drop an ball_3 in a room_1 only if the robot_1 is in the room_1 and the robot_1 is carrying the ball_3. </PRECON> robot_1 drops ball_3 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_3 in a room_1, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_3 in a room_1, the ball_3 is in the room_1 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_5 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_5 <EFFECT> Once the robot_1 has moved from room_1 to room_5, the robot_1 is no longer in the room_1 and is in the room_5. </EFFECT> \n <PRECON> A robot_1 can drop an ball_6 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_5 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_5, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_5, the ball_6 is in the room_5 and is no longer carried by the robot_1. </EFFECT> \n</PLAN>", "plan_length": 21, "raw_plan": ["(move robot3 room5 room3)", "(move robot1 room4 room1)", "(pick robot1 ball1 room1 lgripper1)", "(move robot1 room1 room5)", "(pick robot1 ball5 room5 rgripper1)", "(drop robot1 ball1 room5 lgripper1)", "(move robot1 room5 room1)", "(move robot2 room6 room5)", "(pick robot2 ball2 room5 lgripper2)", "(move robot2 room5 room6)", "(drop robot2 ball2 room6 lgripper2)", "(move robot1 room1 room3)", "(drop robot1 ball5 room3 rgripper1)", "(move robot1 room3 room1)", "(move robot1 room1 room2)", "(pick robot1 ball3 room2 lgripper1)", "(pick robot1 ball6 room2 rgripper1)", "(move robot1 room2 room1)", "(drop robot1 ball3 room1 lgripper1)", "(move robot1 room1 room5)", "(drop robot1 ball6 room5 rgripper1)"], "full_text_prompt": "I have to plan how to move objects between rooms using a robot with grippers. The robot can move between rooms and pick up or drop objects using its grippers.\nHere are the actions that can be performed:\nMove the robot from one room to another room.\nA robot pick up an object from a room.\nA robot drop an object in a room.\nThe following are the restrictions on the actions:\nA robot can move from one room to another room only if the robot is in the from-room.\nOnce the robot has moved from one room to another room, the robot is no longer in the from-room and is in the to-room.\nA robot can pick up an object from a room only if the robot is in the room and the object is also in the same room.\nA robot can pick up an object from a room only if the robot's gripper is free.\nOnce the robot has picked up an object from a room, the object is no longer in the room and is carried by the robot.\nOnce the robot has picked up an object from a room, the robot's gripper is no longer free.\nA robot can drop an object in a room only if the robot is in the room and the robot is carrying the object.\nOnce the robot has dropped an object in a room, the object is in the room and is no longer carried by the robot.\nOnce the robot has dropped an object in a room, the robot's gripper is free.As initial conditions I have that, ball_5 is at room_5, robot_1's right_gripper_1 is free, robot_3's left_gripper_3 is free, robot_3's right_gripper_3 is free, robot_1 is at room_4, robot_2 is at room_6, robot_2's right_gripper_2 is free, ball_1 is at room_1, robot_1's left_gripper_1 is free, ball_3 is at room_2, ball_4 is at room_3, ball_6 is at room_2, robot_2's left_gripper_2 is free, robot_3 is at room_5, ball_2 is at room_5.My goal is to have that ball_3 is at room_1, ball_6 is at room_5, ball_2 is at room_6, ball_5 is at room_3, ball_1 is at room_5, ball_4 is at room_3.My plan is as follows:\n<PLAN>\n <PRECON> A robot_3 can move from room_5 to room_3 only if the robot_3 is in the room_5. </PRECON> move robot_3 from room_5 to room_3 <EFFECT> Once the robot_3 has moved from room_5 to room_3, the robot_3 is no longer in the room_5 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_1 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_1 <EFFECT> Once the robot_1 has moved from room_4 to room_1, the robot_1 is no longer in the room_4 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_1 from a room_1 only if the robot_1 is in the room_1 and the ball_1 is also in the same room_1. A robot_1 can pick up an ball_1 from a room_1 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_1 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_1 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_1 from a room_1, the ball_1 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_1 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_1 <EFFECT> Once the robot_1 has moved from room_2 to room_1, the robot_1 is no longer in the room_2 and is in the room_1. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_1 to room_5 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_5 <EFFECT> Once the robot_1 has moved from room_1 to room_5, the robot_1 is no longer in the room_1 and is in the room_5. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_5 from a room_5 only if the robot_1 is in the room_5 and the ball_5 is also in the same room_5. A robot_1 can pick up an ball_5 from a room_5 only if the robot_1's right_gripper_1 is free. </PRECON> robot_1 picks ball_5 at room_5 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_5 from a room_5, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_5 from a room_5, the ball_5 is no longer in the room_5 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_1 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_1. </PRECON> robot_1 drops ball_1 at room_5 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_1 in a room_5, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_1 in a room_5, the ball_1 is in the room_5 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_5 to room_1 only if the robot_1 is in the room_5. </PRECON> move robot_1 from room_5 to room_1 <EFFECT> Once the robot_1 has moved from room_5 to room_1, the robot_1 is no longer in the room_5 and is in the room_1. </EFFECT> \n <PRECON> A robot_2 can move from room_6 to room_5 only if the robot_2 is in the room_6. </PRECON> move robot_2 from room_6 to room_5 <EFFECT> Once the robot_2 has moved from room_6 to room_5, the robot_2 is no longer in the room_6 and is in the room_5. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_2 from a room_5 only if the robot_2 is in the room_5 and the ball_2 is also in the same room_5. A robot_2 can pick up an ball_2 from a room_5 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_2 at room_5 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_2 from a room_5, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_2 from a room_5, the ball_2 is no longer in the room_5 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_5 to room_6 only if the robot_2 is in the room_5. </PRECON> move robot_2 from room_5 to room_6 <EFFECT> Once the robot_2 has moved from room_5 to room_6, the robot_2 is no longer in the room_5 and is in the room_6. </EFFECT> \n <PRECON> A robot_2 can drop an ball_2 in a room_6 only if the robot_2 is in the room_6 and the robot_2 is carrying the ball_2. </PRECON> robot_2 drops ball_2 at room_6 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_2 in a room_6, the robot_2's left_gripper_2 is free. Once the robot_2 has dropped an ball_2 in a room_6, the ball_2 is in the room_6 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_3 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_3 <EFFECT> Once the robot_1 has moved from room_1 to room_3, the robot_1 is no longer in the room_1 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can drop an ball_5 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_5. </PRECON> robot_1 drops ball_5 at room_3 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_5 in a room_3, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_5 in a room_3, the ball_5 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_2 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_2 <EFFECT> Once the robot_1 has moved from room_1 to room_2, the robot_1 is no longer in the room_1 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_3 from a room_2 only if the robot_1 is in the room_2 and the ball_3 is also in the same room_2. A robot_1 can pick up an ball_3 from a room_2 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_3 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_3 from a room_2, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_3 from a room_2, the ball_3 is no longer in the room_2 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_5 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_5 <EFFECT> Once the robot_1 has moved from room_1 to room_5, the robot_1 is no longer in the room_1 and is in the room_5. </EFFECT> WRONG \n <PRECON> A robot_1 can pick up an ball_6 from a room_2 only if the robot_1 is in the room_2 and the ball_6 is also in the same room_2. A robot_1 can pick up an ball_6 from a room_2 only if the robot_1's right_gripper_1 is free. </PRECON> robot_1 picks ball_6 at room_2 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_6 from a room_2, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_6 from a room_2, the ball_6 is no longer in the room_2 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_1 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_1 <EFFECT> Once the robot_1 has moved from room_2 to room_1, the robot_1 is no longer in the room_2 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_6 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_5 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_5, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_5, the ball_6 is in the room_5 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can drop an ball_6 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_5 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_5, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_5, the ball_6 is in the room_5 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can drop an ball_3 in a room_1 only if the robot_1 is in the room_1 and the robot_1 is carrying the ball_3. </PRECON> robot_1 drops ball_3 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_3 in a room_1, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_3 in a room_1, the ball_3 is in the room_1 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_5 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_5 <EFFECT> Once the robot_1 has moved from room_1 to room_5, the robot_1 is no longer in the room_1 and is in the room_5. </EFFECT> \n <PRECON> A robot_1 can drop an ball_6 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_5 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_5, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_5, the ball_6 is in the room_5 and is no longer carried by the robot_1. </EFFECT> \n</PLAN>"}
{"domain": "grippers", "instance_id": "160", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to move objects between rooms using a robot with grippers. The robot can move between rooms and pick up or drop objects using its grippers.\nHere are the actions that can be performed:\nMove the robot from one room to another room.\nA robot pick up an object from a room.\nA robot drop an object in a room.\nThe following are the restrictions on the actions:\nA robot can move from one room to another room only if the robot is in the from-room.\nOnce the robot has moved from one room to another room, the robot is no longer in the from-room and is in the to-room.\nA robot can pick up an object from a room only if the robot is in the room and the object is also in the same room.\nA robot can pick up an object from a room only if the robot's gripper is free.\nOnce the robot has picked up an object from a room, the object is no longer in the room and is carried by the robot.\nOnce the robot has picked up an object from a room, the robot's gripper is no longer free.\nA robot can drop an object in a room only if the robot is in the room and the robot is carrying the object.\nOnce the robot has dropped an object in a room, the object is in the room and is no longer carried by the robot.\nOnce the robot has dropped an object in a room, the robot's gripper is free.", "input": "As initial conditions I have that, ball_4 is at room_2, ball_5 is at room_3, robot_4's right_gripper_4 is free, robot_1 is at room_3, robot_4's left_gripper_4 is free, robot_3 is at room_1, ball_7 is at room_2, ball_8 is at room_1, robot_2's right_gripper_2 is free, robot_3's right_gripper_3 is free, ball_1 is at room_1, ball_6 is at room_1, robot_4 is at room_2, robot_3's left_gripper_3 is free, robot_1's right_gripper_1 is free, robot_2 is at room_3, robot_2's left_gripper_2 is free, ball_2 is at room_1, ball_3 is at room_2, robot_1's left_gripper_1 is free.\nMy goal is to have that ball_4 is at room_3, ball_8 is at room_2, ball_2 is at room_3, ball_1 is at room_3, ball_7 is at room_1, ball_5 is at room_2, ball_6 is at room_3, ball_3 is at room_1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A robot_1 can drop an ball_4 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_4. </PRECON> robot_1 drops ball_4 at room_3 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_4 in a room_3, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_4 in a room_3, the ball_4 is in the room_3 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_4 can move from room_2 to room_3 only if the robot_4 is in the room_2. </PRECON> move robot_4 from room_2 to room_3 <EFFECT> Once the robot_4 has moved from room_2 to room_3, the robot_4 is no longer in the room_2 and is in the room_3. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_5 from a room_3 only if the robot_4's left_gripper_4 is free. A robot_4 can pick up an ball_5 from a room_3 only if the robot_4 is in the room_3 and the ball_5 is also in the same room_3. </PRECON> robot_4 picks ball_5 at room_3 with left_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_5 from a room_3, the robot_4's left_gripper_4 is no longer free. Once the robot_4 has picked up an ball_5 from a room_3, the ball_5 is no longer in the room_3 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_3 can move from room_1 to room_3 only if the robot_3 is in the room_1. </PRECON> move robot_3 from room_1 to room_3 <EFFECT> Once the robot_3 has moved from room_1 to room_3, the robot_3 is no longer in the room_1 and is in the room_3. </EFFECT> \n <PRECON> A robot_4 can move from room_3 to room_2 only if the robot_4 is in the room_3. </PRECON> move robot_4 from room_3 to room_2 <EFFECT> Once the robot_4 has moved from room_3 to room_2, the robot_4 is no longer in the room_3 and is in the room_2. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_3 from a room_2 only if the robot_4's right_gripper_4 is free. A robot_4 can pick up an ball_3 from a room_2 only if the robot_4 is in the room_2 and the ball_3 is also in the same room_2. </PRECON> robot_4 picks ball_3 at room_2 with right_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_3 from a room_2, the robot_4's right_gripper_4 is no longer free. Once the robot_4 has picked up an ball_3 from a room_2, the ball_3 is no longer in the room_2 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can drop an ball_5 in a room_2 only if the robot_4 is in the room_2 and the robot_4 is carrying the ball_5. </PRECON> robot_4 drops ball_5 at room_2 with left_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_5 in a room_2, the robot_4's left_gripper_4 is free. Once the robot_4 has dropped an ball_5 in a room_2, the ball_5 is in the room_2 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_7 from a room_2 only if the robot_4's left_gripper_4 is free. A robot_4 can pick up an ball_7 from a room_2 only if the robot_4 is in the room_2 and the ball_7 is also in the same room_2. </PRECON> robot_4 picks ball_7 at room_2 with left_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_7 from a room_2, the robot_4's left_gripper_4 is no longer free. Once the robot_4 has picked up an ball_7 from a room_2, the ball_7 is no longer in the room_2 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can move from room_2 to room_1 only if the robot_4 is in the room_2. </PRECON> move robot_4 from room_2 to room_1 <EFFECT> Once the robot_4 has moved from room_2 to room_1, the robot_4 is no longer in the room_2 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> WRONG \n <PRECON> A robot_4 can drop an ball_7 in a room_1 only if the robot_4 is in the room_1 and the robot_4 is carrying the ball_7. </PRECON> robot_4 drops ball_7 at room_1 with left_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_7 in a room_1, the robot_4's left_gripper_4 is free. Once the robot_4 has dropped an ball_7 in a room_1, the ball_7 is in the room_1 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_1 from a room_1 only if the robot_4's left_gripper_4 is free. A robot_4 can pick up an ball_1 from a room_1 only if the robot_4 is in the room_1 and the ball_1 is also in the same room_1. </PRECON> robot_4 picks ball_1 at room_1 with left_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_1 from a room_1, the robot_4's left_gripper_4 is no longer free. Once the robot_4 has picked up an ball_1 from a room_1, the ball_1 is no longer in the room_1 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> WRONG \n <PRECON> A robot_4 can drop an ball_3 in a room_1 only if the robot_4 is in the room_1 and the robot_4 is carrying the ball_3. </PRECON> robot_4 drops ball_3 at room_1 with right_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_3 in a room_1, the robot_4's right_gripper_4 is free. Once the robot_4 has dropped an ball_3 in a room_1, the ball_3 is in the room_1 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can move from room_1 to room_3 only if the robot_4 is in the room_1. </PRECON> move robot_4 from room_1 to room_3 <EFFECT> Once the robot_4 has moved from room_1 to room_3, the robot_4 is no longer in the room_1 and is in the room_3. </EFFECT> \n <PRECON> A robot_4 can drop an ball_1 in a room_3 only if the robot_4 is in the room_3 and the robot_4 is carrying the ball_1. </PRECON> robot_4 drops ball_1 at room_3 with left_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_1 in a room_3, the robot_4's left_gripper_4 is free. Once the robot_4 has dropped an ball_1 in a room_3, the ball_1 is in the room_3 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_2 from a room_1 only if the robot_1's left_gripper_1 is free. A robot_1 can pick up an ball_2 from a room_1 only if the robot_1 is in the room_1 and the ball_2 is also in the same room_1. </PRECON> robot_1 picks ball_2 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_2 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_2 from a room_1, the ball_2 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_3 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_3 <EFFECT> Once the robot_1 has moved from room_1 to room_3, the robot_1 is no longer in the room_1 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can drop an ball_2 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_2. </PRECON> robot_1 drops ball_2 at room_3 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_2 in a room_3, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_2 in a room_3, the ball_2 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_6 from a room_1 only if the robot_1's left_gripper_1 is free. A robot_1 can pick up an ball_6 from a room_1 only if the robot_1 is in the room_1 and the ball_6 is also in the same room_1. </PRECON> robot_1 picks ball_6 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_6 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_6 from a room_1, the ball_6 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_2 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_2 <EFFECT> Once the robot_1 has moved from room_1 to room_2, the robot_1 is no longer in the room_1 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can drop an ball_8 in a room_2 only if the robot_1 is in the room_2 and the robot_1 is carrying the ball_8. </PRECON> robot_1 drops ball_8 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_8 in a room_2, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_8 in a room_2, the ball_8 is in the room_2 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_2 to room_3 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_3 <EFFECT> Once the robot_1 has moved from room_2 to room_3, the robot_1 is no longer in the room_2 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can drop an ball_6 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_3 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_3, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_3, the ball_6 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_8 from a room_1 only if the robot_1's left_gripper_1 is free. A robot_1 can pick up an ball_8 from a room_1 only if the robot_1 is in the room_1 and the ball_8 is also in the same room_1. </PRECON> robot_1 picks ball_8 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_8 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_8 from a room_1, the ball_8 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_2 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_2 <EFFECT> Once the robot_1 has moved from room_1 to room_2, the robot_1 is no longer in the room_1 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_4 from a room_2 only if the robot_1's right_gripper_1 is free. A robot_1 can pick up an ball_4 from a room_2 only if the robot_1 is in the room_2 and the ball_4 is also in the same room_2. </PRECON> robot_1 picks ball_4 at room_2 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_4 from a room_2, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_4 from a room_2, the ball_4 is no longer in the room_2 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_3 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_3 <EFFECT> Once the robot_1 has moved from room_2 to room_3, the robot_1 is no longer in the room_2 and is in the room_3. </EFFECT> WRONG \n <PRECON> A robot_1 can drop an ball_8 in a room_2 only if the robot_1 is in the room_2 and the robot_1 is carrying the ball_8. </PRECON> robot_1 drops ball_8 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_8 in a room_2, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_8 in a room_2, the ball_8 is in the room_2 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_3 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_3 <EFFECT> Once the robot_1 has moved from room_2 to room_3, the robot_1 is no longer in the room_2 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can drop an ball_4 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_4. </PRECON> robot_1 drops ball_4 at room_3 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_4 in a room_3, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_4 in a room_3, the ball_4 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n</PLAN>", "plan_length": 29, "raw_plan": ["(move robot4 room2 room3)", "(pick robot4 ball5 room3 lgripper4)", "(move robot3 room1 room3)", "(move robot4 room3 room2)", "(pick robot4 ball3 room2 rgripper4)", "(drop robot4 ball5 room2 lgripper4)", "(pick robot4 ball7 room2 lgripper4)", "(move robot4 room2 room1)", "(drop robot4 ball7 room1 lgripper4)", "(pick robot4 ball1 room1 lgripper4)", "(drop robot4 ball3 room1 rgripper4)", "(move robot4 room1 room3)", "(drop robot4 ball1 room3 lgripper4)", "(move robot1 room3 room1)", "(pick robot1 ball2 room1 lgripper1)", "(move robot1 room1 room3)", "(drop robot1 ball2 room3 lgripper1)", "(move robot1 room3 room1)", "(pick robot1 ball6 room1 lgripper1)", "(move robot1 room1 room2)", "(move robot1 room2 room3)", "(drop robot1 ball6 room3 lgripper1)", "(move robot1 room3 room1)", "(pick robot1 ball8 room1 lgripper1)", "(move robot1 room1 room2)", "(pick robot1 ball4 room2 rgripper1)", "(drop robot1 ball8 room2 lgripper1)", "(move robot1 room2 room3)", "(drop robot1 ball4 room3 rgripper1)"], "full_text_prompt": "I have to plan how to move objects between rooms using a robot with grippers. The robot can move between rooms and pick up or drop objects using its grippers.\nHere are the actions that can be performed:\nMove the robot from one room to another room.\nA robot pick up an object from a room.\nA robot drop an object in a room.\nThe following are the restrictions on the actions:\nA robot can move from one room to another room only if the robot is in the from-room.\nOnce the robot has moved from one room to another room, the robot is no longer in the from-room and is in the to-room.\nA robot can pick up an object from a room only if the robot is in the room and the object is also in the same room.\nA robot can pick up an object from a room only if the robot's gripper is free.\nOnce the robot has picked up an object from a room, the object is no longer in the room and is carried by the robot.\nOnce the robot has picked up an object from a room, the robot's gripper is no longer free.\nA robot can drop an object in a room only if the robot is in the room and the robot is carrying the object.\nOnce the robot has dropped an object in a room, the object is in the room and is no longer carried by the robot.\nOnce the robot has dropped an object in a room, the robot's gripper is free.As initial conditions I have that, ball_4 is at room_2, ball_5 is at room_3, robot_4's right_gripper_4 is free, robot_1 is at room_3, robot_4's left_gripper_4 is free, robot_3 is at room_1, ball_7 is at room_2, ball_8 is at room_1, robot_2's right_gripper_2 is free, robot_3's right_gripper_3 is free, ball_1 is at room_1, ball_6 is at room_1, robot_4 is at room_2, robot_3's left_gripper_3 is free, robot_1's right_gripper_1 is free, robot_2 is at room_3, robot_2's left_gripper_2 is free, ball_2 is at room_1, ball_3 is at room_2, robot_1's left_gripper_1 is free.My goal is to have that ball_4 is at room_3, ball_8 is at room_2, ball_2 is at room_3, ball_1 is at room_3, ball_7 is at room_1, ball_5 is at room_2, ball_6 is at room_3, ball_3 is at room_1.My plan is as follows:\n<PLAN>\n <PRECON> A robot_1 can drop an ball_4 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_4. </PRECON> robot_1 drops ball_4 at room_3 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_4 in a room_3, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_4 in a room_3, the ball_4 is in the room_3 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_4 can move from room_2 to room_3 only if the robot_4 is in the room_2. </PRECON> move robot_4 from room_2 to room_3 <EFFECT> Once the robot_4 has moved from room_2 to room_3, the robot_4 is no longer in the room_2 and is in the room_3. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_5 from a room_3 only if the robot_4's left_gripper_4 is free. A robot_4 can pick up an ball_5 from a room_3 only if the robot_4 is in the room_3 and the ball_5 is also in the same room_3. </PRECON> robot_4 picks ball_5 at room_3 with left_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_5 from a room_3, the robot_4's left_gripper_4 is no longer free. Once the robot_4 has picked up an ball_5 from a room_3, the ball_5 is no longer in the room_3 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_3 can move from room_1 to room_3 only if the robot_3 is in the room_1. </PRECON> move robot_3 from room_1 to room_3 <EFFECT> Once the robot_3 has moved from room_1 to room_3, the robot_3 is no longer in the room_1 and is in the room_3. </EFFECT> \n <PRECON> A robot_4 can move from room_3 to room_2 only if the robot_4 is in the room_3. </PRECON> move robot_4 from room_3 to room_2 <EFFECT> Once the robot_4 has moved from room_3 to room_2, the robot_4 is no longer in the room_3 and is in the room_2. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_3 from a room_2 only if the robot_4's right_gripper_4 is free. A robot_4 can pick up an ball_3 from a room_2 only if the robot_4 is in the room_2 and the ball_3 is also in the same room_2. </PRECON> robot_4 picks ball_3 at room_2 with right_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_3 from a room_2, the robot_4's right_gripper_4 is no longer free. Once the robot_4 has picked up an ball_3 from a room_2, the ball_3 is no longer in the room_2 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can drop an ball_5 in a room_2 only if the robot_4 is in the room_2 and the robot_4 is carrying the ball_5. </PRECON> robot_4 drops ball_5 at room_2 with left_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_5 in a room_2, the robot_4's left_gripper_4 is free. Once the robot_4 has dropped an ball_5 in a room_2, the ball_5 is in the room_2 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_7 from a room_2 only if the robot_4's left_gripper_4 is free. A robot_4 can pick up an ball_7 from a room_2 only if the robot_4 is in the room_2 and the ball_7 is also in the same room_2. </PRECON> robot_4 picks ball_7 at room_2 with left_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_7 from a room_2, the robot_4's left_gripper_4 is no longer free. Once the robot_4 has picked up an ball_7 from a room_2, the ball_7 is no longer in the room_2 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can move from room_2 to room_1 only if the robot_4 is in the room_2. </PRECON> move robot_4 from room_2 to room_1 <EFFECT> Once the robot_4 has moved from room_2 to room_1, the robot_4 is no longer in the room_2 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> WRONG \n <PRECON> A robot_4 can drop an ball_7 in a room_1 only if the robot_4 is in the room_1 and the robot_4 is carrying the ball_7. </PRECON> robot_4 drops ball_7 at room_1 with left_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_7 in a room_1, the robot_4's left_gripper_4 is free. Once the robot_4 has dropped an ball_7 in a room_1, the ball_7 is in the room_1 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_1 from a room_1 only if the robot_4's left_gripper_4 is free. A robot_4 can pick up an ball_1 from a room_1 only if the robot_4 is in the room_1 and the ball_1 is also in the same room_1. </PRECON> robot_4 picks ball_1 at room_1 with left_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_1 from a room_1, the robot_4's left_gripper_4 is no longer free. Once the robot_4 has picked up an ball_1 from a room_1, the ball_1 is no longer in the room_1 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> WRONG \n <PRECON> A robot_4 can drop an ball_3 in a room_1 only if the robot_4 is in the room_1 and the robot_4 is carrying the ball_3. </PRECON> robot_4 drops ball_3 at room_1 with right_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_3 in a room_1, the robot_4's right_gripper_4 is free. Once the robot_4 has dropped an ball_3 in a room_1, the ball_3 is in the room_1 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can move from room_1 to room_3 only if the robot_4 is in the room_1. </PRECON> move robot_4 from room_1 to room_3 <EFFECT> Once the robot_4 has moved from room_1 to room_3, the robot_4 is no longer in the room_1 and is in the room_3. </EFFECT> \n <PRECON> A robot_4 can drop an ball_1 in a room_3 only if the robot_4 is in the room_3 and the robot_4 is carrying the ball_1. </PRECON> robot_4 drops ball_1 at room_3 with left_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_1 in a room_3, the robot_4's left_gripper_4 is free. Once the robot_4 has dropped an ball_1 in a room_3, the ball_1 is in the room_3 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_2 from a room_1 only if the robot_1's left_gripper_1 is free. A robot_1 can pick up an ball_2 from a room_1 only if the robot_1 is in the room_1 and the ball_2 is also in the same room_1. </PRECON> robot_1 picks ball_2 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_2 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_2 from a room_1, the ball_2 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_3 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_3 <EFFECT> Once the robot_1 has moved from room_1 to room_3, the robot_1 is no longer in the room_1 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can drop an ball_2 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_2. </PRECON> robot_1 drops ball_2 at room_3 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_2 in a room_3, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_2 in a room_3, the ball_2 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_6 from a room_1 only if the robot_1's left_gripper_1 is free. A robot_1 can pick up an ball_6 from a room_1 only if the robot_1 is in the room_1 and the ball_6 is also in the same room_1. </PRECON> robot_1 picks ball_6 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_6 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_6 from a room_1, the ball_6 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_2 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_2 <EFFECT> Once the robot_1 has moved from room_1 to room_2, the robot_1 is no longer in the room_1 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can drop an ball_8 in a room_2 only if the robot_1 is in the room_2 and the robot_1 is carrying the ball_8. </PRECON> robot_1 drops ball_8 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_8 in a room_2, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_8 in a room_2, the ball_8 is in the room_2 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_2 to room_3 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_3 <EFFECT> Once the robot_1 has moved from room_2 to room_3, the robot_1 is no longer in the room_2 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can drop an ball_6 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_3 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_3, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_3, the ball_6 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_8 from a room_1 only if the robot_1's left_gripper_1 is free. A robot_1 can pick up an ball_8 from a room_1 only if the robot_1 is in the room_1 and the ball_8 is also in the same room_1. </PRECON> robot_1 picks ball_8 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_8 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_8 from a room_1, the ball_8 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_2 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_2 <EFFECT> Once the robot_1 has moved from room_1 to room_2, the robot_1 is no longer in the room_1 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_4 from a room_2 only if the robot_1's right_gripper_1 is free. A robot_1 can pick up an ball_4 from a room_2 only if the robot_1 is in the room_2 and the ball_4 is also in the same room_2. </PRECON> robot_1 picks ball_4 at room_2 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_4 from a room_2, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_4 from a room_2, the ball_4 is no longer in the room_2 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_3 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_3 <EFFECT> Once the robot_1 has moved from room_2 to room_3, the robot_1 is no longer in the room_2 and is in the room_3. </EFFECT> WRONG \n <PRECON> A robot_1 can drop an ball_8 in a room_2 only if the robot_1 is in the room_2 and the robot_1 is carrying the ball_8. </PRECON> robot_1 drops ball_8 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_8 in a room_2, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_8 in a room_2, the ball_8 is in the room_2 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_3 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_3 <EFFECT> Once the robot_1 has moved from room_2 to room_3, the robot_1 is no longer in the room_2 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can drop an ball_4 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_4. </PRECON> robot_1 drops ball_4 at room_3 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_4 in a room_3, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_4 in a room_3, the ball_4 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n</PLAN>"}
{"domain": "grippers", "instance_id": "80", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to move objects between rooms using a robot with grippers. The robot can move between rooms and pick up or drop objects using its grippers.\nHere are the actions that can be performed:\nMove the robot from one room to another room.\nA robot pick up an object from a room.\nA robot drop an object in a room.\nThe following are the restrictions on the actions:\nA robot can move from one room to another room only if the robot is in the from-room.\nOnce the robot has moved from one room to another room, the robot is no longer in the from-room and is in the to-room.\nA robot can pick up an object from a room only if the robot is in the room and the object is also in the same room.\nA robot can pick up an object from a room only if the robot's gripper is free.\nOnce the robot has picked up an object from a room, the object is no longer in the room and is carried by the robot.\nOnce the robot has picked up an object from a room, the robot's gripper is no longer free.\nA robot can drop an object in a room only if the robot is in the room and the robot is carrying the object.\nOnce the robot has dropped an object in a room, the object is in the room and is no longer carried by the robot.\nOnce the robot has dropped an object in a room, the robot's gripper is free.", "input": "As initial conditions I have that, ball_6 is at room_2, ball_3 is at room_6, ball_5 is at room_2, robot_1 is at room_7, robot_1's right_gripper_1 is free, robot_2's left_gripper_2 is free, ball_4 is at room_6, ball_1 is at room_7, ball_8 is at room_3, ball_7 is at room_7, robot_2 is at room_1, robot_1's left_gripper_1 is free, ball_9 is at room_7, ball_2 is at room_4, robot_2's right_gripper_2 is free.\nMy goal is to have that ball_1 is at room_1, ball_4 is at room_5, ball_9 is at room_4, ball_2 is at room_2, ball_6 is at room_3, ball_3 is at room_1, ball_5 is at room_2, ball_7 is at room_5, ball_8 is at room_5.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A robot_2 can move from room_1 to room_2 only if the robot_2 is in the room_1. </PRECON> move robot_2 from room_1 to room_2 <EFFECT> Once the robot_2 has moved from room_1 to room_2, the robot_2 is no longer in the room_1 and is in the room_2. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_6 from a room_2 only if the robot_2 is in the room_2 and the ball_6 is also in the same room_2. A robot_2 can pick up an ball_6 from a room_2 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_6 at room_2 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_6 from a room_2, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_6 from a room_2, the ball_6 is no longer in the room_2 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_2 to room_3 only if the robot_2 is in the room_2. </PRECON> move robot_2 from room_2 to room_3 <EFFECT> Once the robot_2 has moved from room_2 to room_3, the robot_2 is no longer in the room_2 and is in the room_3. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_8 from a room_3 only if the robot_2 is in the room_3 and the ball_8 is also in the same room_3. A robot_2 can pick up an ball_8 from a room_3 only if the robot_2's right_gripper_2 is free. </PRECON> robot_2 picks ball_8 at room_3 with right_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_8 from a room_3, the robot_2's right_gripper_2 is no longer free. Once the robot_2 has picked up an ball_8 from a room_3, the ball_8 is no longer in the room_3 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can drop an ball_6 in a room_3 only if the robot_2 is in the room_3 and the robot_2 is carrying the ball_6. </PRECON> robot_2 drops ball_6 at room_3 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_6 in a room_3, the robot_2's left_gripper_2 is free. Once the robot_2 has dropped an ball_6 in a room_3, the ball_6 is in the room_3 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_3 to room_5 only if the robot_2 is in the room_3. </PRECON> move robot_2 from room_3 to room_5 <EFFECT> Once the robot_2 has moved from room_3 to room_5, the robot_2 is no longer in the room_3 and is in the room_5. </EFFECT> \n <PRECON> A robot_2 can drop an ball_8 in a room_5 only if the robot_2 is in the room_5 and the robot_2 is carrying the ball_8. </PRECON> robot_2 drops ball_8 at room_5 with right_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_8 in a room_5, the robot_2's right_gripper_2 is free. Once the robot_2 has dropped an ball_8 in a room_5, the ball_8 is in the room_5 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_1 can move from room_7 to room_2 only if the robot_1 is in the room_7. </PRECON> move robot_1 from room_7 to room_2 <EFFECT> Once the robot_1 has moved from room_7 to room_2, the robot_1 is no longer in the room_7 and is in the room_2. </EFFECT> \n <PRECON> A robot_2 can move from room_5 to room_6 only if the robot_2 is in the room_5. </PRECON> move robot_2 from room_5 to room_6 <EFFECT> Once the robot_2 has moved from room_5 to room_6, the robot_2 is no longer in the room_5 and is in the room_6. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> WRONG \n <PRECON> A robot_2 can pick up an ball_3 from a room_6 only if the robot_2 is in the room_6 and the ball_3 is also in the same room_6. A robot_2 can pick up an ball_3 from a room_6 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_3 at room_6 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_3 from a room_6, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_3 from a room_6, the ball_3 is no longer in the room_6 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_4 from a room_6 only if the robot_2 is in the room_6 and the ball_4 is also in the same room_6. A robot_2 can pick up an ball_4 from a room_6 only if the robot_2's right_gripper_2 is free. </PRECON> robot_2 picks ball_4 at room_6 with right_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_4 from a room_6, the robot_2's right_gripper_2 is no longer free. Once the robot_2 has picked up an ball_4 from a room_6, the ball_4 is no longer in the room_6 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_6 to room_5 only if the robot_2 is in the room_6. </PRECON> move robot_2 from room_6 to room_5 <EFFECT> Once the robot_2 has moved from room_6 to room_5, the robot_2 is no longer in the room_6 and is in the room_5. </EFFECT> \n <PRECON> A robot_2 can drop an ball_4 in a room_5 only if the robot_2 is in the room_5 and the robot_2 is carrying the ball_4. </PRECON> robot_2 drops ball_4 at room_5 with right_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_4 in a room_5, the robot_2's right_gripper_2 is free. Once the robot_2 has dropped an ball_4 in a room_5, the ball_4 is in the room_5 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_5 to room_1 only if the robot_2 is in the room_5. </PRECON> move robot_2 from room_5 to room_1 <EFFECT> Once the robot_2 has moved from room_5 to room_1, the robot_2 is no longer in the room_5 and is in the room_1. </EFFECT> \n <PRECON> A robot_2 can drop an ball_3 in a room_1 only if the robot_2 is in the room_1 and the robot_2 is carrying the ball_3. </PRECON> robot_2 drops ball_3 at room_1 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_3 in a room_1, the robot_2's left_gripper_2 is free. Once the robot_2 has dropped an ball_3 in a room_1, the ball_3 is in the room_1 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_5 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_5 <EFFECT> Once the robot_1 has moved from room_4 to room_5, the robot_1 is no longer in the room_4 and is in the room_5. </EFFECT> WRONG \n <PRECON> A robot_2 can move from room_1 to room_7 only if the robot_2 is in the room_1. </PRECON> move robot_2 from room_1 to room_7 <EFFECT> Once the robot_2 has moved from room_1 to room_7, the robot_2 is no longer in the room_1 and is in the room_7. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_1 from a room_7 only if the robot_2 is in the room_7 and the ball_1 is also in the same room_7. A robot_2 can pick up an ball_1 from a room_7 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_1 at room_7 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_1 from a room_7, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_1 from a room_7, the ball_1 is no longer in the room_7 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_7 to room_1 only if the robot_2 is in the room_7. </PRECON> move robot_2 from room_7 to room_1 <EFFECT> Once the robot_2 has moved from room_7 to room_1, the robot_2 is no longer in the room_7 and is in the room_1. </EFFECT> \n <PRECON> A robot_2 can drop an ball_1 in a room_1 only if the robot_2 is in the room_1 and the robot_2 is carrying the ball_1. </PRECON> robot_2 drops ball_1 at room_1 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_1 in a room_1, the robot_2's left_gripper_2 is free. Once the robot_2 has dropped an ball_1 in a room_1, the ball_1 is in the room_1 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_2 from a room_4 only if the robot_1 is in the room_4 and the ball_2 is also in the same room_4. A robot_1 can pick up an ball_2 from a room_4 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_2 at room_4 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_2 from a room_4, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_2 from a room_4, the ball_2 is no longer in the room_4 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_2 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_2 <EFFECT> Once the robot_1 has moved from room_4 to room_2, the robot_1 is no longer in the room_4 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can drop an ball_9 in a room_4 only if the robot_1 is in the room_4 and the robot_1 is carrying the ball_9. </PRECON> robot_1 drops ball_9 at room_4 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_9 in a room_4, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_9 in a room_4, the ball_9 is in the room_4 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can drop an ball_2 in a room_2 only if the robot_1 is in the room_2 and the robot_1 is carrying the ball_2. </PRECON> robot_1 drops ball_2 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_2 in a room_2, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_2 in a room_2, the ball_2 is in the room_2 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_9 in a room_4 only if the robot_1 is in the room_4 and the robot_1 is carrying the ball_9. </PRECON> robot_1 drops ball_9 at room_4 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_9 in a room_4, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_9 in a room_4, the ball_9 is in the room_4 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_7 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_7 <EFFECT> Once the robot_1 has moved from room_4 to room_7, the robot_1 is no longer in the room_4 and is in the room_7. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_7 from a room_7 only if the robot_1 is in the room_7 and the ball_7 is also in the same room_7. A robot_1 can pick up an ball_7 from a room_7 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_7 at room_7 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_7 from a room_7, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_7 from a room_7, the ball_7 is no longer in the room_7 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_9 from a room_7 only if the robot_1 is in the room_7 and the ball_9 is also in the same room_7. A robot_1 can pick up an ball_9 from a room_7 only if the robot_1's right_gripper_1 is free. </PRECON> robot_1 picks ball_9 at room_7 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_9 from a room_7, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_9 from a room_7, the ball_9 is no longer in the room_7 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_7 to room_4 only if the robot_1 is in the room_7. </PRECON> move robot_1 from room_7 to room_4 <EFFECT> Once the robot_1 has moved from room_7 to room_4, the robot_1 is no longer in the room_7 and is in the room_4. </EFFECT> \n <PRECON> A robot_1 can drop an ball_9 in a room_4 only if the robot_1 is in the room_4 and the robot_1 is carrying the ball_9. </PRECON> robot_1 drops ball_9 at room_4 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_9 in a room_4, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_9 in a room_4, the ball_9 is in the room_4 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_5 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_5 <EFFECT> Once the robot_1 has moved from room_4 to room_5, the robot_1 is no longer in the room_4 and is in the room_5. </EFFECT> \n <PRECON> A robot_1 can drop an ball_7 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_7. </PRECON> robot_1 drops ball_7 at room_5 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_7 in a room_5, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_7 in a room_5, the ball_7 is in the room_5 and is no longer carried by the robot_1. </EFFECT> \n</PLAN>", "plan_length": 31, "raw_plan": ["(move robot2 room1 room2)", "(pick robot2 ball6 room2 lgripper2)", "(move robot2 room2 room3)", "(pick robot2 ball8 room3 rgripper2)", "(drop robot2 ball6 room3 lgripper2)", "(move robot2 room3 room5)", "(drop robot2 ball8 room5 rgripper2)", "(move robot1 room7 room2)", "(move robot2 room5 room6)", "(pick robot2 ball3 room6 lgripper2)", "(pick robot2 ball4 room6 rgripper2)", "(move robot2 room6 room5)", "(drop robot2 ball4 room5 rgripper2)", "(move robot2 room5 room1)", "(drop robot2 ball3 room1 lgripper2)", "(move robot2 room1 room7)", "(pick robot2 ball1 room7 lgripper2)", "(move robot2 room7 room1)", "(drop robot2 ball1 room1 lgripper2)", "(move robot1 room2 room4)", "(pick robot1 ball2 room4 lgripper1)", "(move robot1 room4 room2)", "(drop robot1 ball2 room2 lgripper1)", "(move robot1 room2 room4)", "(move robot1 room4 room7)", "(pick robot1 ball7 room7 lgripper1)", "(pick robot1 ball9 room7 rgripper1)", "(move robot1 room7 room4)", "(drop robot1 ball9 room4 rgripper1)", "(move robot1 room4 room5)", "(drop robot1 ball7 room5 lgripper1)"], "full_text_prompt": "I have to plan how to move objects between rooms using a robot with grippers. The robot can move between rooms and pick up or drop objects using its grippers.\nHere are the actions that can be performed:\nMove the robot from one room to another room.\nA robot pick up an object from a room.\nA robot drop an object in a room.\nThe following are the restrictions on the actions:\nA robot can move from one room to another room only if the robot is in the from-room.\nOnce the robot has moved from one room to another room, the robot is no longer in the from-room and is in the to-room.\nA robot can pick up an object from a room only if the robot is in the room and the object is also in the same room.\nA robot can pick up an object from a room only if the robot's gripper is free.\nOnce the robot has picked up an object from a room, the object is no longer in the room and is carried by the robot.\nOnce the robot has picked up an object from a room, the robot's gripper is no longer free.\nA robot can drop an object in a room only if the robot is in the room and the robot is carrying the object.\nOnce the robot has dropped an object in a room, the object is in the room and is no longer carried by the robot.\nOnce the robot has dropped an object in a room, the robot's gripper is free.As initial conditions I have that, ball_6 is at room_2, ball_3 is at room_6, ball_5 is at room_2, robot_1 is at room_7, robot_1's right_gripper_1 is free, robot_2's left_gripper_2 is free, ball_4 is at room_6, ball_1 is at room_7, ball_8 is at room_3, ball_7 is at room_7, robot_2 is at room_1, robot_1's left_gripper_1 is free, ball_9 is at room_7, ball_2 is at room_4, robot_2's right_gripper_2 is free.My goal is to have that ball_1 is at room_1, ball_4 is at room_5, ball_9 is at room_4, ball_2 is at room_2, ball_6 is at room_3, ball_3 is at room_1, ball_5 is at room_2, ball_7 is at room_5, ball_8 is at room_5.My plan is as follows:\n<PLAN>\n <PRECON> A robot_2 can move from room_1 to room_2 only if the robot_2 is in the room_1. </PRECON> move robot_2 from room_1 to room_2 <EFFECT> Once the robot_2 has moved from room_1 to room_2, the robot_2 is no longer in the room_1 and is in the room_2. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_6 from a room_2 only if the robot_2 is in the room_2 and the ball_6 is also in the same room_2. A robot_2 can pick up an ball_6 from a room_2 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_6 at room_2 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_6 from a room_2, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_6 from a room_2, the ball_6 is no longer in the room_2 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_2 to room_3 only if the robot_2 is in the room_2. </PRECON> move robot_2 from room_2 to room_3 <EFFECT> Once the robot_2 has moved from room_2 to room_3, the robot_2 is no longer in the room_2 and is in the room_3. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_8 from a room_3 only if the robot_2 is in the room_3 and the ball_8 is also in the same room_3. A robot_2 can pick up an ball_8 from a room_3 only if the robot_2's right_gripper_2 is free. </PRECON> robot_2 picks ball_8 at room_3 with right_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_8 from a room_3, the robot_2's right_gripper_2 is no longer free. Once the robot_2 has picked up an ball_8 from a room_3, the ball_8 is no longer in the room_3 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can drop an ball_6 in a room_3 only if the robot_2 is in the room_3 and the robot_2 is carrying the ball_6. </PRECON> robot_2 drops ball_6 at room_3 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_6 in a room_3, the robot_2's left_gripper_2 is free. Once the robot_2 has dropped an ball_6 in a room_3, the ball_6 is in the room_3 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_3 to room_5 only if the robot_2 is in the room_3. </PRECON> move robot_2 from room_3 to room_5 <EFFECT> Once the robot_2 has moved from room_3 to room_5, the robot_2 is no longer in the room_3 and is in the room_5. </EFFECT> \n <PRECON> A robot_2 can drop an ball_8 in a room_5 only if the robot_2 is in the room_5 and the robot_2 is carrying the ball_8. </PRECON> robot_2 drops ball_8 at room_5 with right_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_8 in a room_5, the robot_2's right_gripper_2 is free. Once the robot_2 has dropped an ball_8 in a room_5, the ball_8 is in the room_5 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_1 can move from room_7 to room_2 only if the robot_1 is in the room_7. </PRECON> move robot_1 from room_7 to room_2 <EFFECT> Once the robot_1 has moved from room_7 to room_2, the robot_1 is no longer in the room_7 and is in the room_2. </EFFECT> \n <PRECON> A robot_2 can move from room_5 to room_6 only if the robot_2 is in the room_5. </PRECON> move robot_2 from room_5 to room_6 <EFFECT> Once the robot_2 has moved from room_5 to room_6, the robot_2 is no longer in the room_5 and is in the room_6. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> WRONG \n <PRECON> A robot_2 can pick up an ball_3 from a room_6 only if the robot_2 is in the room_6 and the ball_3 is also in the same room_6. A robot_2 can pick up an ball_3 from a room_6 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_3 at room_6 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_3 from a room_6, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_3 from a room_6, the ball_3 is no longer in the room_6 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_4 from a room_6 only if the robot_2 is in the room_6 and the ball_4 is also in the same room_6. A robot_2 can pick up an ball_4 from a room_6 only if the robot_2's right_gripper_2 is free. </PRECON> robot_2 picks ball_4 at room_6 with right_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_4 from a room_6, the robot_2's right_gripper_2 is no longer free. Once the robot_2 has picked up an ball_4 from a room_6, the ball_4 is no longer in the room_6 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_6 to room_5 only if the robot_2 is in the room_6. </PRECON> move robot_2 from room_6 to room_5 <EFFECT> Once the robot_2 has moved from room_6 to room_5, the robot_2 is no longer in the room_6 and is in the room_5. </EFFECT> \n <PRECON> A robot_2 can drop an ball_4 in a room_5 only if the robot_2 is in the room_5 and the robot_2 is carrying the ball_4. </PRECON> robot_2 drops ball_4 at room_5 with right_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_4 in a room_5, the robot_2's right_gripper_2 is free. Once the robot_2 has dropped an ball_4 in a room_5, the ball_4 is in the room_5 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_5 to room_1 only if the robot_2 is in the room_5. </PRECON> move robot_2 from room_5 to room_1 <EFFECT> Once the robot_2 has moved from room_5 to room_1, the robot_2 is no longer in the room_5 and is in the room_1. </EFFECT> \n <PRECON> A robot_2 can drop an ball_3 in a room_1 only if the robot_2 is in the room_1 and the robot_2 is carrying the ball_3. </PRECON> robot_2 drops ball_3 at room_1 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_3 in a room_1, the robot_2's left_gripper_2 is free. Once the robot_2 has dropped an ball_3 in a room_1, the ball_3 is in the room_1 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_5 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_5 <EFFECT> Once the robot_1 has moved from room_4 to room_5, the robot_1 is no longer in the room_4 and is in the room_5. </EFFECT> WRONG \n <PRECON> A robot_2 can move from room_1 to room_7 only if the robot_2 is in the room_1. </PRECON> move robot_2 from room_1 to room_7 <EFFECT> Once the robot_2 has moved from room_1 to room_7, the robot_2 is no longer in the room_1 and is in the room_7. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_1 from a room_7 only if the robot_2 is in the room_7 and the ball_1 is also in the same room_7. A robot_2 can pick up an ball_1 from a room_7 only if the robot_2's left_gripper_2 is free. </PRECON> robot_2 picks ball_1 at room_7 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_1 from a room_7, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_1 from a room_7, the ball_1 is no longer in the room_7 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_7 to room_1 only if the robot_2 is in the room_7. </PRECON> move robot_2 from room_7 to room_1 <EFFECT> Once the robot_2 has moved from room_7 to room_1, the robot_2 is no longer in the room_7 and is in the room_1. </EFFECT> \n <PRECON> A robot_2 can drop an ball_1 in a room_1 only if the robot_2 is in the room_1 and the robot_2 is carrying the ball_1. </PRECON> robot_2 drops ball_1 at room_1 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_1 in a room_1, the robot_2's left_gripper_2 is free. Once the robot_2 has dropped an ball_1 in a room_1, the ball_1 is in the room_1 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_2 from a room_4 only if the robot_1 is in the room_4 and the ball_2 is also in the same room_4. A robot_1 can pick up an ball_2 from a room_4 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_2 at room_4 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_2 from a room_4, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_2 from a room_4, the ball_2 is no longer in the room_4 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_2 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_2 <EFFECT> Once the robot_1 has moved from room_4 to room_2, the robot_1 is no longer in the room_4 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can drop an ball_9 in a room_4 only if the robot_1 is in the room_4 and the robot_1 is carrying the ball_9. </PRECON> robot_1 drops ball_9 at room_4 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_9 in a room_4, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_9 in a room_4, the ball_9 is in the room_4 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can drop an ball_2 in a room_2 only if the robot_1 is in the room_2 and the robot_1 is carrying the ball_2. </PRECON> robot_1 drops ball_2 at room_2 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_2 in a room_2, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_2 in a room_2, the ball_2 is in the room_2 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_9 in a room_4 only if the robot_1 is in the room_4 and the robot_1 is carrying the ball_9. </PRECON> robot_1 drops ball_9 at room_4 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_9 in a room_4, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_9 in a room_4, the ball_9 is in the room_4 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_2 to room_4 only if the robot_1 is in the room_2. </PRECON> move robot_1 from room_2 to room_4 <EFFECT> Once the robot_1 has moved from room_2 to room_4, the robot_1 is no longer in the room_2 and is in the room_4. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_7 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_7 <EFFECT> Once the robot_1 has moved from room_4 to room_7, the robot_1 is no longer in the room_4 and is in the room_7. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_7 from a room_7 only if the robot_1 is in the room_7 and the ball_7 is also in the same room_7. A robot_1 can pick up an ball_7 from a room_7 only if the robot_1's left_gripper_1 is free. </PRECON> robot_1 picks ball_7 at room_7 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_7 from a room_7, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_7 from a room_7, the ball_7 is no longer in the room_7 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_9 from a room_7 only if the robot_1 is in the room_7 and the ball_9 is also in the same room_7. A robot_1 can pick up an ball_9 from a room_7 only if the robot_1's right_gripper_1 is free. </PRECON> robot_1 picks ball_9 at room_7 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_9 from a room_7, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_9 from a room_7, the ball_9 is no longer in the room_7 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_7 to room_4 only if the robot_1 is in the room_7. </PRECON> move robot_1 from room_7 to room_4 <EFFECT> Once the robot_1 has moved from room_7 to room_4, the robot_1 is no longer in the room_7 and is in the room_4. </EFFECT> \n <PRECON> A robot_1 can drop an ball_9 in a room_4 only if the robot_1 is in the room_4 and the robot_1 is carrying the ball_9. </PRECON> robot_1 drops ball_9 at room_4 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_9 in a room_4, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_9 in a room_4, the ball_9 is in the room_4 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_4 to room_5 only if the robot_1 is in the room_4. </PRECON> move robot_1 from room_4 to room_5 <EFFECT> Once the robot_1 has moved from room_4 to room_5, the robot_1 is no longer in the room_4 and is in the room_5. </EFFECT> \n <PRECON> A robot_1 can drop an ball_7 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_7. </PRECON> robot_1 drops ball_7 at room_5 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_7 in a room_5, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_7 in a room_5, the ball_7 is in the room_5 and is no longer carried by the robot_1. </EFFECT> \n</PLAN>"}
{"domain": "grippers", "instance_id": "120", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan how to move objects between rooms using a robot with grippers. The robot can move between rooms and pick up or drop objects using its grippers.\nHere are the actions that can be performed:\nMove the robot from one room to another room.\nA robot pick up an object from a room.\nA robot drop an object in a room.\nThe following are the restrictions on the actions:\nA robot can move from one room to another room only if the robot is in the from-room.\nOnce the robot has moved from one room to another room, the robot is no longer in the from-room and is in the to-room.\nA robot can pick up an object from a room only if the robot is in the room and the object is also in the same room.\nA robot can pick up an object from a room only if the robot's gripper is free.\nOnce the robot has picked up an object from a room, the object is no longer in the room and is carried by the robot.\nOnce the robot has picked up an object from a room, the robot's gripper is no longer free.\nA robot can drop an object in a room only if the robot is in the room and the robot is carrying the object.\nOnce the robot has dropped an object in a room, the object is in the room and is no longer carried by the robot.\nOnce the robot has dropped an object in a room, the robot's gripper is free.", "input": "As initial conditions I have that, ball_7 is at room_1, robot_4 is at room_2, robot_3's left_gripper_3 is free, ball_6 is at room_1, robot_5's right_gripper_5 is free, robot_5 is at room_6, ball_4 is at room_3, robot_5's left_gripper_5 is free, robot_1 is at room_3, robot_1's right_gripper_1 is free, robot_3 is at room_2, ball_2 is at room_1, ball_1 is at room_2, ball_5 is at room_5, robot_3's right_gripper_3 is free, robot_1's left_gripper_1 is free, robot_4's left_gripper_4 is free, robot_4's right_gripper_4 is free, robot_2 is at room_3, robot_2's right_gripper_2 is free, ball_8 is at room_4, robot_2's left_gripper_2 is free, ball_3 is at room_3.\nMy goal is to have that ball_2 is at room_5, ball_6 is at room_3, ball_3 is at room_5, ball_7 is at room_3, ball_8 is at room_4, ball_5 is at room_4, ball_1 is at room_3, ball_4 is at room_2.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A robot_4 can pick up an ball_1 from a room_2 only if the robot_4's left_gripper_4 is free. A robot_4 can pick up an ball_1 from a room_2 only if the robot_4 is in the room_2 and the ball_1 is also in the same room_2. </PRECON> robot_4 picks ball_1 at room_2 with left_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_1 from a room_2, the robot_4's left_gripper_4 is no longer free. Once the robot_4 has picked up an ball_1 from a room_2, the ball_1 is no longer in the room_2 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can move from room_2 to room_3 only if the robot_4 is in the room_2. </PRECON> move robot_4 from room_2 to room_3 <EFFECT> Once the robot_4 has moved from room_2 to room_3, the robot_4 is no longer in the room_2 and is in the room_3. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_3 from a room_3 only if the robot_4's right_gripper_4 is free. A robot_4 can pick up an ball_3 from a room_3 only if the robot_4 is in the room_3 and the ball_3 is also in the same room_3. </PRECON> robot_4 picks ball_3 at room_3 with right_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_3 from a room_3, the robot_4's right_gripper_4 is no longer free. Once the robot_4 has picked up an ball_3 from a room_3, the ball_3 is no longer in the room_3 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can drop an ball_1 in a room_3 only if the robot_4 is in the room_3 and the robot_4 is carrying the ball_1. </PRECON> robot_4 drops ball_1 at room_3 with left_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_1 in a room_3, the robot_4's left_gripper_4 is free. Once the robot_4 has dropped an ball_1 in a room_3, the ball_1 is in the room_3 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can move from room_3 to room_5 only if the robot_4 is in the room_3. </PRECON> move robot_4 from room_3 to room_5 <EFFECT> Once the robot_4 has moved from room_3 to room_5, the robot_4 is no longer in the room_3 and is in the room_5. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_5 from a room_5 only if the robot_4's left_gripper_4 is free. A robot_4 can pick up an ball_5 from a room_5 only if the robot_4 is in the room_5 and the ball_5 is also in the same room_5. </PRECON> robot_4 picks ball_5 at room_5 with left_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_5 from a room_5, the robot_4's left_gripper_4 is no longer free. Once the robot_4 has picked up an ball_5 from a room_5, the ball_5 is no longer in the room_5 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can drop an ball_3 in a room_5 only if the robot_4 is in the room_5 and the robot_4 is carrying the ball_3. </PRECON> robot_4 drops ball_3 at room_5 with right_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_3 in a room_5, the robot_4's right_gripper_4 is free. Once the robot_4 has dropped an ball_3 in a room_5, the ball_3 is in the room_5 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can move from room_5 to room_4 only if the robot_4 is in the room_5. </PRECON> move robot_4 from room_5 to room_4 <EFFECT> Once the robot_4 has moved from room_5 to room_4, the robot_4 is no longer in the room_5 and is in the room_4. </EFFECT> \n <PRECON> A robot_4 can drop an ball_5 in a room_4 only if the robot_4 is in the room_4 and the robot_4 is carrying the ball_5. </PRECON> robot_4 drops ball_5 at room_4 with left_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_5 in a room_4, the robot_4's left_gripper_4 is free. Once the robot_4 has dropped an ball_5 in a room_4, the ball_5 is in the room_4 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_4 from a room_3 only if the robot_2's left_gripper_2 is free. A robot_2 can pick up an ball_4 from a room_3 only if the robot_2 is in the room_3 and the ball_4 is also in the same room_3. </PRECON> robot_2 picks ball_4 at room_3 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_4 from a room_3, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_4 from a room_3, the ball_4 is no longer in the room_3 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_3 to room_2 only if the robot_2 is in the room_3. </PRECON> move robot_2 from room_3 to room_2 <EFFECT> Once the robot_2 has moved from room_3 to room_2, the robot_2 is no longer in the room_3 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> WRONG \n <PRECON> A robot_2 can drop an ball_4 in a room_2 only if the robot_2 is in the room_2 and the robot_2 is carrying the ball_4. </PRECON> robot_2 drops ball_4 at room_2 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_4 in a room_2, the robot_2's left_gripper_2 is free. Once the robot_2 has dropped an ball_4 in a room_2, the ball_4 is in the room_2 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_2 from a room_1 only if the robot_1's left_gripper_1 is free. A robot_1 can pick up an ball_2 from a room_1 only if the robot_1 is in the room_1 and the ball_2 is also in the same room_1. </PRECON> robot_1 picks ball_2 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_2 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_2 from a room_1, the ball_2 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_6 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_3 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_3, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_3, the ball_6 is in the room_3 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_1 to room_5 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_5 <EFFECT> Once the robot_1 has moved from room_1 to room_5, the robot_1 is no longer in the room_1 and is in the room_5. </EFFECT> \n <PRECON> A robot_1 can drop an ball_2 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_2. </PRECON> robot_1 drops ball_2 at room_5 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_2 in a room_5, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_2 in a room_5, the ball_2 is in the room_5 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_5 to room_1 only if the robot_1 is in the room_5. </PRECON> move robot_1 from room_5 to room_1 <EFFECT> Once the robot_1 has moved from room_5 to room_1, the robot_1 is no longer in the room_5 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_6 from a room_1 only if the robot_1's left_gripper_1 is free. A robot_1 can pick up an ball_6 from a room_1 only if the robot_1 is in the room_1 and the ball_6 is also in the same room_1. </PRECON> robot_1 picks ball_6 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_6 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_6 from a room_1, the ball_6 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_7 from a room_1 only if the robot_1's right_gripper_1 is free. A robot_1 can pick up an ball_7 from a room_1 only if the robot_1 is in the room_1 and the ball_7 is also in the same room_1. </PRECON> robot_1 picks ball_7 at room_1 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_7 from a room_1, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_7 from a room_1, the ball_7 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_3 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_3 <EFFECT> Once the robot_1 has moved from room_1 to room_3, the robot_1 is no longer in the room_1 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can drop an ball_6 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_3 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_3, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_3, the ball_6 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_7 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_7. </PRECON> robot_1 drops ball_7 at room_3 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_7 in a room_3, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_7 in a room_3, the ball_7 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n</PLAN>", "plan_length": 22, "raw_plan": ["(pick robot4 ball1 room2 lgripper4)", "(move robot4 room2 room3)", "(pick robot4 ball3 room3 rgripper4)", "(drop robot4 ball1 room3 lgripper4)", "(move robot4 room3 room5)", "(pick robot4 ball5 room5 lgripper4)", "(drop robot4 ball3 room5 rgripper4)", "(move robot4 room5 room4)", "(drop robot4 ball5 room4 lgripper4)", "(pick robot2 ball4 room3 lgripper2)", "(move robot2 room3 room2)", "(drop robot2 ball4 room2 lgripper2)", "(move robot1 room3 room1)", "(pick robot1 ball2 room1 lgripper1)", "(move robot1 room1 room5)", "(drop robot1 ball2 room5 lgripper1)", "(move robot1 room5 room1)", "(pick robot1 ball6 room1 lgripper1)", "(pick robot1 ball7 room1 rgripper1)", "(move robot1 room1 room3)", "(drop robot1 ball6 room3 lgripper1)", "(drop robot1 ball7 room3 rgripper1)"], "full_text_prompt": "I have to plan how to move objects between rooms using a robot with grippers. The robot can move between rooms and pick up or drop objects using its grippers.\nHere are the actions that can be performed:\nMove the robot from one room to another room.\nA robot pick up an object from a room.\nA robot drop an object in a room.\nThe following are the restrictions on the actions:\nA robot can move from one room to another room only if the robot is in the from-room.\nOnce the robot has moved from one room to another room, the robot is no longer in the from-room and is in the to-room.\nA robot can pick up an object from a room only if the robot is in the room and the object is also in the same room.\nA robot can pick up an object from a room only if the robot's gripper is free.\nOnce the robot has picked up an object from a room, the object is no longer in the room and is carried by the robot.\nOnce the robot has picked up an object from a room, the robot's gripper is no longer free.\nA robot can drop an object in a room only if the robot is in the room and the robot is carrying the object.\nOnce the robot has dropped an object in a room, the object is in the room and is no longer carried by the robot.\nOnce the robot has dropped an object in a room, the robot's gripper is free.As initial conditions I have that, ball_7 is at room_1, robot_4 is at room_2, robot_3's left_gripper_3 is free, ball_6 is at room_1, robot_5's right_gripper_5 is free, robot_5 is at room_6, ball_4 is at room_3, robot_5's left_gripper_5 is free, robot_1 is at room_3, robot_1's right_gripper_1 is free, robot_3 is at room_2, ball_2 is at room_1, ball_1 is at room_2, ball_5 is at room_5, robot_3's right_gripper_3 is free, robot_1's left_gripper_1 is free, robot_4's left_gripper_4 is free, robot_4's right_gripper_4 is free, robot_2 is at room_3, robot_2's right_gripper_2 is free, ball_8 is at room_4, robot_2's left_gripper_2 is free, ball_3 is at room_3.My goal is to have that ball_2 is at room_5, ball_6 is at room_3, ball_3 is at room_5, ball_7 is at room_3, ball_8 is at room_4, ball_5 is at room_4, ball_1 is at room_3, ball_4 is at room_2.My plan is as follows:\n<PLAN>\n <PRECON> A robot_4 can pick up an ball_1 from a room_2 only if the robot_4's left_gripper_4 is free. A robot_4 can pick up an ball_1 from a room_2 only if the robot_4 is in the room_2 and the ball_1 is also in the same room_2. </PRECON> robot_4 picks ball_1 at room_2 with left_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_1 from a room_2, the robot_4's left_gripper_4 is no longer free. Once the robot_4 has picked up an ball_1 from a room_2, the ball_1 is no longer in the room_2 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can move from room_2 to room_3 only if the robot_4 is in the room_2. </PRECON> move robot_4 from room_2 to room_3 <EFFECT> Once the robot_4 has moved from room_2 to room_3, the robot_4 is no longer in the room_2 and is in the room_3. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_3 from a room_3 only if the robot_4's right_gripper_4 is free. A robot_4 can pick up an ball_3 from a room_3 only if the robot_4 is in the room_3 and the ball_3 is also in the same room_3. </PRECON> robot_4 picks ball_3 at room_3 with right_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_3 from a room_3, the robot_4's right_gripper_4 is no longer free. Once the robot_4 has picked up an ball_3 from a room_3, the ball_3 is no longer in the room_3 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can drop an ball_1 in a room_3 only if the robot_4 is in the room_3 and the robot_4 is carrying the ball_1. </PRECON> robot_4 drops ball_1 at room_3 with left_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_1 in a room_3, the robot_4's left_gripper_4 is free. Once the robot_4 has dropped an ball_1 in a room_3, the ball_1 is in the room_3 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can move from room_3 to room_5 only if the robot_4 is in the room_3. </PRECON> move robot_4 from room_3 to room_5 <EFFECT> Once the robot_4 has moved from room_3 to room_5, the robot_4 is no longer in the room_3 and is in the room_5. </EFFECT> \n <PRECON> A robot_4 can pick up an ball_5 from a room_5 only if the robot_4's left_gripper_4 is free. A robot_4 can pick up an ball_5 from a room_5 only if the robot_4 is in the room_5 and the ball_5 is also in the same room_5. </PRECON> robot_4 picks ball_5 at room_5 with left_gripper_4 <EFFECT> Once the robot_4 has picked up an ball_5 from a room_5, the robot_4's left_gripper_4 is no longer free. Once the robot_4 has picked up an ball_5 from a room_5, the ball_5 is no longer in the room_5 and is carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can drop an ball_3 in a room_5 only if the robot_4 is in the room_5 and the robot_4 is carrying the ball_3. </PRECON> robot_4 drops ball_3 at room_5 with right_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_3 in a room_5, the robot_4's right_gripper_4 is free. Once the robot_4 has dropped an ball_3 in a room_5, the ball_3 is in the room_5 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_4 can move from room_5 to room_4 only if the robot_4 is in the room_5. </PRECON> move robot_4 from room_5 to room_4 <EFFECT> Once the robot_4 has moved from room_5 to room_4, the robot_4 is no longer in the room_5 and is in the room_4. </EFFECT> \n <PRECON> A robot_4 can drop an ball_5 in a room_4 only if the robot_4 is in the room_4 and the robot_4 is carrying the ball_5. </PRECON> robot_4 drops ball_5 at room_4 with left_gripper_4 <EFFECT> Once the robot_4 has dropped an ball_5 in a room_4, the robot_4's left_gripper_4 is free. Once the robot_4 has dropped an ball_5 in a room_4, the ball_5 is in the room_4 and is no longer carried by the robot_4. </EFFECT> \n <PRECON> A robot_2 can pick up an ball_4 from a room_3 only if the robot_2's left_gripper_2 is free. A robot_2 can pick up an ball_4 from a room_3 only if the robot_2 is in the room_3 and the ball_4 is also in the same room_3. </PRECON> robot_2 picks ball_4 at room_3 with left_gripper_2 <EFFECT> Once the robot_2 has picked up an ball_4 from a room_3, the robot_2's left_gripper_2 is no longer free. Once the robot_2 has picked up an ball_4 from a room_3, the ball_4 is no longer in the room_3 and is carried by the robot_2. </EFFECT> \n <PRECON> A robot_2 can move from room_3 to room_2 only if the robot_2 is in the room_3. </PRECON> move robot_2 from room_3 to room_2 <EFFECT> Once the robot_2 has moved from room_3 to room_2, the robot_2 is no longer in the room_3 and is in the room_2. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> WRONG \n <PRECON> A robot_2 can drop an ball_4 in a room_2 only if the robot_2 is in the room_2 and the robot_2 is carrying the ball_4. </PRECON> robot_2 drops ball_4 at room_2 with left_gripper_2 <EFFECT> Once the robot_2 has dropped an ball_4 in a room_2, the robot_2's left_gripper_2 is free. Once the robot_2 has dropped an ball_4 in a room_2, the ball_4 is in the room_2 and is no longer carried by the robot_2. </EFFECT> \n <PRECON> A robot_1 can move from room_3 to room_1 only if the robot_1 is in the room_3. </PRECON> move robot_1 from room_3 to room_1 <EFFECT> Once the robot_1 has moved from room_3 to room_1, the robot_1 is no longer in the room_3 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_2 from a room_1 only if the robot_1's left_gripper_1 is free. A robot_1 can pick up an ball_2 from a room_1 only if the robot_1 is in the room_1 and the ball_2 is also in the same room_1. </PRECON> robot_1 picks ball_2 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_2 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_2 from a room_1, the ball_2 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_6 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_3 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_3, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_3, the ball_6 is in the room_3 and is no longer carried by the robot_1. </EFFECT> WRONG \n <PRECON> A robot_1 can move from room_1 to room_5 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_5 <EFFECT> Once the robot_1 has moved from room_1 to room_5, the robot_1 is no longer in the room_1 and is in the room_5. </EFFECT> \n <PRECON> A robot_1 can drop an ball_2 in a room_5 only if the robot_1 is in the room_5 and the robot_1 is carrying the ball_2. </PRECON> robot_1 drops ball_2 at room_5 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_2 in a room_5, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_2 in a room_5, the ball_2 is in the room_5 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_5 to room_1 only if the robot_1 is in the room_5. </PRECON> move robot_1 from room_5 to room_1 <EFFECT> Once the robot_1 has moved from room_5 to room_1, the robot_1 is no longer in the room_5 and is in the room_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_6 from a room_1 only if the robot_1's left_gripper_1 is free. A robot_1 can pick up an ball_6 from a room_1 only if the robot_1 is in the room_1 and the ball_6 is also in the same room_1. </PRECON> robot_1 picks ball_6 at room_1 with left_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_6 from a room_1, the robot_1's left_gripper_1 is no longer free. Once the robot_1 has picked up an ball_6 from a room_1, the ball_6 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can pick up an ball_7 from a room_1 only if the robot_1's right_gripper_1 is free. A robot_1 can pick up an ball_7 from a room_1 only if the robot_1 is in the room_1 and the ball_7 is also in the same room_1. </PRECON> robot_1 picks ball_7 at room_1 with right_gripper_1 <EFFECT> Once the robot_1 has picked up an ball_7 from a room_1, the robot_1's right_gripper_1 is no longer free. Once the robot_1 has picked up an ball_7 from a room_1, the ball_7 is no longer in the room_1 and is carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can move from room_1 to room_3 only if the robot_1 is in the room_1. </PRECON> move robot_1 from room_1 to room_3 <EFFECT> Once the robot_1 has moved from room_1 to room_3, the robot_1 is no longer in the room_1 and is in the room_3. </EFFECT> \n <PRECON> A robot_1 can drop an ball_6 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_6. </PRECON> robot_1 drops ball_6 at room_3 with left_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_6 in a room_3, the robot_1's left_gripper_1 is free. Once the robot_1 has dropped an ball_6 in a room_3, the ball_6 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n <PRECON> A robot_1 can drop an ball_7 in a room_3 only if the robot_1 is in the room_3 and the robot_1 is carrying the ball_7. </PRECON> robot_1 drops ball_7 at room_3 with right_gripper_1 <EFFECT> Once the robot_1 has dropped an ball_7 in a room_3, the robot_1's right_gripper_1 is free. Once the robot_1 has dropped an ball_7 in a room_3, the ball_7 is in the room_3 and is no longer carried by the robot_1. </EFFECT> \n</PLAN>"}
{"domain": "logistics", "instance_id": "0", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan logistics to transport packages within cities via trucks and between cities via airplanes. Locations within a city are directly connected (trucks can move between any two such locations), and so are the cities. In each city there is exactly one truck and each city has one location that serves as an airport.\nHere are the actions that can be performed:\nLoad a package into a truck.\nLoad a package into an airplane.\nUnload a package from a truck.\nUnload a package from an airplane.\nDrive a truck from one location to another location.\nFly an airplane from one city to another city.\nThe following are the restrictions on the actions:\nA package can be loaded into a truck only if the package and the truck are in the same location.\nOnce a package is loaded into a truck, the package is not at the location and is in the truck.\nA package can be loaded into an airplane only if the package and the airplane are in the same location.\nOnce a package is loaded into an airplane, the package is not at the location and is in the airplane.\nA package can be unloaded from a truck only if the package is in the truck.\nOnce a package is unloaded from a truck, the package is not in the truck and is at the location of the truck.\nA package can be unloaded from an airplane only if the package in the airplane.\nOnce a package is unloaded from an airplane, the package is not in the airplane and is at the location of the airplane.\nA truck can be driven from one location to another if the truck is at the from-location and both from-location and to-location are locations in the same city.\nOnce a truck is driven from one location to another, it is not at the from-location and is at the to-location.\nAn airplane can be flown from one city to another if the from-location and the to-location are airports and the airplane is at the from-location.\nOnce an airplane is flown from one city to another the airplane is not at the from-location and is at the to-location.", "input": "As initial conditions I have that, truck_1 is at location_1-1, , , location_1-1 is in the city city_1, location_0-0 is an airport, , , location_0-1 is in the city city_0, , truck_0 is at location_0-1, , package_3 is at location_1-0, location_0-0 is in the city city_0, , location_0-2 is in the city city_0, location_1-2 is in the city city_1, , , , , , package_4 is at location_0-1, package_5 is at location_0-1, package_2 is at location_1-0, package_1 is at location_0-1, , , , airplane_0 is at location_0-0, location_1-0 is an airport, , location_1-0 is in the city city_1, package_0 is at location_0-1, .\nMy goal is to have that package_1 is at location_0-2, package_3 is at location_0-2, package_0 is at location_1-2, package_2 is at location_1-0, package_5 is at location_0-0, package_4 is at location_1-2.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A package_4 can be unloaded from a truck_0 only if the package_4 is in the truck_0. </PRECON> unload package_4 from truck_0 at location_0-0 <EFFECT> Once a package_4 is unloaded from a truck_0, the package_4 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-2 to location_0-0 if the truck_0 is at the location_0-2 and both location_0-2 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-2 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-2 to location_0-0, it is not at the location_0-2 and is at the location_0-0. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> \n <PRECON> A package_5 can be loaded into a truck_0 only if the package_5 and the truck_0 are in the same location_0-1. </PRECON> load package_5 into truck_0 at location_0-1 <EFFECT> Once a package_5 is loaded into a truck_0, the package_5 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A package_4 can be loaded into a truck_0 only if the package_4 and the truck_0 are in the same location_0-1. </PRECON> load package_4 into truck_0 at location_0-1 <EFFECT> Once a package_4 is loaded into a truck_0, the package_4 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A package_4 can be loaded into an airplane_0 only if the package_4 and the airplane_0 are in the same location_0-0. </PRECON> load package_4 into airplane_0 at location_0-0 <EFFECT> Once a package_4 is loaded into an airplane_0, the package_4 is not at the location_0-0 and is in the airplane_0. </EFFECT> WRONG \n <PRECON> A package_1 can be loaded into a truck_0 only if the package_1 and the truck_0 are in the same location_0-1. </PRECON> load package_1 into truck_0 at location_0-1 <EFFECT> Once a package_1 is loaded into a truck_0, the package_1 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_0 only if the package_0 and the truck_0 are in the same location_0-1. </PRECON> load package_0 into truck_0 at location_0-1 <EFFECT> Once a package_0 is loaded into a truck_0, the package_0 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A package_0 can be unloaded from an airplane_0 only if the package_0 in the airplane_0. </PRECON> unload package_0 from airplane_0 at location_1-0 <EFFECT> Once a package_0 is unloaded from an airplane_0, the package_0 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-1 to location_0-0 if the truck_0 is at the location_0-1 and both location_0-1 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-1 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-1 to location_0-0, it is not at the location_0-1 and is at the location_0-0. </EFFECT> \n <PRECON> A package_5 can be unloaded from a truck_0 only if the package_5 is in the truck_0. </PRECON> unload package_5 from truck_0 at location_0-0 <EFFECT> Once a package_5 is unloaded from a truck_0, the package_5 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A package_4 can be loaded into an airplane_0 only if the package_4 and the airplane_0 are in the same location_0-0. </PRECON> load package_4 into airplane_0 at location_0-0 <EFFECT> Once a package_4 is loaded into an airplane_0, the package_4 is not at the location_0-0 and is in the airplane_0. </EFFECT> WRONG \n <PRECON> A package_4 can be unloaded from a truck_0 only if the package_4 is in the truck_0. </PRECON> unload package_4 from truck_0 at location_0-0 <EFFECT> Once a package_4 is unloaded from a truck_0, the package_4 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_0 only if the package_0 is in the truck_0. </PRECON> unload package_0 from truck_0 at location_0-0 <EFFECT> Once a package_0 is unloaded from a truck_0, the package_0 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A package_4 can be loaded into an airplane_0 only if the package_4 and the airplane_0 are in the same location_0-0. </PRECON> load package_4 into airplane_0 at location_0-0 <EFFECT> Once a package_4 is loaded into an airplane_0, the package_4 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> A package_0 can be loaded into an airplane_0 only if the package_0 and the airplane_0 are in the same location_0-0. </PRECON> load package_0 into airplane_0 at location_0-0 <EFFECT> Once a package_0 is loaded into an airplane_0, the package_0 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-2 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-2 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-2 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-2, it is not at the location_0-0 and is at the location_0-2. </EFFECT> \n <PRECON> A package_1 can be unloaded from a truck_0 only if the package_1 is in the truck_0. </PRECON> unload package_1 from truck_0 at location_0-2 <EFFECT> Once a package_1 is unloaded from a truck_0, the package_1 is not in the truck_0 and is at the location_0-2 of the truck_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_0-0 to location_1-0 if the location_0-0 and the location_1-0 are airports and the airplane_0 is at the location_0-0. </PRECON> fly airplane_0 from location_0-0 to location_1-0 <EFFECT> Once an airplane_0 is flown from location_0-0 to location_1-0 the airplane_0 is not at the location_0-0 and is at the location_1-0. </EFFECT> \n <PRECON> A package_4 can be unloaded from an airplane_0 only if the package_4 in the airplane_0. </PRECON> unload package_4 from airplane_0 at location_1-0 <EFFECT> Once a package_4 is unloaded from an airplane_0, the package_4 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> A package_4 can be loaded into a truck_1 only if the package_4 and the truck_1 are in the same location_1-0. </PRECON> load package_4 into truck_1 at location_1-0 <EFFECT> Once a package_4 is loaded into a truck_1, the package_4 is not at the location_1-0 and is in the truck_1. </EFFECT> \n <PRECON> A package_3 can be loaded into an airplane_0 only if the package_3 and the airplane_0 are in the same location_1-0. </PRECON> load package_3 into airplane_0 at location_1-0 <EFFECT> Once a package_3 is loaded into an airplane_0, the package_3 is not at the location_1-0 and is in the airplane_0. </EFFECT> \n <PRECON> A package_0 can be unloaded from an airplane_0 only if the package_0 in the airplane_0. </PRECON> unload package_0 from airplane_0 at location_1-0 <EFFECT> Once a package_0 is unloaded from an airplane_0, the package_0 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_1 only if the package_0 and the truck_1 are in the same location_1-0. </PRECON> load package_0 into truck_1 at location_1-0 <EFFECT> Once a package_0 is loaded into a truck_1, the package_0 is not at the location_1-0 and is in the truck_1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-2 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-2 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-2 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-2, it is not at the location_1-0 and is at the location_1-2. </EFFECT> \n <PRECON> A package_3 can be unloaded from an airplane_0 only if the package_3 in the airplane_0. </PRECON> unload package_3 from airplane_0 at location_0-0 <EFFECT> Once a package_3 is unloaded from an airplane_0, the package_3 is not in the airplane_0 and is at the location_0-0 of the airplane_0. </EFFECT> WRONG \n <PRECON> A package_4 can be unloaded from a truck_1 only if the package_4 is in the truck_1. </PRECON> unload package_4 from truck_1 at location_1-2 <EFFECT> Once a package_4 is unloaded from a truck_1, the package_4 is not in the truck_1 and is at the location_1-2 of the truck_1. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_1 only if the package_0 is in the truck_1. </PRECON> unload package_0 from truck_1 at location_1-2 <EFFECT> Once a package_0 is unloaded from a truck_1, the package_0 is not in the truck_1 and is at the location_1-2 of the truck_1. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_0 is at the location_1-0. </PRECON> fly airplane_0 from location_1-0 to location_0-0 <EFFECT> Once an airplane_0 is flown from location_1-0 to location_0-0 the airplane_0 is not at the location_1-0 and is at the location_0-0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-2 to location_0-0 if the truck_0 is at the location_0-2 and both location_0-2 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-2 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-2 to location_0-0, it is not at the location_0-2 and is at the location_0-0. </EFFECT> WRONG \n <PRECON> A package_3 can be unloaded from an airplane_0 only if the package_3 in the airplane_0. </PRECON> unload package_3 from airplane_0 at location_0-0 <EFFECT> Once a package_3 is unloaded from an airplane_0, the package_3 is not in the airplane_0 and is at the location_0-0 of the airplane_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-2 to location_0-0 if the truck_0 is at the location_0-2 and both location_0-2 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-2 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-2 to location_0-0, it is not at the location_0-2 and is at the location_0-0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-2 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-2 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-2 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-2, it is not at the location_0-0 and is at the location_0-2. </EFFECT> WRONG \n <PRECON> A package_3 can be loaded into a truck_0 only if the package_3 and the truck_0 are in the same location_0-0. </PRECON> load package_3 into truck_0 at location_0-0 <EFFECT> Once a package_3 is loaded into a truck_0, the package_3 is not at the location_0-0 and is in the truck_0. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_0 only if the package_3 is in the truck_0. </PRECON> unload package_3 from truck_0 at location_0-2 <EFFECT> Once a package_3 is unloaded from a truck_0, the package_3 is not in the truck_0 and is at the location_0-2 of the truck_0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-2 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-2 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-2 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-2, it is not at the location_0-0 and is at the location_0-2. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_0 only if the package_3 is in the truck_0. </PRECON> unload package_3 from truck_0 at location_0-2 <EFFECT> Once a package_3 is unloaded from a truck_0, the package_3 is not in the truck_0 and is at the location_0-2 of the truck_0. </EFFECT> \n</PLAN>", "plan_length": 28, "raw_plan": ["(drive-truck t1 l1-1 l1-0 c1)", "(load-truck p5 t0 l0-1)", "(load-truck p4 t0 l0-1)", "(load-truck p1 t0 l0-1)", "(load-truck p0 t0 l0-1)", "(drive-truck t0 l0-1 l0-0 c0)", "(unload-truck p5 t0 l0-0)", "(unload-truck p4 t0 l0-0)", "(unload-truck p0 t0 l0-0)", "(load-airplane p4 a0 l0-0)", "(load-airplane p0 a0 l0-0)", "(drive-truck t0 l0-0 l0-2 c0)", "(unload-truck p1 t0 l0-2)", "(fly-airplane a0 l0-0 l1-0)", "(unload-airplane p4 a0 l1-0)", "(load-truck p4 t1 l1-0)", "(load-airplane p3 a0 l1-0)", "(unload-airplane p0 a0 l1-0)", "(load-truck p0 t1 l1-0)", "(drive-truck t1 l1-0 l1-2 c1)", "(unload-truck p4 t1 l1-2)", "(unload-truck p0 t1 l1-2)", "(fly-airplane a0 l1-0 l0-0)", "(unload-airplane p3 a0 l0-0)", "(drive-truck t0 l0-2 l0-0 c0)", "(load-truck p3 t0 l0-0)", "(drive-truck t0 l0-0 l0-2 c0)", "(unload-truck p3 t0 l0-2)"], "full_text_prompt": "I have to plan logistics to transport packages within cities via trucks and between cities via airplanes. Locations within a city are directly connected (trucks can move between any two such locations), and so are the cities. In each city there is exactly one truck and each city has one location that serves as an airport.\nHere are the actions that can be performed:\nLoad a package into a truck.\nLoad a package into an airplane.\nUnload a package from a truck.\nUnload a package from an airplane.\nDrive a truck from one location to another location.\nFly an airplane from one city to another city.\nThe following are the restrictions on the actions:\nA package can be loaded into a truck only if the package and the truck are in the same location.\nOnce a package is loaded into a truck, the package is not at the location and is in the truck.\nA package can be loaded into an airplane only if the package and the airplane are in the same location.\nOnce a package is loaded into an airplane, the package is not at the location and is in the airplane.\nA package can be unloaded from a truck only if the package is in the truck.\nOnce a package is unloaded from a truck, the package is not in the truck and is at the location of the truck.\nA package can be unloaded from an airplane only if the package in the airplane.\nOnce a package is unloaded from an airplane, the package is not in the airplane and is at the location of the airplane.\nA truck can be driven from one location to another if the truck is at the from-location and both from-location and to-location are locations in the same city.\nOnce a truck is driven from one location to another, it is not at the from-location and is at the to-location.\nAn airplane can be flown from one city to another if the from-location and the to-location are airports and the airplane is at the from-location.\nOnce an airplane is flown from one city to another the airplane is not at the from-location and is at the to-location.As initial conditions I have that, truck_1 is at location_1-1, , , location_1-1 is in the city city_1, location_0-0 is an airport, , , location_0-1 is in the city city_0, , truck_0 is at location_0-1, , package_3 is at location_1-0, location_0-0 is in the city city_0, , location_0-2 is in the city city_0, location_1-2 is in the city city_1, , , , , , package_4 is at location_0-1, package_5 is at location_0-1, package_2 is at location_1-0, package_1 is at location_0-1, , , , airplane_0 is at location_0-0, location_1-0 is an airport, , location_1-0 is in the city city_1, package_0 is at location_0-1, .My goal is to have that package_1 is at location_0-2, package_3 is at location_0-2, package_0 is at location_1-2, package_2 is at location_1-0, package_5 is at location_0-0, package_4 is at location_1-2.My plan is as follows:\n<PLAN>\n <PRECON> A package_4 can be unloaded from a truck_0 only if the package_4 is in the truck_0. </PRECON> unload package_4 from truck_0 at location_0-0 <EFFECT> Once a package_4 is unloaded from a truck_0, the package_4 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-2 to location_0-0 if the truck_0 is at the location_0-2 and both location_0-2 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-2 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-2 to location_0-0, it is not at the location_0-2 and is at the location_0-0. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> \n <PRECON> A package_5 can be loaded into a truck_0 only if the package_5 and the truck_0 are in the same location_0-1. </PRECON> load package_5 into truck_0 at location_0-1 <EFFECT> Once a package_5 is loaded into a truck_0, the package_5 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A package_4 can be loaded into a truck_0 only if the package_4 and the truck_0 are in the same location_0-1. </PRECON> load package_4 into truck_0 at location_0-1 <EFFECT> Once a package_4 is loaded into a truck_0, the package_4 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A package_4 can be loaded into an airplane_0 only if the package_4 and the airplane_0 are in the same location_0-0. </PRECON> load package_4 into airplane_0 at location_0-0 <EFFECT> Once a package_4 is loaded into an airplane_0, the package_4 is not at the location_0-0 and is in the airplane_0. </EFFECT> WRONG \n <PRECON> A package_1 can be loaded into a truck_0 only if the package_1 and the truck_0 are in the same location_0-1. </PRECON> load package_1 into truck_0 at location_0-1 <EFFECT> Once a package_1 is loaded into a truck_0, the package_1 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_0 only if the package_0 and the truck_0 are in the same location_0-1. </PRECON> load package_0 into truck_0 at location_0-1 <EFFECT> Once a package_0 is loaded into a truck_0, the package_0 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A package_0 can be unloaded from an airplane_0 only if the package_0 in the airplane_0. </PRECON> unload package_0 from airplane_0 at location_1-0 <EFFECT> Once a package_0 is unloaded from an airplane_0, the package_0 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-1 to location_0-0 if the truck_0 is at the location_0-1 and both location_0-1 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-1 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-1 to location_0-0, it is not at the location_0-1 and is at the location_0-0. </EFFECT> \n <PRECON> A package_5 can be unloaded from a truck_0 only if the package_5 is in the truck_0. </PRECON> unload package_5 from truck_0 at location_0-0 <EFFECT> Once a package_5 is unloaded from a truck_0, the package_5 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A package_4 can be loaded into an airplane_0 only if the package_4 and the airplane_0 are in the same location_0-0. </PRECON> load package_4 into airplane_0 at location_0-0 <EFFECT> Once a package_4 is loaded into an airplane_0, the package_4 is not at the location_0-0 and is in the airplane_0. </EFFECT> WRONG \n <PRECON> A package_4 can be unloaded from a truck_0 only if the package_4 is in the truck_0. </PRECON> unload package_4 from truck_0 at location_0-0 <EFFECT> Once a package_4 is unloaded from a truck_0, the package_4 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_0 only if the package_0 is in the truck_0. </PRECON> unload package_0 from truck_0 at location_0-0 <EFFECT> Once a package_0 is unloaded from a truck_0, the package_0 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A package_4 can be loaded into an airplane_0 only if the package_4 and the airplane_0 are in the same location_0-0. </PRECON> load package_4 into airplane_0 at location_0-0 <EFFECT> Once a package_4 is loaded into an airplane_0, the package_4 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> A package_0 can be loaded into an airplane_0 only if the package_0 and the airplane_0 are in the same location_0-0. </PRECON> load package_0 into airplane_0 at location_0-0 <EFFECT> Once a package_0 is loaded into an airplane_0, the package_0 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-2 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-2 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-2 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-2, it is not at the location_0-0 and is at the location_0-2. </EFFECT> \n <PRECON> A package_1 can be unloaded from a truck_0 only if the package_1 is in the truck_0. </PRECON> unload package_1 from truck_0 at location_0-2 <EFFECT> Once a package_1 is unloaded from a truck_0, the package_1 is not in the truck_0 and is at the location_0-2 of the truck_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_0-0 to location_1-0 if the location_0-0 and the location_1-0 are airports and the airplane_0 is at the location_0-0. </PRECON> fly airplane_0 from location_0-0 to location_1-0 <EFFECT> Once an airplane_0 is flown from location_0-0 to location_1-0 the airplane_0 is not at the location_0-0 and is at the location_1-0. </EFFECT> \n <PRECON> A package_4 can be unloaded from an airplane_0 only if the package_4 in the airplane_0. </PRECON> unload package_4 from airplane_0 at location_1-0 <EFFECT> Once a package_4 is unloaded from an airplane_0, the package_4 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> A package_4 can be loaded into a truck_1 only if the package_4 and the truck_1 are in the same location_1-0. </PRECON> load package_4 into truck_1 at location_1-0 <EFFECT> Once a package_4 is loaded into a truck_1, the package_4 is not at the location_1-0 and is in the truck_1. </EFFECT> \n <PRECON> A package_3 can be loaded into an airplane_0 only if the package_3 and the airplane_0 are in the same location_1-0. </PRECON> load package_3 into airplane_0 at location_1-0 <EFFECT> Once a package_3 is loaded into an airplane_0, the package_3 is not at the location_1-0 and is in the airplane_0. </EFFECT> \n <PRECON> A package_0 can be unloaded from an airplane_0 only if the package_0 in the airplane_0. </PRECON> unload package_0 from airplane_0 at location_1-0 <EFFECT> Once a package_0 is unloaded from an airplane_0, the package_0 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_1 only if the package_0 and the truck_1 are in the same location_1-0. </PRECON> load package_0 into truck_1 at location_1-0 <EFFECT> Once a package_0 is loaded into a truck_1, the package_0 is not at the location_1-0 and is in the truck_1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-2 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-2 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-2 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-2, it is not at the location_1-0 and is at the location_1-2. </EFFECT> \n <PRECON> A package_3 can be unloaded from an airplane_0 only if the package_3 in the airplane_0. </PRECON> unload package_3 from airplane_0 at location_0-0 <EFFECT> Once a package_3 is unloaded from an airplane_0, the package_3 is not in the airplane_0 and is at the location_0-0 of the airplane_0. </EFFECT> WRONG \n <PRECON> A package_4 can be unloaded from a truck_1 only if the package_4 is in the truck_1. </PRECON> unload package_4 from truck_1 at location_1-2 <EFFECT> Once a package_4 is unloaded from a truck_1, the package_4 is not in the truck_1 and is at the location_1-2 of the truck_1. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_1 only if the package_0 is in the truck_1. </PRECON> unload package_0 from truck_1 at location_1-2 <EFFECT> Once a package_0 is unloaded from a truck_1, the package_0 is not in the truck_1 and is at the location_1-2 of the truck_1. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_0 is at the location_1-0. </PRECON> fly airplane_0 from location_1-0 to location_0-0 <EFFECT> Once an airplane_0 is flown from location_1-0 to location_0-0 the airplane_0 is not at the location_1-0 and is at the location_0-0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-2 to location_0-0 if the truck_0 is at the location_0-2 and both location_0-2 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-2 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-2 to location_0-0, it is not at the location_0-2 and is at the location_0-0. </EFFECT> WRONG \n <PRECON> A package_3 can be unloaded from an airplane_0 only if the package_3 in the airplane_0. </PRECON> unload package_3 from airplane_0 at location_0-0 <EFFECT> Once a package_3 is unloaded from an airplane_0, the package_3 is not in the airplane_0 and is at the location_0-0 of the airplane_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-2 to location_0-0 if the truck_0 is at the location_0-2 and both location_0-2 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-2 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-2 to location_0-0, it is not at the location_0-2 and is at the location_0-0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-2 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-2 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-2 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-2, it is not at the location_0-0 and is at the location_0-2. </EFFECT> WRONG \n <PRECON> A package_3 can be loaded into a truck_0 only if the package_3 and the truck_0 are in the same location_0-0. </PRECON> load package_3 into truck_0 at location_0-0 <EFFECT> Once a package_3 is loaded into a truck_0, the package_3 is not at the location_0-0 and is in the truck_0. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_0 only if the package_3 is in the truck_0. </PRECON> unload package_3 from truck_0 at location_0-2 <EFFECT> Once a package_3 is unloaded from a truck_0, the package_3 is not in the truck_0 and is at the location_0-2 of the truck_0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-2 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-2 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-2 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-2, it is not at the location_0-0 and is at the location_0-2. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_0 only if the package_3 is in the truck_0. </PRECON> unload package_3 from truck_0 at location_0-2 <EFFECT> Once a package_3 is unloaded from a truck_0, the package_3 is not in the truck_0 and is at the location_0-2 of the truck_0. </EFFECT> \n</PLAN>"}
{"domain": "logistics", "instance_id": "40", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan logistics to transport packages within cities via trucks and between cities via airplanes. Locations within a city are directly connected (trucks can move between any two such locations), and so are the cities. In each city there is exactly one truck and each city has one location that serves as an airport.\nHere are the actions that can be performed:\nLoad a package into a truck.\nLoad a package into an airplane.\nUnload a package from a truck.\nUnload a package from an airplane.\nDrive a truck from one location to another location.\nFly an airplane from one city to another city.\nThe following are the restrictions on the actions:\nA package can be loaded into a truck only if the package and the truck are in the same location.\nOnce a package is loaded into a truck, the package is not at the location and is in the truck.\nA package can be loaded into an airplane only if the package and the airplane are in the same location.\nOnce a package is loaded into an airplane, the package is not at the location and is in the airplane.\nA package can be unloaded from a truck only if the package is in the truck.\nOnce a package is unloaded from a truck, the package is not in the truck and is at the location of the truck.\nA package can be unloaded from an airplane only if the package in the airplane.\nOnce a package is unloaded from an airplane, the package is not in the airplane and is at the location of the airplane.\nA truck can be driven from one location to another if the truck is at the from-location and both from-location and to-location are locations in the same city.\nOnce a truck is driven from one location to another, it is not at the from-location and is at the to-location.\nAn airplane can be flown from one city to another if the from-location and the to-location are airports and the airplane is at the from-location.\nOnce an airplane is flown from one city to another the airplane is not at the from-location and is at the to-location.", "input": "As initial conditions I have that, location_4-0 is in the city city_4, location_1-5 is in the city city_1, location_2-2 is in the city city_2, , , location_4-1 is in the city city_4, location_1-0 is an airport, location_2-1 is in the city city_2, , , , , location_2-5 is in the city city_2, location_4-5 is in the city city_4, , location_1-3 is in the city city_1, , , airplane_0 is at location_0-0, location_0-0 is an airport, location_3-4 is in the city city_3, location_4-0 is an airport, location_1-0 is in the city city_1, , , truck_2 is at location_2-5, location_0-3 is in the city city_0, , location_2-3 is in the city city_2, , , location_3-5 is in the city city_3, , location_4-3 is in the city city_4, , location_0-0 is in the city city_0, location_0-4 is in the city city_0, truck_0 is at location_0-2, , , , package_3 is at location_0-0, , , , location_0-2 is in the city city_0, , , , location_3-0 is in the city city_3, , location_1-4 is in the city city_1, , location_2-4 is in the city city_2, , , , location_2-0 is in the city city_2, , , truck_4 is at location_4-3, , , location_3-1 is in the city city_3, location_4-2 is in the city city_4, , location_3-3 is in the city city_3, location_3-2 is in the city city_3, , package_1 is at location_0-2, package_0 is at location_0-1, , location_0-1 is in the city city_0, truck_3 is at location_3-1, location_1-2 is in the city city_1, , , location_3-0 is an airport, location_2-0 is an airport, , location_0-5 is in the city city_0, location_1-1 is in the city city_1, , package_2 is at location_0-4, , truck_1 is at location_1-0, , , location_4-4 is in the city city_4, .\nMy goal is to have that package_1 is at location_0-3, package_0 is at location_4-0, package_2 is at location_1-1, package_3 is at location_2-5.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A package_1 can be loaded into a truck_0 only if the package_1 and the truck_0 are in the same location_0-2. </PRECON> load package_1 into truck_0 at location_0-2 <EFFECT> Once a package_1 is loaded into a truck_0, the package_1 is not at the location_0-2 and is in the truck_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-2 to location_0-0 if the truck_0 is at the location_0-2 and both location_0-2 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-2 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-2 to location_0-0, it is not at the location_0-2 and is at the location_0-0. </EFFECT> \n <PRECON> A package_3 can be loaded into an airplane_0 only if the package_3 and the airplane_0 are in the same location_0-0. </PRECON> load package_3 into airplane_0 at location_0-0 <EFFECT> Once a package_3 is loaded into an airplane_0, the package_3 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-1 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-1 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-1 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-1, it is not at the location_0-0 and is at the location_0-1. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-4 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-4 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-4 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-4, it is not at the location_0-0 and is at the location_0-4. </EFFECT> WRONG \n <PRECON> A package_0 can be loaded into a truck_0 only if the package_0 and the truck_0 are in the same location_0-1. </PRECON> load package_0 into truck_0 at location_0-1 <EFFECT> Once a package_0 is loaded into a truck_0, the package_0 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-1 to location_0-0 if the truck_0 is at the location_0-1 and both location_0-1 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-1 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-1 to location_0-0, it is not at the location_0-1 and is at the location_0-0. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_0 only if the package_0 is in the truck_0. </PRECON> unload package_0 from truck_0 at location_0-0 <EFFECT> Once a package_0 is unloaded from a truck_0, the package_0 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A package_2 can be loaded into an airplane_0 only if the package_2 and the airplane_0 are in the same location_0-0. </PRECON> load package_2 into airplane_0 at location_0-0 <EFFECT> Once a package_2 is loaded into an airplane_0, the package_2 is not at the location_0-0 and is in the airplane_0. </EFFECT> WRONG \n <PRECON> A package_0 can be loaded into an airplane_0 only if the package_0 and the airplane_0 are in the same location_0-0. </PRECON> load package_0 into airplane_0 at location_0-0 <EFFECT> Once a package_0 is loaded into an airplane_0, the package_0 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-3 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-3 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-3 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-3, it is not at the location_0-0 and is at the location_0-3. </EFFECT> \n <PRECON> A package_1 can be unloaded from a truck_0 only if the package_1 is in the truck_0. </PRECON> unload package_1 from truck_0 at location_0-3 <EFFECT> Once a package_1 is unloaded from a truck_0, the package_1 is not in the truck_0 and is at the location_0-3 of the truck_0. </EFFECT> \n <PRECON> A package_3 can be unloaded from an airplane_0 only if the package_3 in the airplane_0. </PRECON> unload package_3 from airplane_0 at location_2-0 <EFFECT> Once a package_3 is unloaded from an airplane_0, the package_3 is not in the airplane_0 and is at the location_2-0 of the airplane_0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-3 to location_0-0 if the truck_0 is at the location_0-3 and both location_0-3 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-3 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-3 to location_0-0, it is not at the location_0-3 and is at the location_0-0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-4 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-4 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-4 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-4, it is not at the location_0-0 and is at the location_0-4. </EFFECT> \n <PRECON> A package_2 can be loaded into a truck_0 only if the package_2 and the truck_0 are in the same location_0-4. </PRECON> load package_2 into truck_0 at location_0-4 <EFFECT> Once a package_2 is loaded into a truck_0, the package_2 is not at the location_0-4 and is in the truck_0. </EFFECT> \n <PRECON> A truck_2 can be driven from location_2-5 to location_2-0 if the truck_2 is at the location_2-5 and both location_2-5 and location_2-0 are locations in the same city_2. </PRECON> drive truck_2 from location_2-5 to location_2-0 in city_2 <EFFECT> Once a truck_2 is driven from location_2-5 to location_2-0, it is not at the location_2-5 and is at the location_2-0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-4 to location_0-0 if the truck_0 is at the location_0-4 and both location_0-4 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-4 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-4 to location_0-0, it is not at the location_0-4 and is at the location_0-0. </EFFECT> \n <PRECON> A package_2 can be unloaded from a truck_0 only if the package_2 is in the truck_0. </PRECON> unload package_2 from truck_0 at location_0-0 <EFFECT> Once a package_2 is unloaded from a truck_0, the package_2 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_2-0 to location_4-0 if the location_2-0 and the location_4-0 are airports and the airplane_0 is at the location_2-0. </PRECON> fly airplane_0 from location_2-0 to location_4-0 <EFFECT> Once an airplane_0 is flown from location_2-0 to location_4-0 the airplane_0 is not at the location_2-0 and is at the location_4-0. </EFFECT> WRONG \n <PRECON> A package_2 can be loaded into an airplane_0 only if the package_2 and the airplane_0 are in the same location_0-0. </PRECON> load package_2 into airplane_0 at location_0-0 <EFFECT> Once a package_2 is loaded into an airplane_0, the package_2 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_0-0 to location_1-0 if the location_0-0 and the location_1-0 are airports and the airplane_0 is at the location_0-0. </PRECON> fly airplane_0 from location_0-0 to location_1-0 <EFFECT> Once an airplane_0 is flown from location_0-0 to location_1-0 the airplane_0 is not at the location_0-0 and is at the location_1-0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_1-0 to location_2-0 if the location_1-0 and the location_2-0 are airports and the airplane_0 is at the location_1-0. </PRECON> fly airplane_0 from location_1-0 to location_2-0 <EFFECT> Once an airplane_0 is flown from location_1-0 to location_2-0 the airplane_0 is not at the location_1-0 and is at the location_2-0. </EFFECT> WRONG \n <PRECON> A package_2 can be unloaded from an airplane_0 only if the package_2 in the airplane_0. </PRECON> unload package_2 from airplane_0 at location_1-0 <EFFECT> Once a package_2 is unloaded from an airplane_0, the package_2 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> A package_2 can be loaded into a truck_1 only if the package_2 and the truck_1 are in the same location_1-0. </PRECON> load package_2 into truck_1 at location_1-0 <EFFECT> Once a package_2 is loaded into a truck_1, the package_2 is not at the location_1-0 and is in the truck_1. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at location_2-5 <EFFECT> Once a package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 and is at the location_2-5 of the truck_2. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-1 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-1, it is not at the location_1-0 and is at the location_1-1. </EFFECT> \n <PRECON> A package_2 can be unloaded from a truck_1 only if the package_2 is in the truck_1. </PRECON> unload package_2 from truck_1 at location_1-1 <EFFECT> Once a package_2 is unloaded from a truck_1, the package_2 is not in the truck_1 and is at the location_1-1 of the truck_1. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_1-0 to location_2-0 if the location_1-0 and the location_2-0 are airports and the airplane_0 is at the location_1-0. </PRECON> fly airplane_0 from location_1-0 to location_2-0 <EFFECT> Once an airplane_0 is flown from location_1-0 to location_2-0 the airplane_0 is not at the location_1-0 and is at the location_2-0. </EFFECT> \n <PRECON> A package_3 can be unloaded from an airplane_0 only if the package_3 in the airplane_0. </PRECON> unload package_3 from airplane_0 at location_2-0 <EFFECT> Once a package_3 is unloaded from an airplane_0, the package_3 is not in the airplane_0 and is at the location_2-0 of the airplane_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_2-0 to location_4-0 if the location_2-0 and the location_4-0 are airports and the airplane_0 is at the location_2-0. </PRECON> fly airplane_0 from location_2-0 to location_4-0 <EFFECT> Once an airplane_0 is flown from location_2-0 to location_4-0 the airplane_0 is not at the location_2-0 and is at the location_4-0. </EFFECT> \n <PRECON> A package_0 can be unloaded from an airplane_0 only if the package_0 in the airplane_0. </PRECON> unload package_0 from airplane_0 at location_4-0 <EFFECT> Once a package_0 is unloaded from an airplane_0, the package_0 is not in the airplane_0 and is at the location_4-0 of the airplane_0. </EFFECT> \n <PRECON> A truck_2 can be driven from location_2-5 to location_2-0 if the truck_2 is at the location_2-5 and both location_2-5 and location_2-0 are locations in the same city_2. </PRECON> drive truck_2 from location_2-5 to location_2-0 in city_2 <EFFECT> Once a truck_2 is driven from location_2-5 to location_2-0, it is not at the location_2-5 and is at the location_2-0. </EFFECT> \n <PRECON> A package_3 can be loaded into a truck_2 only if the package_3 and the truck_2 are in the same location_2-0. </PRECON> load package_3 into truck_2 at location_2-0 <EFFECT> Once a package_3 is loaded into a truck_2, the package_3 is not at the location_2-0 and is in the truck_2. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at location_2-5 <EFFECT> Once a package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 and is at the location_2-5 of the truck_2. </EFFECT> WRONG \n <PRECON> A truck_2 can be driven from location_2-0 to location_2-5 if the truck_2 is at the location_2-0 and both location_2-0 and location_2-5 are locations in the same city_2. </PRECON> drive truck_2 from location_2-0 to location_2-5 in city_2 <EFFECT> Once a truck_2 is driven from location_2-0 to location_2-5, it is not at the location_2-0 and is at the location_2-5. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at location_2-5 <EFFECT> Once a package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 and is at the location_2-5 of the truck_2. </EFFECT> \n</PLAN>", "plan_length": 29, "raw_plan": ["(load-truck p1 t0 l0-2)", "(drive-truck t0 l0-2 l0-0 c0)", "(load-airplane p3 a0 l0-0)", "(drive-truck t0 l0-0 l0-1 c0)", "(load-truck p0 t0 l0-1)", "(drive-truck t0 l0-1 l0-0 c0)", "(unload-truck p0 t0 l0-0)", "(load-airplane p0 a0 l0-0)", "(drive-truck t0 l0-0 l0-3 c0)", "(unload-truck p1 t0 l0-3)", "(drive-truck t0 l0-3 l0-0 c0)", "(drive-truck t0 l0-0 l0-4 c0)", "(load-truck p2 t0 l0-4)", "(drive-truck t0 l0-4 l0-0 c0)", "(unload-truck p2 t0 l0-0)", "(load-airplane p2 a0 l0-0)", "(fly-airplane a0 l0-0 l1-0)", "(unload-airplane p2 a0 l1-0)", "(load-truck p2 t1 l1-0)", "(drive-truck t1 l1-0 l1-1 c1)", "(unload-truck p2 t1 l1-1)", "(fly-airplane a0 l1-0 l2-0)", "(unload-airplane p3 a0 l2-0)", "(fly-airplane a0 l2-0 l4-0)", "(unload-airplane p0 a0 l4-0)", "(drive-truck t2 l2-5 l2-0 c2)", "(load-truck p3 t2 l2-0)", "(drive-truck t2 l2-0 l2-5 c2)", "(unload-truck p3 t2 l2-5)"], "full_text_prompt": "I have to plan logistics to transport packages within cities via trucks and between cities via airplanes. Locations within a city are directly connected (trucks can move between any two such locations), and so are the cities. In each city there is exactly one truck and each city has one location that serves as an airport.\nHere are the actions that can be performed:\nLoad a package into a truck.\nLoad a package into an airplane.\nUnload a package from a truck.\nUnload a package from an airplane.\nDrive a truck from one location to another location.\nFly an airplane from one city to another city.\nThe following are the restrictions on the actions:\nA package can be loaded into a truck only if the package and the truck are in the same location.\nOnce a package is loaded into a truck, the package is not at the location and is in the truck.\nA package can be loaded into an airplane only if the package and the airplane are in the same location.\nOnce a package is loaded into an airplane, the package is not at the location and is in the airplane.\nA package can be unloaded from a truck only if the package is in the truck.\nOnce a package is unloaded from a truck, the package is not in the truck and is at the location of the truck.\nA package can be unloaded from an airplane only if the package in the airplane.\nOnce a package is unloaded from an airplane, the package is not in the airplane and is at the location of the airplane.\nA truck can be driven from one location to another if the truck is at the from-location and both from-location and to-location are locations in the same city.\nOnce a truck is driven from one location to another, it is not at the from-location and is at the to-location.\nAn airplane can be flown from one city to another if the from-location and the to-location are airports and the airplane is at the from-location.\nOnce an airplane is flown from one city to another the airplane is not at the from-location and is at the to-location.As initial conditions I have that, location_4-0 is in the city city_4, location_1-5 is in the city city_1, location_2-2 is in the city city_2, , , location_4-1 is in the city city_4, location_1-0 is an airport, location_2-1 is in the city city_2, , , , , location_2-5 is in the city city_2, location_4-5 is in the city city_4, , location_1-3 is in the city city_1, , , airplane_0 is at location_0-0, location_0-0 is an airport, location_3-4 is in the city city_3, location_4-0 is an airport, location_1-0 is in the city city_1, , , truck_2 is at location_2-5, location_0-3 is in the city city_0, , location_2-3 is in the city city_2, , , location_3-5 is in the city city_3, , location_4-3 is in the city city_4, , location_0-0 is in the city city_0, location_0-4 is in the city city_0, truck_0 is at location_0-2, , , , package_3 is at location_0-0, , , , location_0-2 is in the city city_0, , , , location_3-0 is in the city city_3, , location_1-4 is in the city city_1, , location_2-4 is in the city city_2, , , , location_2-0 is in the city city_2, , , truck_4 is at location_4-3, , , location_3-1 is in the city city_3, location_4-2 is in the city city_4, , location_3-3 is in the city city_3, location_3-2 is in the city city_3, , package_1 is at location_0-2, package_0 is at location_0-1, , location_0-1 is in the city city_0, truck_3 is at location_3-1, location_1-2 is in the city city_1, , , location_3-0 is an airport, location_2-0 is an airport, , location_0-5 is in the city city_0, location_1-1 is in the city city_1, , package_2 is at location_0-4, , truck_1 is at location_1-0, , , location_4-4 is in the city city_4, .My goal is to have that package_1 is at location_0-3, package_0 is at location_4-0, package_2 is at location_1-1, package_3 is at location_2-5.My plan is as follows:\n<PLAN>\n <PRECON> A package_1 can be loaded into a truck_0 only if the package_1 and the truck_0 are in the same location_0-2. </PRECON> load package_1 into truck_0 at location_0-2 <EFFECT> Once a package_1 is loaded into a truck_0, the package_1 is not at the location_0-2 and is in the truck_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-2 to location_0-0 if the truck_0 is at the location_0-2 and both location_0-2 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-2 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-2 to location_0-0, it is not at the location_0-2 and is at the location_0-0. </EFFECT> \n <PRECON> A package_3 can be loaded into an airplane_0 only if the package_3 and the airplane_0 are in the same location_0-0. </PRECON> load package_3 into airplane_0 at location_0-0 <EFFECT> Once a package_3 is loaded into an airplane_0, the package_3 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-1 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-1 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-1 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-1, it is not at the location_0-0 and is at the location_0-1. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-4 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-4 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-4 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-4, it is not at the location_0-0 and is at the location_0-4. </EFFECT> WRONG \n <PRECON> A package_0 can be loaded into a truck_0 only if the package_0 and the truck_0 are in the same location_0-1. </PRECON> load package_0 into truck_0 at location_0-1 <EFFECT> Once a package_0 is loaded into a truck_0, the package_0 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-1 to location_0-0 if the truck_0 is at the location_0-1 and both location_0-1 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-1 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-1 to location_0-0, it is not at the location_0-1 and is at the location_0-0. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_0 only if the package_0 is in the truck_0. </PRECON> unload package_0 from truck_0 at location_0-0 <EFFECT> Once a package_0 is unloaded from a truck_0, the package_0 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A package_2 can be loaded into an airplane_0 only if the package_2 and the airplane_0 are in the same location_0-0. </PRECON> load package_2 into airplane_0 at location_0-0 <EFFECT> Once a package_2 is loaded into an airplane_0, the package_2 is not at the location_0-0 and is in the airplane_0. </EFFECT> WRONG \n <PRECON> A package_0 can be loaded into an airplane_0 only if the package_0 and the airplane_0 are in the same location_0-0. </PRECON> load package_0 into airplane_0 at location_0-0 <EFFECT> Once a package_0 is loaded into an airplane_0, the package_0 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-3 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-3 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-3 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-3, it is not at the location_0-0 and is at the location_0-3. </EFFECT> \n <PRECON> A package_1 can be unloaded from a truck_0 only if the package_1 is in the truck_0. </PRECON> unload package_1 from truck_0 at location_0-3 <EFFECT> Once a package_1 is unloaded from a truck_0, the package_1 is not in the truck_0 and is at the location_0-3 of the truck_0. </EFFECT> \n <PRECON> A package_3 can be unloaded from an airplane_0 only if the package_3 in the airplane_0. </PRECON> unload package_3 from airplane_0 at location_2-0 <EFFECT> Once a package_3 is unloaded from an airplane_0, the package_3 is not in the airplane_0 and is at the location_2-0 of the airplane_0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-3 to location_0-0 if the truck_0 is at the location_0-3 and both location_0-3 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-3 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-3 to location_0-0, it is not at the location_0-3 and is at the location_0-0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-4 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-4 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-4 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-4, it is not at the location_0-0 and is at the location_0-4. </EFFECT> \n <PRECON> A package_2 can be loaded into a truck_0 only if the package_2 and the truck_0 are in the same location_0-4. </PRECON> load package_2 into truck_0 at location_0-4 <EFFECT> Once a package_2 is loaded into a truck_0, the package_2 is not at the location_0-4 and is in the truck_0. </EFFECT> \n <PRECON> A truck_2 can be driven from location_2-5 to location_2-0 if the truck_2 is at the location_2-5 and both location_2-5 and location_2-0 are locations in the same city_2. </PRECON> drive truck_2 from location_2-5 to location_2-0 in city_2 <EFFECT> Once a truck_2 is driven from location_2-5 to location_2-0, it is not at the location_2-5 and is at the location_2-0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-4 to location_0-0 if the truck_0 is at the location_0-4 and both location_0-4 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-4 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-4 to location_0-0, it is not at the location_0-4 and is at the location_0-0. </EFFECT> \n <PRECON> A package_2 can be unloaded from a truck_0 only if the package_2 is in the truck_0. </PRECON> unload package_2 from truck_0 at location_0-0 <EFFECT> Once a package_2 is unloaded from a truck_0, the package_2 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_2-0 to location_4-0 if the location_2-0 and the location_4-0 are airports and the airplane_0 is at the location_2-0. </PRECON> fly airplane_0 from location_2-0 to location_4-0 <EFFECT> Once an airplane_0 is flown from location_2-0 to location_4-0 the airplane_0 is not at the location_2-0 and is at the location_4-0. </EFFECT> WRONG \n <PRECON> A package_2 can be loaded into an airplane_0 only if the package_2 and the airplane_0 are in the same location_0-0. </PRECON> load package_2 into airplane_0 at location_0-0 <EFFECT> Once a package_2 is loaded into an airplane_0, the package_2 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_0-0 to location_1-0 if the location_0-0 and the location_1-0 are airports and the airplane_0 is at the location_0-0. </PRECON> fly airplane_0 from location_0-0 to location_1-0 <EFFECT> Once an airplane_0 is flown from location_0-0 to location_1-0 the airplane_0 is not at the location_0-0 and is at the location_1-0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_1-0 to location_2-0 if the location_1-0 and the location_2-0 are airports and the airplane_0 is at the location_1-0. </PRECON> fly airplane_0 from location_1-0 to location_2-0 <EFFECT> Once an airplane_0 is flown from location_1-0 to location_2-0 the airplane_0 is not at the location_1-0 and is at the location_2-0. </EFFECT> WRONG \n <PRECON> A package_2 can be unloaded from an airplane_0 only if the package_2 in the airplane_0. </PRECON> unload package_2 from airplane_0 at location_1-0 <EFFECT> Once a package_2 is unloaded from an airplane_0, the package_2 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> A package_2 can be loaded into a truck_1 only if the package_2 and the truck_1 are in the same location_1-0. </PRECON> load package_2 into truck_1 at location_1-0 <EFFECT> Once a package_2 is loaded into a truck_1, the package_2 is not at the location_1-0 and is in the truck_1. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at location_2-5 <EFFECT> Once a package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 and is at the location_2-5 of the truck_2. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-1 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-1, it is not at the location_1-0 and is at the location_1-1. </EFFECT> \n <PRECON> A package_2 can be unloaded from a truck_1 only if the package_2 is in the truck_1. </PRECON> unload package_2 from truck_1 at location_1-1 <EFFECT> Once a package_2 is unloaded from a truck_1, the package_2 is not in the truck_1 and is at the location_1-1 of the truck_1. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_1-0 to location_2-0 if the location_1-0 and the location_2-0 are airports and the airplane_0 is at the location_1-0. </PRECON> fly airplane_0 from location_1-0 to location_2-0 <EFFECT> Once an airplane_0 is flown from location_1-0 to location_2-0 the airplane_0 is not at the location_1-0 and is at the location_2-0. </EFFECT> \n <PRECON> A package_3 can be unloaded from an airplane_0 only if the package_3 in the airplane_0. </PRECON> unload package_3 from airplane_0 at location_2-0 <EFFECT> Once a package_3 is unloaded from an airplane_0, the package_3 is not in the airplane_0 and is at the location_2-0 of the airplane_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_2-0 to location_4-0 if the location_2-0 and the location_4-0 are airports and the airplane_0 is at the location_2-0. </PRECON> fly airplane_0 from location_2-0 to location_4-0 <EFFECT> Once an airplane_0 is flown from location_2-0 to location_4-0 the airplane_0 is not at the location_2-0 and is at the location_4-0. </EFFECT> \n <PRECON> A package_0 can be unloaded from an airplane_0 only if the package_0 in the airplane_0. </PRECON> unload package_0 from airplane_0 at location_4-0 <EFFECT> Once a package_0 is unloaded from an airplane_0, the package_0 is not in the airplane_0 and is at the location_4-0 of the airplane_0. </EFFECT> \n <PRECON> A truck_2 can be driven from location_2-5 to location_2-0 if the truck_2 is at the location_2-5 and both location_2-5 and location_2-0 are locations in the same city_2. </PRECON> drive truck_2 from location_2-5 to location_2-0 in city_2 <EFFECT> Once a truck_2 is driven from location_2-5 to location_2-0, it is not at the location_2-5 and is at the location_2-0. </EFFECT> \n <PRECON> A package_3 can be loaded into a truck_2 only if the package_3 and the truck_2 are in the same location_2-0. </PRECON> load package_3 into truck_2 at location_2-0 <EFFECT> Once a package_3 is loaded into a truck_2, the package_3 is not at the location_2-0 and is in the truck_2. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at location_2-5 <EFFECT> Once a package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 and is at the location_2-5 of the truck_2. </EFFECT> WRONG \n <PRECON> A truck_2 can be driven from location_2-0 to location_2-5 if the truck_2 is at the location_2-0 and both location_2-0 and location_2-5 are locations in the same city_2. </PRECON> drive truck_2 from location_2-0 to location_2-5 in city_2 <EFFECT> Once a truck_2 is driven from location_2-0 to location_2-5, it is not at the location_2-0 and is at the location_2-5. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at location_2-5 <EFFECT> Once a package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 and is at the location_2-5 of the truck_2. </EFFECT> \n</PLAN>"}
{"domain": "logistics", "instance_id": "160", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan logistics to transport packages within cities via trucks and between cities via airplanes. Locations within a city are directly connected (trucks can move between any two such locations), and so are the cities. In each city there is exactly one truck and each city has one location that serves as an airport.\nHere are the actions that can be performed:\nLoad a package into a truck.\nLoad a package into an airplane.\nUnload a package from a truck.\nUnload a package from an airplane.\nDrive a truck from one location to another location.\nFly an airplane from one city to another city.\nThe following are the restrictions on the actions:\nA package can be loaded into a truck only if the package and the truck are in the same location.\nOnce a package is loaded into a truck, the package is not at the location and is in the truck.\nA package can be loaded into an airplane only if the package and the airplane are in the same location.\nOnce a package is loaded into an airplane, the package is not at the location and is in the airplane.\nA package can be unloaded from a truck only if the package is in the truck.\nOnce a package is unloaded from a truck, the package is not in the truck and is at the location of the truck.\nA package can be unloaded from an airplane only if the package in the airplane.\nOnce a package is unloaded from an airplane, the package is not in the airplane and is at the location of the airplane.\nA truck can be driven from one location to another if the truck is at the from-location and both from-location and to-location are locations in the same city.\nOnce a truck is driven from one location to another, it is not at the from-location and is at the to-location.\nAn airplane can be flown from one city to another if the from-location and the to-location are airports and the airplane is at the from-location.\nOnce an airplane is flown from one city to another the airplane is not at the from-location and is at the to-location.", "input": "As initial conditions I have that, , location_0-1 is in the city city_0, location_1-1 is in the city city_1, , airplane_2 is at location_1-0, , package_5 is at location_2-1, location_1-0 is in the city city_1, location_0-0 is an airport, , , airplane_4 is at location_1-0, , , package_7 is at location_0-0, , , truck_0 is at location_0-1, , truck_1 is at location_1-1, location_2-1 is in the city city_2, truck_2 is at location_2-1, airplane_0 is at location_2-0, , package_4 is at location_0-1, , , , location_2-0 is in the city city_2, , , package_2 is at location_2-1, location_1-0 is an airport, , , , location_0-0 is in the city city_0, airplane_3 is at location_1-0, airplane_1 is at location_1-0, , , package_6 is at location_2-0, , , , location_2-0 is an airport, , package_3 is at location_2-1, package_0 is at location_1-1, package_1 is at location_2-0.\nMy goal is to have that package_5 is at location_1-0, package_4 is at location_0-0, package_7 is at location_1-0, package_6 is at location_1-1, package_2 is at location_1-0, package_0 is at location_1-1, package_1 is at location_2-1, package_3 is at location_2-0.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A package_5 can be loaded into a truck_2 only if the package_5 and the truck_2 are in the same location_2-1. </PRECON> load package_5 into truck_2 at location_2-1 <EFFECT> Once a package_5 is loaded into a truck_2, the package_5 is not at the location_2-1 and is in the truck_2. </EFFECT> \n <PRECON> A package_6 can be unloaded from a truck_1 only if the package_6 is in the truck_1. </PRECON> unload package_6 from truck_1 at location_1-1 <EFFECT> Once a package_6 is unloaded from a truck_1, the package_6 is not in the truck_1 and is at the location_1-1 of the truck_1. </EFFECT> WRONG \n <PRECON> A package_3 can be loaded into a truck_2 only if the package_3 and the truck_2 are in the same location_2-1. </PRECON> load package_3 into truck_2 at location_2-1 <EFFECT> Once a package_3 is loaded into a truck_2, the package_3 is not at the location_2-1 and is in the truck_2. </EFFECT> \n <PRECON> A package_2 can be loaded into a truck_2 only if the package_2 and the truck_2 are in the same location_2-1. </PRECON> load package_2 into truck_2 at location_2-1 <EFFECT> Once a package_2 is loaded into a truck_2, the package_2 is not at the location_2-1 and is in the truck_2. </EFFECT> \n <PRECON> A package_4 can be loaded into a truck_0 only if the package_4 and the truck_0 are in the same location_0-1. </PRECON> load package_4 into truck_0 at location_0-1 <EFFECT> Once a package_4 is loaded into a truck_0, the package_4 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-1 to location_0-0 if the truck_0 is at the location_0-1 and both location_0-1 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-1 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-1 to location_0-0, it is not at the location_0-1 and is at the location_0-0. </EFFECT> \n <PRECON> A package_4 can be unloaded from a truck_0 only if the package_4 is in the truck_0. </PRECON> unload package_4 from truck_0 at location_0-0 <EFFECT> Once a package_4 is unloaded from a truck_0, the package_4 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A truck_2 can be driven from location_2-1 to location_2-0 if the truck_2 is at the location_2-1 and both location_2-1 and location_2-0 are locations in the same city_2. </PRECON> drive truck_2 from location_2-1 to location_2-0 in city_2 <EFFECT> Once a truck_2 is driven from location_2-1 to location_2-0, it is not at the location_2-1 and is at the location_2-0. </EFFECT> \n <PRECON> A package_5 can be unloaded from a truck_2 only if the package_5 is in the truck_2. </PRECON> unload package_5 from truck_2 at location_2-0 <EFFECT> Once a package_5 is unloaded from a truck_2, the package_5 is not in the truck_2 and is at the location_2-0 of the truck_2. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at location_2-0 <EFFECT> Once a package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 and is at the location_2-0 of the truck_2. </EFFECT> \n <PRECON> A package_2 can be unloaded from a truck_2 only if the package_2 is in the truck_2. </PRECON> unload package_2 from truck_2 at location_2-0 <EFFECT> Once a package_2 is unloaded from a truck_2, the package_2 is not in the truck_2 and is at the location_2-0 of the truck_2. </EFFECT> \n <PRECON> A package_1 can be loaded into a truck_2 only if the package_1 and the truck_2 are in the same location_2-0. </PRECON> load package_1 into truck_2 at location_2-0 <EFFECT> Once a package_1 is loaded into a truck_2, the package_1 is not at the location_2-0 and is in the truck_2. </EFFECT> \n <PRECON> A truck_2 can be driven from location_2-0 to location_2-1 if the truck_2 is at the location_2-0 and both location_2-0 and location_2-1 are locations in the same city_2. </PRECON> drive truck_2 from location_2-0 to location_2-1 in city_2 <EFFECT> Once a truck_2 is driven from location_2-0 to location_2-1, it is not at the location_2-0 and is at the location_2-1. </EFFECT> \n <PRECON> A package_1 can be unloaded from a truck_2 only if the package_1 is in the truck_2. </PRECON> unload package_1 from truck_2 at location_2-1 <EFFECT> Once a package_1 is unloaded from a truck_2, the package_1 is not in the truck_2 and is at the location_2-1 of the truck_2. </EFFECT> \n <PRECON> A package_5 can be unloaded from an airplane_0 only if the package_5 in the airplane_0. </PRECON> unload package_5 from airplane_0 at location_1-0 <EFFECT> Once a package_5 is unloaded from an airplane_0, the package_5 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> WRONG \n <PRECON> A package_6 can be loaded into an airplane_0 only if the package_6 and the airplane_0 are in the same location_2-0. </PRECON> load package_6 into airplane_0 at location_2-0 <EFFECT> Once a package_6 is loaded into an airplane_0, the package_6 is not at the location_2-0 and is in the airplane_0. </EFFECT> \n <PRECON> A package_5 can be loaded into an airplane_0 only if the package_5 and the airplane_0 are in the same location_2-0. </PRECON> load package_5 into airplane_0 at location_2-0 <EFFECT> Once a package_5 is loaded into an airplane_0, the package_5 is not at the location_2-0 and is in the airplane_0. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> WRONG \n <PRECON> A package_2 can be loaded into an airplane_0 only if the package_2 and the airplane_0 are in the same location_2-0. </PRECON> load package_2 into airplane_0 at location_2-0 <EFFECT> Once a package_2 is loaded into an airplane_0, the package_2 is not at the location_2-0 and is in the airplane_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_2-0 to location_1-0 if the location_2-0 and the location_1-0 are airports and the airplane_0 is at the location_2-0. </PRECON> fly airplane_0 from location_2-0 to location_1-0 <EFFECT> Once an airplane_0 is flown from location_2-0 to location_1-0 the airplane_0 is not at the location_2-0 and is at the location_1-0. </EFFECT> \n <PRECON> A package_6 can be unloaded from an airplane_0 only if the package_6 in the airplane_0. </PRECON> unload package_6 from airplane_0 at location_1-0 <EFFECT> Once a package_6 is unloaded from an airplane_0, the package_6 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> A package_5 can be unloaded from an airplane_0 only if the package_5 in the airplane_0. </PRECON> unload package_5 from airplane_0 at location_1-0 <EFFECT> Once a package_5 is unloaded from an airplane_0, the package_5 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_0 is at the location_1-0. </PRECON> fly airplane_0 from location_1-0 to location_0-0 <EFFECT> Once an airplane_0 is flown from location_1-0 to location_0-0 the airplane_0 is not at the location_1-0 and is at the location_0-0. </EFFECT> WRONG \n <PRECON> A package_2 can be unloaded from an airplane_0 only if the package_2 in the airplane_0. </PRECON> unload package_2 from airplane_0 at location_1-0 <EFFECT> Once a package_2 is unloaded from an airplane_0, the package_2 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> \n <PRECON> A package_6 can be loaded into a truck_1 only if the package_6 and the truck_1 are in the same location_1-0. </PRECON> load package_6 into truck_1 at location_1-0 <EFFECT> Once a package_6 is loaded into a truck_1, the package_6 is not at the location_1-0 and is in the truck_1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-1 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-1, it is not at the location_1-0 and is at the location_1-1. </EFFECT> \n <PRECON> A package_6 can be unloaded from a truck_1 only if the package_6 is in the truck_1. </PRECON> unload package_6 from truck_1 at location_1-1 <EFFECT> Once a package_6 is unloaded from a truck_1, the package_6 is not in the truck_1 and is at the location_1-1 of the truck_1. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_0 is at the location_1-0. </PRECON> fly airplane_0 from location_1-0 to location_0-0 <EFFECT> Once an airplane_0 is flown from location_1-0 to location_0-0 the airplane_0 is not at the location_1-0 and is at the location_0-0. </EFFECT> \n <PRECON> A package_7 can be loaded into an airplane_0 only if the package_7 and the airplane_0 are in the same location_0-0. </PRECON> load package_7 into airplane_0 at location_0-0 <EFFECT> Once a package_7 is loaded into an airplane_0, the package_7 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_0-0 to location_1-0 if the location_0-0 and the location_1-0 are airports and the airplane_0 is at the location_0-0. </PRECON> fly airplane_0 from location_0-0 to location_1-0 <EFFECT> Once an airplane_0 is flown from location_0-0 to location_1-0 the airplane_0 is not at the location_0-0 and is at the location_1-0. </EFFECT> \n <PRECON> A package_7 can be unloaded from an airplane_0 only if the package_7 in the airplane_0. </PRECON> unload package_7 from airplane_0 at location_1-0 <EFFECT> Once a package_7 is unloaded from an airplane_0, the package_7 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n</PLAN>", "plan_length": 28, "raw_plan": ["(load-truck p5 t2 l2-1)", "(load-truck p3 t2 l2-1)", "(load-truck p2 t2 l2-1)", "(load-truck p4 t0 l0-1)", "(drive-truck t0 l0-1 l0-0 c0)", "(unload-truck p4 t0 l0-0)", "(drive-truck t2 l2-1 l2-0 c2)", "(unload-truck p5 t2 l2-0)", "(unload-truck p3 t2 l2-0)", "(unload-truck p2 t2 l2-0)", "(load-truck p1 t2 l2-0)", "(drive-truck t2 l2-0 l2-1 c2)", "(unload-truck p1 t2 l2-1)", "(load-airplane p6 a0 l2-0)", "(load-airplane p5 a0 l2-0)", "(load-airplane p2 a0 l2-0)", "(fly-airplane a0 l2-0 l1-0)", "(unload-airplane p6 a0 l1-0)", "(unload-airplane p5 a0 l1-0)", "(unload-airplane p2 a0 l1-0)", "(drive-truck t1 l1-1 l1-0 c1)", "(load-truck p6 t1 l1-0)", "(drive-truck t1 l1-0 l1-1 c1)", "(unload-truck p6 t1 l1-1)", "(fly-airplane a0 l1-0 l0-0)", "(load-airplane p7 a0 l0-0)", "(fly-airplane a0 l0-0 l1-0)", "(unload-airplane p7 a0 l1-0)"], "full_text_prompt": "I have to plan logistics to transport packages within cities via trucks and between cities via airplanes. Locations within a city are directly connected (trucks can move between any two such locations), and so are the cities. In each city there is exactly one truck and each city has one location that serves as an airport.\nHere are the actions that can be performed:\nLoad a package into a truck.\nLoad a package into an airplane.\nUnload a package from a truck.\nUnload a package from an airplane.\nDrive a truck from one location to another location.\nFly an airplane from one city to another city.\nThe following are the restrictions on the actions:\nA package can be loaded into a truck only if the package and the truck are in the same location.\nOnce a package is loaded into a truck, the package is not at the location and is in the truck.\nA package can be loaded into an airplane only if the package and the airplane are in the same location.\nOnce a package is loaded into an airplane, the package is not at the location and is in the airplane.\nA package can be unloaded from a truck only if the package is in the truck.\nOnce a package is unloaded from a truck, the package is not in the truck and is at the location of the truck.\nA package can be unloaded from an airplane only if the package in the airplane.\nOnce a package is unloaded from an airplane, the package is not in the airplane and is at the location of the airplane.\nA truck can be driven from one location to another if the truck is at the from-location and both from-location and to-location are locations in the same city.\nOnce a truck is driven from one location to another, it is not at the from-location and is at the to-location.\nAn airplane can be flown from one city to another if the from-location and the to-location are airports and the airplane is at the from-location.\nOnce an airplane is flown from one city to another the airplane is not at the from-location and is at the to-location.As initial conditions I have that, , location_0-1 is in the city city_0, location_1-1 is in the city city_1, , airplane_2 is at location_1-0, , package_5 is at location_2-1, location_1-0 is in the city city_1, location_0-0 is an airport, , , airplane_4 is at location_1-0, , , package_7 is at location_0-0, , , truck_0 is at location_0-1, , truck_1 is at location_1-1, location_2-1 is in the city city_2, truck_2 is at location_2-1, airplane_0 is at location_2-0, , package_4 is at location_0-1, , , , location_2-0 is in the city city_2, , , package_2 is at location_2-1, location_1-0 is an airport, , , , location_0-0 is in the city city_0, airplane_3 is at location_1-0, airplane_1 is at location_1-0, , , package_6 is at location_2-0, , , , location_2-0 is an airport, , package_3 is at location_2-1, package_0 is at location_1-1, package_1 is at location_2-0.My goal is to have that package_5 is at location_1-0, package_4 is at location_0-0, package_7 is at location_1-0, package_6 is at location_1-1, package_2 is at location_1-0, package_0 is at location_1-1, package_1 is at location_2-1, package_3 is at location_2-0.My plan is as follows:\n<PLAN>\n <PRECON> A package_5 can be loaded into a truck_2 only if the package_5 and the truck_2 are in the same location_2-1. </PRECON> load package_5 into truck_2 at location_2-1 <EFFECT> Once a package_5 is loaded into a truck_2, the package_5 is not at the location_2-1 and is in the truck_2. </EFFECT> \n <PRECON> A package_6 can be unloaded from a truck_1 only if the package_6 is in the truck_1. </PRECON> unload package_6 from truck_1 at location_1-1 <EFFECT> Once a package_6 is unloaded from a truck_1, the package_6 is not in the truck_1 and is at the location_1-1 of the truck_1. </EFFECT> WRONG \n <PRECON> A package_3 can be loaded into a truck_2 only if the package_3 and the truck_2 are in the same location_2-1. </PRECON> load package_3 into truck_2 at location_2-1 <EFFECT> Once a package_3 is loaded into a truck_2, the package_3 is not at the location_2-1 and is in the truck_2. </EFFECT> \n <PRECON> A package_2 can be loaded into a truck_2 only if the package_2 and the truck_2 are in the same location_2-1. </PRECON> load package_2 into truck_2 at location_2-1 <EFFECT> Once a package_2 is loaded into a truck_2, the package_2 is not at the location_2-1 and is in the truck_2. </EFFECT> \n <PRECON> A package_4 can be loaded into a truck_0 only if the package_4 and the truck_0 are in the same location_0-1. </PRECON> load package_4 into truck_0 at location_0-1 <EFFECT> Once a package_4 is loaded into a truck_0, the package_4 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-1 to location_0-0 if the truck_0 is at the location_0-1 and both location_0-1 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-1 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-1 to location_0-0, it is not at the location_0-1 and is at the location_0-0. </EFFECT> \n <PRECON> A package_4 can be unloaded from a truck_0 only if the package_4 is in the truck_0. </PRECON> unload package_4 from truck_0 at location_0-0 <EFFECT> Once a package_4 is unloaded from a truck_0, the package_4 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A truck_2 can be driven from location_2-1 to location_2-0 if the truck_2 is at the location_2-1 and both location_2-1 and location_2-0 are locations in the same city_2. </PRECON> drive truck_2 from location_2-1 to location_2-0 in city_2 <EFFECT> Once a truck_2 is driven from location_2-1 to location_2-0, it is not at the location_2-1 and is at the location_2-0. </EFFECT> \n <PRECON> A package_5 can be unloaded from a truck_2 only if the package_5 is in the truck_2. </PRECON> unload package_5 from truck_2 at location_2-0 <EFFECT> Once a package_5 is unloaded from a truck_2, the package_5 is not in the truck_2 and is at the location_2-0 of the truck_2. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_2 only if the package_3 is in the truck_2. </PRECON> unload package_3 from truck_2 at location_2-0 <EFFECT> Once a package_3 is unloaded from a truck_2, the package_3 is not in the truck_2 and is at the location_2-0 of the truck_2. </EFFECT> \n <PRECON> A package_2 can be unloaded from a truck_2 only if the package_2 is in the truck_2. </PRECON> unload package_2 from truck_2 at location_2-0 <EFFECT> Once a package_2 is unloaded from a truck_2, the package_2 is not in the truck_2 and is at the location_2-0 of the truck_2. </EFFECT> \n <PRECON> A package_1 can be loaded into a truck_2 only if the package_1 and the truck_2 are in the same location_2-0. </PRECON> load package_1 into truck_2 at location_2-0 <EFFECT> Once a package_1 is loaded into a truck_2, the package_1 is not at the location_2-0 and is in the truck_2. </EFFECT> \n <PRECON> A truck_2 can be driven from location_2-0 to location_2-1 if the truck_2 is at the location_2-0 and both location_2-0 and location_2-1 are locations in the same city_2. </PRECON> drive truck_2 from location_2-0 to location_2-1 in city_2 <EFFECT> Once a truck_2 is driven from location_2-0 to location_2-1, it is not at the location_2-0 and is at the location_2-1. </EFFECT> \n <PRECON> A package_1 can be unloaded from a truck_2 only if the package_1 is in the truck_2. </PRECON> unload package_1 from truck_2 at location_2-1 <EFFECT> Once a package_1 is unloaded from a truck_2, the package_1 is not in the truck_2 and is at the location_2-1 of the truck_2. </EFFECT> \n <PRECON> A package_5 can be unloaded from an airplane_0 only if the package_5 in the airplane_0. </PRECON> unload package_5 from airplane_0 at location_1-0 <EFFECT> Once a package_5 is unloaded from an airplane_0, the package_5 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> WRONG \n <PRECON> A package_6 can be loaded into an airplane_0 only if the package_6 and the airplane_0 are in the same location_2-0. </PRECON> load package_6 into airplane_0 at location_2-0 <EFFECT> Once a package_6 is loaded into an airplane_0, the package_6 is not at the location_2-0 and is in the airplane_0. </EFFECT> \n <PRECON> A package_5 can be loaded into an airplane_0 only if the package_5 and the airplane_0 are in the same location_2-0. </PRECON> load package_5 into airplane_0 at location_2-0 <EFFECT> Once a package_5 is loaded into an airplane_0, the package_5 is not at the location_2-0 and is in the airplane_0. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> WRONG \n <PRECON> A package_2 can be loaded into an airplane_0 only if the package_2 and the airplane_0 are in the same location_2-0. </PRECON> load package_2 into airplane_0 at location_2-0 <EFFECT> Once a package_2 is loaded into an airplane_0, the package_2 is not at the location_2-0 and is in the airplane_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_2-0 to location_1-0 if the location_2-0 and the location_1-0 are airports and the airplane_0 is at the location_2-0. </PRECON> fly airplane_0 from location_2-0 to location_1-0 <EFFECT> Once an airplane_0 is flown from location_2-0 to location_1-0 the airplane_0 is not at the location_2-0 and is at the location_1-0. </EFFECT> \n <PRECON> A package_6 can be unloaded from an airplane_0 only if the package_6 in the airplane_0. </PRECON> unload package_6 from airplane_0 at location_1-0 <EFFECT> Once a package_6 is unloaded from an airplane_0, the package_6 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> A package_5 can be unloaded from an airplane_0 only if the package_5 in the airplane_0. </PRECON> unload package_5 from airplane_0 at location_1-0 <EFFECT> Once a package_5 is unloaded from an airplane_0, the package_5 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_0 is at the location_1-0. </PRECON> fly airplane_0 from location_1-0 to location_0-0 <EFFECT> Once an airplane_0 is flown from location_1-0 to location_0-0 the airplane_0 is not at the location_1-0 and is at the location_0-0. </EFFECT> WRONG \n <PRECON> A package_2 can be unloaded from an airplane_0 only if the package_2 in the airplane_0. </PRECON> unload package_2 from airplane_0 at location_1-0 <EFFECT> Once a package_2 is unloaded from an airplane_0, the package_2 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> \n <PRECON> A package_6 can be loaded into a truck_1 only if the package_6 and the truck_1 are in the same location_1-0. </PRECON> load package_6 into truck_1 at location_1-0 <EFFECT> Once a package_6 is loaded into a truck_1, the package_6 is not at the location_1-0 and is in the truck_1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-1 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-1, it is not at the location_1-0 and is at the location_1-1. </EFFECT> \n <PRECON> A package_6 can be unloaded from a truck_1 only if the package_6 is in the truck_1. </PRECON> unload package_6 from truck_1 at location_1-1 <EFFECT> Once a package_6 is unloaded from a truck_1, the package_6 is not in the truck_1 and is at the location_1-1 of the truck_1. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_0 is at the location_1-0. </PRECON> fly airplane_0 from location_1-0 to location_0-0 <EFFECT> Once an airplane_0 is flown from location_1-0 to location_0-0 the airplane_0 is not at the location_1-0 and is at the location_0-0. </EFFECT> \n <PRECON> A package_7 can be loaded into an airplane_0 only if the package_7 and the airplane_0 are in the same location_0-0. </PRECON> load package_7 into airplane_0 at location_0-0 <EFFECT> Once a package_7 is loaded into an airplane_0, the package_7 is not at the location_0-0 and is in the airplane_0. </EFFECT> \n <PRECON> An airplane_0 can be flown from location_0-0 to location_1-0 if the location_0-0 and the location_1-0 are airports and the airplane_0 is at the location_0-0. </PRECON> fly airplane_0 from location_0-0 to location_1-0 <EFFECT> Once an airplane_0 is flown from location_0-0 to location_1-0 the airplane_0 is not at the location_0-0 and is at the location_1-0. </EFFECT> \n <PRECON> A package_7 can be unloaded from an airplane_0 only if the package_7 in the airplane_0. </PRECON> unload package_7 from airplane_0 at location_1-0 <EFFECT> Once a package_7 is unloaded from an airplane_0, the package_7 is not in the airplane_0 and is at the location_1-0 of the airplane_0. </EFFECT> \n</PLAN>"}
{"domain": "logistics", "instance_id": "80", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan logistics to transport packages within cities via trucks and between cities via airplanes. Locations within a city are directly connected (trucks can move between any two such locations), and so are the cities. In each city there is exactly one truck and each city has one location that serves as an airport.\nHere are the actions that can be performed:\nLoad a package into a truck.\nLoad a package into an airplane.\nUnload a package from a truck.\nUnload a package from an airplane.\nDrive a truck from one location to another location.\nFly an airplane from one city to another city.\nThe following are the restrictions on the actions:\nA package can be loaded into a truck only if the package and the truck are in the same location.\nOnce a package is loaded into a truck, the package is not at the location and is in the truck.\nA package can be loaded into an airplane only if the package and the airplane are in the same location.\nOnce a package is loaded into an airplane, the package is not at the location and is in the airplane.\nA package can be unloaded from a truck only if the package is in the truck.\nOnce a package is unloaded from a truck, the package is not in the truck and is at the location of the truck.\nA package can be unloaded from an airplane only if the package in the airplane.\nOnce a package is unloaded from an airplane, the package is not in the airplane and is at the location of the airplane.\nA truck can be driven from one location to another if the truck is at the from-location and both from-location and to-location are locations in the same city.\nOnce a truck is driven from one location to another, it is not at the from-location and is at the to-location.\nAn airplane can be flown from one city to another if the from-location and the to-location are airports and the airplane is at the from-location.\nOnce an airplane is flown from one city to another the airplane is not at the from-location and is at the to-location.", "input": "As initial conditions I have that, , package_5 is at location_1-2, , , , airplane_3 is at location_0-0, location_1-2 is in the city city_1, location_1-1 is in the city city_1, , location_0-0 is an airport, airplane_4 is at location_1-0, truck_1 is at location_1-0, , airplane_1 is at location_1-0, package_0 is at location_1-2, location_1-0 is in the city city_1, , , , , location_0-0 is in the city city_0, , airplane_0 is at location_1-0, truck_0 is at location_0-0, , , package_2 is at location_1-0, , airplane_2 is at location_1-0, , , , location_0-2 is in the city city_0, package_4 is at location_0-0, package_6 is at location_1-1, location_1-0 is an airport, , package_1 is at location_0-0, location_0-1 is in the city city_0, , , , package_3 is at location_0-1, .\nMy goal is to have that package_6 is at location_0-0, package_4 is at location_0-0, package_5 is at location_1-2, package_3 is at location_0-0, package_0 is at location_1-1, package_2 is at location_0-0, package_1 is at location_1-2.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A truck_1 can be driven from location_1-2 to location_1-1 if the truck_1 is at the location_1-2 and both location_1-2 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-2 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-2 to location_1-1, it is not at the location_1-2 and is at the location_1-1. </EFFECT> WRONG \n <PRECON> A package_2 can be loaded into an airplane_4 only if the package_2 and the airplane_4 are in the same location_1-0. </PRECON> load package_2 into airplane_4 at location_1-0 <EFFECT> Once a package_2 is loaded into an airplane_4, the package_2 is not at the location_1-0 and is in the airplane_4. </EFFECT> \n <PRECON> A package_1 can be loaded into an airplane_3 only if the package_1 and the airplane_3 are in the same location_0-0. </PRECON> load package_1 into airplane_3 at location_0-0 <EFFECT> Once a package_1 is loaded into an airplane_3, the package_1 is not at the location_0-0 and is in the airplane_3. </EFFECT> \n <PRECON> An airplane_3 can be flown from location_0-0 to location_1-0 if the location_0-0 and the location_1-0 are airports and the airplane_3 is at the location_0-0. </PRECON> fly airplane_3 from location_0-0 to location_1-0 <EFFECT> Once an airplane_3 is flown from location_0-0 to location_1-0 the airplane_3 is not at the location_0-0 and is at the location_1-0. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_1 only if the package_0 and the truck_1 are in the same location_1-2. </PRECON> load package_0 into truck_1 at location_1-2 <EFFECT> Once a package_0 is loaded into a truck_1, the package_0 is not at the location_1-2 and is in the truck_1. </EFFECT> WRONG \n <PRECON> A package_1 can be unloaded from an airplane_3 only if the package_1 in the airplane_3. </PRECON> unload package_1 from airplane_3 at location_1-0 <EFFECT> Once a package_1 is unloaded from an airplane_3, the package_1 is not in the airplane_3 and is at the location_1-0 of the airplane_3. </EFFECT> \n <PRECON> A package_1 can be loaded into a truck_1 only if the package_1 and the truck_1 are in the same location_1-0. </PRECON> load package_1 into truck_1 at location_1-0 <EFFECT> Once a package_1 is loaded into a truck_1, the package_1 is not at the location_1-0 and is in the truck_1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-1 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-1, it is not at the location_1-0 and is at the location_1-1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-2 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-2 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-2 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-2, it is not at the location_1-1 and is at the location_1-2. </EFFECT> WRONG \n <PRECON> A package_6 can be loaded into a truck_1 only if the package_6 and the truck_1 are in the same location_1-1. </PRECON> load package_6 into truck_1 at location_1-1 <EFFECT> Once a package_6 is loaded into a truck_1, the package_6 is not at the location_1-1 and is in the truck_1. </EFFECT> \n <PRECON> An airplane_4 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_4 is at the location_1-0. </PRECON> fly airplane_4 from location_1-0 to location_0-0 <EFFECT> Once an airplane_4 is flown from location_1-0 to location_0-0 the airplane_4 is not at the location_1-0 and is at the location_0-0. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_1 only if the package_0 and the truck_1 are in the same location_1-2. </PRECON> load package_0 into truck_1 at location_1-2 <EFFECT> Once a package_0 is loaded into a truck_1, the package_0 is not at the location_1-2 and is in the truck_1. </EFFECT> WRONG \n <PRECON> A package_6 can be unloaded from a truck_1 only if the package_6 is in the truck_1. </PRECON> unload package_6 from truck_1 at location_1-0 <EFFECT> Once a package_6 is unloaded from a truck_1, the package_6 is not in the truck_1 and is at the location_1-0 of the truck_1. </EFFECT> \n <PRECON> A package_6 can be loaded into an airplane_4 only if the package_6 and the airplane_4 are in the same location_1-0. </PRECON> load package_6 into airplane_4 at location_1-0 <EFFECT> Once a package_6 is loaded into an airplane_4, the package_6 is not at the location_1-0 and is in the airplane_4. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-1 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-1, it is not at the location_1-0 and is at the location_1-1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-2 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-2 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-2 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-2, it is not at the location_1-1 and is at the location_1-2. </EFFECT> \n <PRECON> A package_1 can be unloaded from a truck_1 only if the package_1 is in the truck_1. </PRECON> unload package_1 from truck_1 at location_1-2 <EFFECT> Once a package_1 is unloaded from a truck_1, the package_1 is not in the truck_1 and is at the location_1-2 of the truck_1. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_1 only if the package_0 and the truck_1 are in the same location_1-2. </PRECON> load package_0 into truck_1 at location_1-2 <EFFECT> Once a package_0 is loaded into a truck_1, the package_0 is not at the location_1-2 and is in the truck_1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-2 to location_1-1 if the truck_1 is at the location_1-2 and both location_1-2 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-2 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-2 to location_1-1, it is not at the location_1-2 and is at the location_1-1. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_1 only if the package_0 is in the truck_1. </PRECON> unload package_0 from truck_1 at location_1-1 <EFFECT> Once a package_0 is unloaded from a truck_1, the package_0 is not in the truck_1 and is at the location_1-1 of the truck_1. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-1 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-1 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-1 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-1, it is not at the location_0-0 and is at the location_0-1. </EFFECT> \n <PRECON> A package_6 can be unloaded from an airplane_4 only if the package_6 in the airplane_4. </PRECON> unload package_6 from airplane_4 at location_0-0 <EFFECT> Once a package_6 is unloaded from an airplane_4, the package_6 is not in the airplane_4 and is at the location_0-0 of the airplane_4. </EFFECT> WRONG \n <PRECON> A package_3 can be loaded into a truck_0 only if the package_3 and the truck_0 are in the same location_0-1. </PRECON> load package_3 into truck_0 at location_0-1 <EFFECT> Once a package_3 is loaded into a truck_0, the package_3 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-1 to location_0-0 if the truck_0 is at the location_0-1 and both location_0-1 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-1 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-1 to location_0-0, it is not at the location_0-1 and is at the location_0-0. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_0 only if the package_3 is in the truck_0. </PRECON> unload package_3 from truck_0 at location_0-0 <EFFECT> Once a package_3 is unloaded from a truck_0, the package_3 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A package_6 can be loaded into an airplane_4 only if the package_6 and the airplane_4 are in the same location_1-0. </PRECON> load package_6 into airplane_4 at location_1-0 <EFFECT> Once a package_6 is loaded into an airplane_4, the package_6 is not at the location_1-0 and is in the airplane_4. </EFFECT> \n <PRECON> An airplane_4 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_4 is at the location_1-0. </PRECON> fly airplane_4 from location_1-0 to location_0-0 <EFFECT> Once an airplane_4 is flown from location_1-0 to location_0-0 the airplane_4 is not at the location_1-0 and is at the location_0-0. </EFFECT> \n <PRECON> A package_6 can be unloaded from an airplane_4 only if the package_6 in the airplane_4. </PRECON> unload package_6 from airplane_4 at location_0-0 <EFFECT> Once a package_6 is unloaded from an airplane_4, the package_6 is not in the airplane_4 and is at the location_0-0 of the airplane_4. </EFFECT> \n <PRECON> A package_2 can be unloaded from an airplane_4 only if the package_2 in the airplane_4. </PRECON> unload package_2 from airplane_4 at location_0-0 <EFFECT> Once a package_2 is unloaded from an airplane_4, the package_2 is not in the airplane_4 and is at the location_0-0 of the airplane_4. </EFFECT> \n</PLAN>", "plan_length": 23, "raw_plan": ["(load-airplane p2 a4 l1-0)", "(load-airplane p1 a3 l0-0)", "(fly-airplane a3 l0-0 l1-0)", "(unload-airplane p1 a3 l1-0)", "(load-truck p1 t1 l1-0)", "(drive-truck t1 l1-0 l1-1 c1)", "(load-truck p6 t1 l1-1)", "(drive-truck t1 l1-1 l1-0 c1)", "(unload-truck p6 t1 l1-0)", "(drive-truck t1 l1-0 l1-1 c1)", "(drive-truck t1 l1-1 l1-2 c1)", "(unload-truck p1 t1 l1-2)", "(load-truck p0 t1 l1-2)", "(drive-truck t1 l1-2 l1-1 c1)", "(unload-truck p0 t1 l1-1)", "(drive-truck t0 l0-0 l0-1 c0)", "(load-truck p3 t0 l0-1)", "(drive-truck t0 l0-1 l0-0 c0)", "(unload-truck p3 t0 l0-0)", "(load-airplane p6 a4 l1-0)", "(fly-airplane a4 l1-0 l0-0)", "(unload-airplane p6 a4 l0-0)", "(unload-airplane p2 a4 l0-0)"], "full_text_prompt": "I have to plan logistics to transport packages within cities via trucks and between cities via airplanes. Locations within a city are directly connected (trucks can move between any two such locations), and so are the cities. In each city there is exactly one truck and each city has one location that serves as an airport.\nHere are the actions that can be performed:\nLoad a package into a truck.\nLoad a package into an airplane.\nUnload a package from a truck.\nUnload a package from an airplane.\nDrive a truck from one location to another location.\nFly an airplane from one city to another city.\nThe following are the restrictions on the actions:\nA package can be loaded into a truck only if the package and the truck are in the same location.\nOnce a package is loaded into a truck, the package is not at the location and is in the truck.\nA package can be loaded into an airplane only if the package and the airplane are in the same location.\nOnce a package is loaded into an airplane, the package is not at the location and is in the airplane.\nA package can be unloaded from a truck only if the package is in the truck.\nOnce a package is unloaded from a truck, the package is not in the truck and is at the location of the truck.\nA package can be unloaded from an airplane only if the package in the airplane.\nOnce a package is unloaded from an airplane, the package is not in the airplane and is at the location of the airplane.\nA truck can be driven from one location to another if the truck is at the from-location and both from-location and to-location are locations in the same city.\nOnce a truck is driven from one location to another, it is not at the from-location and is at the to-location.\nAn airplane can be flown from one city to another if the from-location and the to-location are airports and the airplane is at the from-location.\nOnce an airplane is flown from one city to another the airplane is not at the from-location and is at the to-location.As initial conditions I have that, , package_5 is at location_1-2, , , , airplane_3 is at location_0-0, location_1-2 is in the city city_1, location_1-1 is in the city city_1, , location_0-0 is an airport, airplane_4 is at location_1-0, truck_1 is at location_1-0, , airplane_1 is at location_1-0, package_0 is at location_1-2, location_1-0 is in the city city_1, , , , , location_0-0 is in the city city_0, , airplane_0 is at location_1-0, truck_0 is at location_0-0, , , package_2 is at location_1-0, , airplane_2 is at location_1-0, , , , location_0-2 is in the city city_0, package_4 is at location_0-0, package_6 is at location_1-1, location_1-0 is an airport, , package_1 is at location_0-0, location_0-1 is in the city city_0, , , , package_3 is at location_0-1, .My goal is to have that package_6 is at location_0-0, package_4 is at location_0-0, package_5 is at location_1-2, package_3 is at location_0-0, package_0 is at location_1-1, package_2 is at location_0-0, package_1 is at location_1-2.My plan is as follows:\n<PLAN>\n <PRECON> A truck_1 can be driven from location_1-2 to location_1-1 if the truck_1 is at the location_1-2 and both location_1-2 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-2 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-2 to location_1-1, it is not at the location_1-2 and is at the location_1-1. </EFFECT> WRONG \n <PRECON> A package_2 can be loaded into an airplane_4 only if the package_2 and the airplane_4 are in the same location_1-0. </PRECON> load package_2 into airplane_4 at location_1-0 <EFFECT> Once a package_2 is loaded into an airplane_4, the package_2 is not at the location_1-0 and is in the airplane_4. </EFFECT> \n <PRECON> A package_1 can be loaded into an airplane_3 only if the package_1 and the airplane_3 are in the same location_0-0. </PRECON> load package_1 into airplane_3 at location_0-0 <EFFECT> Once a package_1 is loaded into an airplane_3, the package_1 is not at the location_0-0 and is in the airplane_3. </EFFECT> \n <PRECON> An airplane_3 can be flown from location_0-0 to location_1-0 if the location_0-0 and the location_1-0 are airports and the airplane_3 is at the location_0-0. </PRECON> fly airplane_3 from location_0-0 to location_1-0 <EFFECT> Once an airplane_3 is flown from location_0-0 to location_1-0 the airplane_3 is not at the location_0-0 and is at the location_1-0. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_1 only if the package_0 and the truck_1 are in the same location_1-2. </PRECON> load package_0 into truck_1 at location_1-2 <EFFECT> Once a package_0 is loaded into a truck_1, the package_0 is not at the location_1-2 and is in the truck_1. </EFFECT> WRONG \n <PRECON> A package_1 can be unloaded from an airplane_3 only if the package_1 in the airplane_3. </PRECON> unload package_1 from airplane_3 at location_1-0 <EFFECT> Once a package_1 is unloaded from an airplane_3, the package_1 is not in the airplane_3 and is at the location_1-0 of the airplane_3. </EFFECT> \n <PRECON> A package_1 can be loaded into a truck_1 only if the package_1 and the truck_1 are in the same location_1-0. </PRECON> load package_1 into truck_1 at location_1-0 <EFFECT> Once a package_1 is loaded into a truck_1, the package_1 is not at the location_1-0 and is in the truck_1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-1 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-1, it is not at the location_1-0 and is at the location_1-1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-2 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-2 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-2 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-2, it is not at the location_1-1 and is at the location_1-2. </EFFECT> WRONG \n <PRECON> A package_6 can be loaded into a truck_1 only if the package_6 and the truck_1 are in the same location_1-1. </PRECON> load package_6 into truck_1 at location_1-1 <EFFECT> Once a package_6 is loaded into a truck_1, the package_6 is not at the location_1-1 and is in the truck_1. </EFFECT> \n <PRECON> An airplane_4 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_4 is at the location_1-0. </PRECON> fly airplane_4 from location_1-0 to location_0-0 <EFFECT> Once an airplane_4 is flown from location_1-0 to location_0-0 the airplane_4 is not at the location_1-0 and is at the location_0-0. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_1 only if the package_0 and the truck_1 are in the same location_1-2. </PRECON> load package_0 into truck_1 at location_1-2 <EFFECT> Once a package_0 is loaded into a truck_1, the package_0 is not at the location_1-2 and is in the truck_1. </EFFECT> WRONG \n <PRECON> A package_6 can be unloaded from a truck_1 only if the package_6 is in the truck_1. </PRECON> unload package_6 from truck_1 at location_1-0 <EFFECT> Once a package_6 is unloaded from a truck_1, the package_6 is not in the truck_1 and is at the location_1-0 of the truck_1. </EFFECT> \n <PRECON> A package_6 can be loaded into an airplane_4 only if the package_6 and the airplane_4 are in the same location_1-0. </PRECON> load package_6 into airplane_4 at location_1-0 <EFFECT> Once a package_6 is loaded into an airplane_4, the package_6 is not at the location_1-0 and is in the airplane_4. </EFFECT> WRONG \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-1 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-1, it is not at the location_1-0 and is at the location_1-1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-2 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-2 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-2 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-2, it is not at the location_1-1 and is at the location_1-2. </EFFECT> \n <PRECON> A package_1 can be unloaded from a truck_1 only if the package_1 is in the truck_1. </PRECON> unload package_1 from truck_1 at location_1-2 <EFFECT> Once a package_1 is unloaded from a truck_1, the package_1 is not in the truck_1 and is at the location_1-2 of the truck_1. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_1 only if the package_0 and the truck_1 are in the same location_1-2. </PRECON> load package_0 into truck_1 at location_1-2 <EFFECT> Once a package_0 is loaded into a truck_1, the package_0 is not at the location_1-2 and is in the truck_1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-2 to location_1-1 if the truck_1 is at the location_1-2 and both location_1-2 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-2 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-2 to location_1-1, it is not at the location_1-2 and is at the location_1-1. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_1 only if the package_0 is in the truck_1. </PRECON> unload package_0 from truck_1 at location_1-1 <EFFECT> Once a package_0 is unloaded from a truck_1, the package_0 is not in the truck_1 and is at the location_1-1 of the truck_1. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-1 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-1 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-1 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-1, it is not at the location_0-0 and is at the location_0-1. </EFFECT> \n <PRECON> A package_6 can be unloaded from an airplane_4 only if the package_6 in the airplane_4. </PRECON> unload package_6 from airplane_4 at location_0-0 <EFFECT> Once a package_6 is unloaded from an airplane_4, the package_6 is not in the airplane_4 and is at the location_0-0 of the airplane_4. </EFFECT> WRONG \n <PRECON> A package_3 can be loaded into a truck_0 only if the package_3 and the truck_0 are in the same location_0-1. </PRECON> load package_3 into truck_0 at location_0-1 <EFFECT> Once a package_3 is loaded into a truck_0, the package_3 is not at the location_0-1 and is in the truck_0. </EFFECT> \n <PRECON> A truck_0 can be driven from location_0-1 to location_0-0 if the truck_0 is at the location_0-1 and both location_0-1 and location_0-0 are locations in the same city_0. </PRECON> drive truck_0 from location_0-1 to location_0-0 in city_0 <EFFECT> Once a truck_0 is driven from location_0-1 to location_0-0, it is not at the location_0-1 and is at the location_0-0. </EFFECT> \n <PRECON> A package_3 can be unloaded from a truck_0 only if the package_3 is in the truck_0. </PRECON> unload package_3 from truck_0 at location_0-0 <EFFECT> Once a package_3 is unloaded from a truck_0, the package_3 is not in the truck_0 and is at the location_0-0 of the truck_0. </EFFECT> \n <PRECON> A package_6 can be loaded into an airplane_4 only if the package_6 and the airplane_4 are in the same location_1-0. </PRECON> load package_6 into airplane_4 at location_1-0 <EFFECT> Once a package_6 is loaded into an airplane_4, the package_6 is not at the location_1-0 and is in the airplane_4. </EFFECT> \n <PRECON> An airplane_4 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_4 is at the location_1-0. </PRECON> fly airplane_4 from location_1-0 to location_0-0 <EFFECT> Once an airplane_4 is flown from location_1-0 to location_0-0 the airplane_4 is not at the location_1-0 and is at the location_0-0. </EFFECT> \n <PRECON> A package_6 can be unloaded from an airplane_4 only if the package_6 in the airplane_4. </PRECON> unload package_6 from airplane_4 at location_0-0 <EFFECT> Once a package_6 is unloaded from an airplane_4, the package_6 is not in the airplane_4 and is at the location_0-0 of the airplane_4. </EFFECT> \n <PRECON> A package_2 can be unloaded from an airplane_4 only if the package_2 in the airplane_4. </PRECON> unload package_2 from airplane_4 at location_0-0 <EFFECT> Once a package_2 is unloaded from an airplane_4, the package_2 is not in the airplane_4 and is at the location_0-0 of the airplane_4. </EFFECT> \n</PLAN>"}
{"domain": "logistics", "instance_id": "120", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan logistics to transport packages within cities via trucks and between cities via airplanes. Locations within a city are directly connected (trucks can move between any two such locations), and so are the cities. In each city there is exactly one truck and each city has one location that serves as an airport.\nHere are the actions that can be performed:\nLoad a package into a truck.\nLoad a package into an airplane.\nUnload a package from a truck.\nUnload a package from an airplane.\nDrive a truck from one location to another location.\nFly an airplane from one city to another city.\nThe following are the restrictions on the actions:\nA package can be loaded into a truck only if the package and the truck are in the same location.\nOnce a package is loaded into a truck, the package is not at the location and is in the truck.\nA package can be loaded into an airplane only if the package and the airplane are in the same location.\nOnce a package is loaded into an airplane, the package is not at the location and is in the airplane.\nA package can be unloaded from a truck only if the package is in the truck.\nOnce a package is unloaded from a truck, the package is not in the truck and is at the location of the truck.\nA package can be unloaded from an airplane only if the package in the airplane.\nOnce a package is unloaded from an airplane, the package is not in the airplane and is at the location of the airplane.\nA truck can be driven from one location to another if the truck is at the from-location and both from-location and to-location are locations in the same city.\nOnce a truck is driven from one location to another, it is not at the from-location and is at the to-location.\nAn airplane can be flown from one city to another if the from-location and the to-location are airports and the airplane is at the from-location.\nOnce an airplane is flown from one city to another the airplane is not at the from-location and is at the to-location.", "input": "As initial conditions I have that, , truck_1 is at location_1-0, airplane_0 is at location_1-0, location_0-0 is in the city city_0, , package_7 is at location_0-0, , airplane_2 is at location_1-0, package_6 is at location_1-1, , truck_2 is at location_2-0, airplane_4 is at location_1-0, package_3 is at location_2-0, , , , , , , location_1-0 is in the city city_1, location_1-0 is an airport, location_1-1 is in the city city_1, , , , location_0-0 is an airport, location_0-1 is in the city city_0, , package_0 is at location_2-0, , , , , , , package_5 is at location_2-1, , , , location_2-0 is an airport, airplane_3 is at location_2-0, package_1 is at location_1-1, location_2-1 is in the city city_2, location_2-0 is in the city city_2, airplane_1 is at location_2-0, package_4 is at location_1-0, truck_0 is at location_0-0, , package_2 is at location_0-0, .\nMy goal is to have that package_2 is at location_0-0, package_7 is at location_0-0, package_6 is at location_1-1, package_4 is at location_0-0, package_5 is at location_0-0, package_3 is at location_2-0, package_1 is at location_0-0, package_0 is at location_0-1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> A truck_2 can be driven from location_2-0 to location_2-1 if the truck_2 is at the location_2-0 and both location_2-0 and location_2-1 are locations in the same city_2. </PRECON> drive truck_2 from location_2-0 to location_2-1 in city_2 <EFFECT> Once a truck_2 is driven from location_2-0 to location_2-1, it is not at the location_2-0 and is at the location_2-1. </EFFECT> \n <PRECON> A package_5 can be loaded into a truck_2 only if the package_5 and the truck_2 are in the same location_2-1. </PRECON> load package_5 into truck_2 at location_2-1 <EFFECT> Once a package_5 is loaded into a truck_2, the package_5 is not at the location_2-1 and is in the truck_2. </EFFECT> \n <PRECON> A truck_2 can be driven from location_2-1 to location_2-0 if the truck_2 is at the location_2-1 and both location_2-1 and location_2-0 are locations in the same city_2. </PRECON> drive truck_2 from location_2-1 to location_2-0 in city_2 <EFFECT> Once a truck_2 is driven from location_2-1 to location_2-0, it is not at the location_2-1 and is at the location_2-0. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> WRONG \n <PRECON> A package_5 can be unloaded from a truck_2 only if the package_5 is in the truck_2. </PRECON> unload package_5 from truck_2 at location_2-0 <EFFECT> Once a package_5 is unloaded from a truck_2, the package_5 is not in the truck_2 and is at the location_2-0 of the truck_2. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-1 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-1, it is not at the location_1-0 and is at the location_1-1. </EFFECT> \n <PRECON> A package_1 can be loaded into a truck_1 only if the package_1 and the truck_1 are in the same location_1-1. </PRECON> load package_1 into truck_1 at location_1-1 <EFFECT> Once a package_1 is loaded into a truck_1, the package_1 is not at the location_1-1 and is in the truck_1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> \n <PRECON> A package_1 can be unloaded from a truck_1 only if the package_1 is in the truck_1. </PRECON> unload package_1 from truck_1 at location_1-0 <EFFECT> Once a package_1 is unloaded from a truck_1, the package_1 is not in the truck_1 and is at the location_1-0 of the truck_1. </EFFECT> \n <PRECON> A package_4 can be loaded into an airplane_4 only if the package_4 and the airplane_4 are in the same location_1-0. </PRECON> load package_4 into airplane_4 at location_1-0 <EFFECT> Once a package_4 is loaded into an airplane_4, the package_4 is not at the location_1-0 and is in the airplane_4. </EFFECT> \n <PRECON> A package_1 can be loaded into an airplane_4 only if the package_1 and the airplane_4 are in the same location_1-0. </PRECON> load package_1 into airplane_4 at location_1-0 <EFFECT> Once a package_1 is loaded into an airplane_4, the package_1 is not at the location_1-0 and is in the airplane_4. </EFFECT> \n <PRECON> An airplane_4 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_4 is at the location_1-0. </PRECON> fly airplane_4 from location_1-0 to location_0-0 <EFFECT> Once an airplane_4 is flown from location_1-0 to location_0-0 the airplane_4 is not at the location_1-0 and is at the location_0-0. </EFFECT> \n <PRECON> A package_4 can be unloaded from an airplane_4 only if the package_4 in the airplane_4. </PRECON> unload package_4 from airplane_4 at location_0-0 <EFFECT> Once a package_4 is unloaded from an airplane_4, the package_4 is not in the airplane_4 and is at the location_0-0 of the airplane_4. </EFFECT> \n <PRECON> A package_1 can be unloaded from an airplane_4 only if the package_1 in the airplane_4. </PRECON> unload package_1 from airplane_4 at location_0-0 <EFFECT> Once a package_1 is unloaded from an airplane_4, the package_1 is not in the airplane_4 and is at the location_0-0 of the airplane_4. </EFFECT> \n <PRECON> A package_5 can be loaded into an airplane_3 only if the package_5 and the airplane_3 are in the same location_2-0. </PRECON> load package_5 into airplane_3 at location_2-0 <EFFECT> Once a package_5 is loaded into an airplane_3, the package_5 is not at the location_2-0 and is in the airplane_3. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_0 only if the package_0 and the truck_0 are in the same location_0-0. </PRECON> load package_0 into truck_0 at location_0-0 <EFFECT> Once a package_0 is loaded into a truck_0, the package_0 is not at the location_0-0 and is in the truck_0. </EFFECT> WRONG \n <PRECON> A package_0 can be loaded into an airplane_3 only if the package_0 and the airplane_3 are in the same location_2-0. </PRECON> load package_0 into airplane_3 at location_2-0 <EFFECT> Once a package_0 is loaded into an airplane_3, the package_0 is not at the location_2-0 and is in the airplane_3. </EFFECT> \n <PRECON> An airplane_3 can be flown from location_2-0 to location_0-0 if the location_2-0 and the location_0-0 are airports and the airplane_3 is at the location_2-0. </PRECON> fly airplane_3 from location_2-0 to location_0-0 <EFFECT> Once an airplane_3 is flown from location_2-0 to location_0-0 the airplane_3 is not at the location_2-0 and is at the location_0-0. </EFFECT> \n <PRECON> A package_5 can be unloaded from an airplane_3 only if the package_5 in the airplane_3. </PRECON> unload package_5 from airplane_3 at location_0-0 <EFFECT> Once a package_5 is unloaded from an airplane_3, the package_5 is not in the airplane_3 and is at the location_0-0 of the airplane_3. </EFFECT> \n <PRECON> A package_0 can be unloaded from an airplane_3 only if the package_0 in the airplane_3. </PRECON> unload package_0 from airplane_3 at location_0-0 <EFFECT> Once a package_0 is unloaded from an airplane_3, the package_0 is not in the airplane_3 and is at the location_0-0 of the airplane_3. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_0 only if the package_0 and the truck_0 are in the same location_0-0. </PRECON> load package_0 into truck_0 at location_0-0 <EFFECT> Once a package_0 is loaded into a truck_0, the package_0 is not at the location_0-0 and is in the truck_0. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_0 only if the package_0 is in the truck_0. </PRECON> unload package_0 from truck_0 at location_0-1 <EFFECT> Once a package_0 is unloaded from a truck_0, the package_0 is not in the truck_0 and is at the location_0-1 of the truck_0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-1 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-1 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-1 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-1, it is not at the location_0-0 and is at the location_0-1. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_0 only if the package_0 is in the truck_0. </PRECON> unload package_0 from truck_0 at location_0-1 <EFFECT> Once a package_0 is unloaded from a truck_0, the package_0 is not in the truck_0 and is at the location_0-1 of the truck_0. </EFFECT> \n</PLAN>", "plan_length": 21, "raw_plan": ["(drive-truck t2 l2-0 l2-1 c2)", "(load-truck p5 t2 l2-1)", "(drive-truck t2 l2-1 l2-0 c2)", "(unload-truck p5 t2 l2-0)", "(drive-truck t1 l1-0 l1-1 c1)", "(load-truck p1 t1 l1-1)", "(drive-truck t1 l1-1 l1-0 c1)", "(unload-truck p1 t1 l1-0)", "(load-airplane p4 a4 l1-0)", "(load-airplane p1 a4 l1-0)", "(fly-airplane a4 l1-0 l0-0)", "(unload-airplane p4 a4 l0-0)", "(unload-airplane p1 a4 l0-0)", "(load-airplane p5 a3 l2-0)", "(load-airplane p0 a3 l2-0)", "(fly-airplane a3 l2-0 l0-0)", "(unload-airplane p5 a3 l0-0)", "(unload-airplane p0 a3 l0-0)", "(load-truck p0 t0 l0-0)", "(drive-truck t0 l0-0 l0-1 c0)", "(unload-truck p0 t0 l0-1)"], "full_text_prompt": "I have to plan logistics to transport packages within cities via trucks and between cities via airplanes. Locations within a city are directly connected (trucks can move between any two such locations), and so are the cities. In each city there is exactly one truck and each city has one location that serves as an airport.\nHere are the actions that can be performed:\nLoad a package into a truck.\nLoad a package into an airplane.\nUnload a package from a truck.\nUnload a package from an airplane.\nDrive a truck from one location to another location.\nFly an airplane from one city to another city.\nThe following are the restrictions on the actions:\nA package can be loaded into a truck only if the package and the truck are in the same location.\nOnce a package is loaded into a truck, the package is not at the location and is in the truck.\nA package can be loaded into an airplane only if the package and the airplane are in the same location.\nOnce a package is loaded into an airplane, the package is not at the location and is in the airplane.\nA package can be unloaded from a truck only if the package is in the truck.\nOnce a package is unloaded from a truck, the package is not in the truck and is at the location of the truck.\nA package can be unloaded from an airplane only if the package in the airplane.\nOnce a package is unloaded from an airplane, the package is not in the airplane and is at the location of the airplane.\nA truck can be driven from one location to another if the truck is at the from-location and both from-location and to-location are locations in the same city.\nOnce a truck is driven from one location to another, it is not at the from-location and is at the to-location.\nAn airplane can be flown from one city to another if the from-location and the to-location are airports and the airplane is at the from-location.\nOnce an airplane is flown from one city to another the airplane is not at the from-location and is at the to-location.As initial conditions I have that, , truck_1 is at location_1-0, airplane_0 is at location_1-0, location_0-0 is in the city city_0, , package_7 is at location_0-0, , airplane_2 is at location_1-0, package_6 is at location_1-1, , truck_2 is at location_2-0, airplane_4 is at location_1-0, package_3 is at location_2-0, , , , , , , location_1-0 is in the city city_1, location_1-0 is an airport, location_1-1 is in the city city_1, , , , location_0-0 is an airport, location_0-1 is in the city city_0, , package_0 is at location_2-0, , , , , , , package_5 is at location_2-1, , , , location_2-0 is an airport, airplane_3 is at location_2-0, package_1 is at location_1-1, location_2-1 is in the city city_2, location_2-0 is in the city city_2, airplane_1 is at location_2-0, package_4 is at location_1-0, truck_0 is at location_0-0, , package_2 is at location_0-0, .My goal is to have that package_2 is at location_0-0, package_7 is at location_0-0, package_6 is at location_1-1, package_4 is at location_0-0, package_5 is at location_0-0, package_3 is at location_2-0, package_1 is at location_0-0, package_0 is at location_0-1.My plan is as follows:\n<PLAN>\n <PRECON> A truck_2 can be driven from location_2-0 to location_2-1 if the truck_2 is at the location_2-0 and both location_2-0 and location_2-1 are locations in the same city_2. </PRECON> drive truck_2 from location_2-0 to location_2-1 in city_2 <EFFECT> Once a truck_2 is driven from location_2-0 to location_2-1, it is not at the location_2-0 and is at the location_2-1. </EFFECT> \n <PRECON> A package_5 can be loaded into a truck_2 only if the package_5 and the truck_2 are in the same location_2-1. </PRECON> load package_5 into truck_2 at location_2-1 <EFFECT> Once a package_5 is loaded into a truck_2, the package_5 is not at the location_2-1 and is in the truck_2. </EFFECT> \n <PRECON> A truck_2 can be driven from location_2-1 to location_2-0 if the truck_2 is at the location_2-1 and both location_2-1 and location_2-0 are locations in the same city_2. </PRECON> drive truck_2 from location_2-1 to location_2-0 in city_2 <EFFECT> Once a truck_2 is driven from location_2-1 to location_2-0, it is not at the location_2-1 and is at the location_2-0. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> WRONG \n <PRECON> A package_5 can be unloaded from a truck_2 only if the package_5 is in the truck_2. </PRECON> unload package_5 from truck_2 at location_2-0 <EFFECT> Once a package_5 is unloaded from a truck_2, the package_5 is not in the truck_2 and is at the location_2-0 of the truck_2. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-0 to location_1-1 if the truck_1 is at the location_1-0 and both location_1-0 and location_1-1 are locations in the same city_1. </PRECON> drive truck_1 from location_1-0 to location_1-1 in city_1 <EFFECT> Once a truck_1 is driven from location_1-0 to location_1-1, it is not at the location_1-0 and is at the location_1-1. </EFFECT> \n <PRECON> A package_1 can be loaded into a truck_1 only if the package_1 and the truck_1 are in the same location_1-1. </PRECON> load package_1 into truck_1 at location_1-1 <EFFECT> Once a package_1 is loaded into a truck_1, the package_1 is not at the location_1-1 and is in the truck_1. </EFFECT> \n <PRECON> A truck_1 can be driven from location_1-1 to location_1-0 if the truck_1 is at the location_1-1 and both location_1-1 and location_1-0 are locations in the same city_1. </PRECON> drive truck_1 from location_1-1 to location_1-0 in city_1 <EFFECT> Once a truck_1 is driven from location_1-1 to location_1-0, it is not at the location_1-1 and is at the location_1-0. </EFFECT> \n <PRECON> A package_1 can be unloaded from a truck_1 only if the package_1 is in the truck_1. </PRECON> unload package_1 from truck_1 at location_1-0 <EFFECT> Once a package_1 is unloaded from a truck_1, the package_1 is not in the truck_1 and is at the location_1-0 of the truck_1. </EFFECT> \n <PRECON> A package_4 can be loaded into an airplane_4 only if the package_4 and the airplane_4 are in the same location_1-0. </PRECON> load package_4 into airplane_4 at location_1-0 <EFFECT> Once a package_4 is loaded into an airplane_4, the package_4 is not at the location_1-0 and is in the airplane_4. </EFFECT> \n <PRECON> A package_1 can be loaded into an airplane_4 only if the package_1 and the airplane_4 are in the same location_1-0. </PRECON> load package_1 into airplane_4 at location_1-0 <EFFECT> Once a package_1 is loaded into an airplane_4, the package_1 is not at the location_1-0 and is in the airplane_4. </EFFECT> \n <PRECON> An airplane_4 can be flown from location_1-0 to location_0-0 if the location_1-0 and the location_0-0 are airports and the airplane_4 is at the location_1-0. </PRECON> fly airplane_4 from location_1-0 to location_0-0 <EFFECT> Once an airplane_4 is flown from location_1-0 to location_0-0 the airplane_4 is not at the location_1-0 and is at the location_0-0. </EFFECT> \n <PRECON> A package_4 can be unloaded from an airplane_4 only if the package_4 in the airplane_4. </PRECON> unload package_4 from airplane_4 at location_0-0 <EFFECT> Once a package_4 is unloaded from an airplane_4, the package_4 is not in the airplane_4 and is at the location_0-0 of the airplane_4. </EFFECT> \n <PRECON> A package_1 can be unloaded from an airplane_4 only if the package_1 in the airplane_4. </PRECON> unload package_1 from airplane_4 at location_0-0 <EFFECT> Once a package_1 is unloaded from an airplane_4, the package_1 is not in the airplane_4 and is at the location_0-0 of the airplane_4. </EFFECT> \n <PRECON> A package_5 can be loaded into an airplane_3 only if the package_5 and the airplane_3 are in the same location_2-0. </PRECON> load package_5 into airplane_3 at location_2-0 <EFFECT> Once a package_5 is loaded into an airplane_3, the package_5 is not at the location_2-0 and is in the airplane_3. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_0 only if the package_0 and the truck_0 are in the same location_0-0. </PRECON> load package_0 into truck_0 at location_0-0 <EFFECT> Once a package_0 is loaded into a truck_0, the package_0 is not at the location_0-0 and is in the truck_0. </EFFECT> WRONG \n <PRECON> A package_0 can be loaded into an airplane_3 only if the package_0 and the airplane_3 are in the same location_2-0. </PRECON> load package_0 into airplane_3 at location_2-0 <EFFECT> Once a package_0 is loaded into an airplane_3, the package_0 is not at the location_2-0 and is in the airplane_3. </EFFECT> \n <PRECON> An airplane_3 can be flown from location_2-0 to location_0-0 if the location_2-0 and the location_0-0 are airports and the airplane_3 is at the location_2-0. </PRECON> fly airplane_3 from location_2-0 to location_0-0 <EFFECT> Once an airplane_3 is flown from location_2-0 to location_0-0 the airplane_3 is not at the location_2-0 and is at the location_0-0. </EFFECT> \n <PRECON> A package_5 can be unloaded from an airplane_3 only if the package_5 in the airplane_3. </PRECON> unload package_5 from airplane_3 at location_0-0 <EFFECT> Once a package_5 is unloaded from an airplane_3, the package_5 is not in the airplane_3 and is at the location_0-0 of the airplane_3. </EFFECT> \n <PRECON> A package_0 can be unloaded from an airplane_3 only if the package_0 in the airplane_3. </PRECON> unload package_0 from airplane_3 at location_0-0 <EFFECT> Once a package_0 is unloaded from an airplane_3, the package_0 is not in the airplane_3 and is at the location_0-0 of the airplane_3. </EFFECT> \n <PRECON> A package_0 can be loaded into a truck_0 only if the package_0 and the truck_0 are in the same location_0-0. </PRECON> load package_0 into truck_0 at location_0-0 <EFFECT> Once a package_0 is loaded into a truck_0, the package_0 is not at the location_0-0 and is in the truck_0. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_0 only if the package_0 is in the truck_0. </PRECON> unload package_0 from truck_0 at location_0-1 <EFFECT> Once a package_0 is unloaded from a truck_0, the package_0 is not in the truck_0 and is at the location_0-1 of the truck_0. </EFFECT> WRONG \n <PRECON> A truck_0 can be driven from location_0-0 to location_0-1 if the truck_0 is at the location_0-0 and both location_0-0 and location_0-1 are locations in the same city_0. </PRECON> drive truck_0 from location_0-0 to location_0-1 in city_0 <EFFECT> Once a truck_0 is driven from location_0-0 to location_0-1, it is not at the location_0-0 and is at the location_0-1. </EFFECT> \n <PRECON> A package_0 can be unloaded from a truck_0 only if the package_0 is in the truck_0. </PRECON> unload package_0 from truck_0 at location_0-1 <EFFECT> Once a package_0 is unloaded from a truck_0, the package_0 is not in the truck_0 and is at the location_0-1 of the truck_0. </EFFECT> \n</PLAN>"}
{"domain": "satellite", "instance_id": "0", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the operations of satellites in space. These satellites are equipped with various instruments that can be used to take images of different directions in space using specific modes. The satellites can be turned, their instruments can be switched on and off, calibrated, and used to take images.\nHere are the actions that can be performed:\nTurn a satellite to a direction.\nSwitch on an instrument on a satellite.\nSwitch off an instrument on a satellite.\nCalibrate an instrument on a satellite by pointing it to a calibration target.\nTake an image of a direction using an instrument with a specific mode.\nThe following are the restrictions on the actions:\nA satellite can be turned from a previous direction to a new direction only if the satellite is currently pointing to the previous direction.\nOnce the satellite is turned to a new direction, the satellite is no longer pointing to the previous direction but is pointing to the new direction.\nAn instrument can be switched on on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched on on a satellite only if the instrument is power-available.\nOnce the instrument is switched on on a satellite, the instrument is power-on.\nOnce the instrument is switched on on a satellite, the instrument is no longer power-available.\nOnce the instrument is switched on on a satellite, the instrument becomes not calibrated.\nAn instrument can be switched off on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched off on a satellite only if the instrument is power-on.\nOnce the instrument is switched off on a satellite, the instrument is power-available.\nOnce the instrument is switched off on a satellite, the instrument is no longer power-on.\nAn instrument can be calibrated on a satellite only if the instrument is on board the satellite.\nAn instrument can be calibrated on a satellite only if the instrument is power-on.\nAn instrument can be calibrated on a satellite only if the instrument is pointing to the calibration target.\nOnce the instrument is calibrated on a satellite, the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is on board the satellite.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is power-on.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the satellite is pointing to the direction.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument supports the mode.\nOnce an image of a direction with a specific mode is taken using an instrument on a satellite, we will have the image.", "input": "As initial conditions I have that, instrument_13 is on board satellite_4, instrument_3 supports spectrograph_mode_0, instrument_0 supports thermograph_mode_3, instrument_1 is on board satellite_0, the calibration target of instrument_4 is star_1, instrument_5 supports thermograph_mode_2, instrument_8 is on board satellite_3, the calibration target of instrument_10 is ground_station_4, instrument_11 is on board satellite_4, instrument_6 is on board satellite_1, instrument_7 supports thermograph_mode_3, instrument_0 is on board satellite_0, instrument_0 supports thermograph_mode_2, the calibration target of instrument_0 is ground_station_3, instrument_2 supports thermograph_mode_2, the calibration target of instrument_12 is ground_station_0, instrument_10 supports spectrograph_mode_0, instrument_6 supports thermograph_mode_2, instrument_5 is on board satellite_1, instrument_3 supports infrared_mode_1, instrument_9 is on board satellite_3, the calibration target of instrument_6 is ground_station_3, instrument_7 is on board satellite_2, the calibration target of instrument_9 is ground_station_2, instrument_8 supports thermograph_mode_2, instrument_13 supports infrared_mode_1, satellite_0 is power-available, instrument_4 supports thermograph_mode_3, instrument_6 supports spectrograph_mode_0, the calibration target of instrument_5 is ground_station_3, instrument_1 supports thermograph_mode_2, satellite_2 is pointing to ground_station_0, instrument_1 supports spectrograph_mode_0, instrument_8 supports infrared_mode_1, instrument_12 supports thermograph_mode_3, instrument_10 is on board satellite_3, the calibration target of instrument_11 is ground_station_3, instrument_2 is on board satellite_1, instrument_8 supports spectrograph_mode_0, satellite_3 is pointing to planet_9, instrument_4 is on board satellite_1, satellite_1 is power-available, satellite_2 is power-available, instrument_2 supports spectrograph_mode_0, instrument_11 supports thermograph_mode_3, satellite_1 is pointing to ground_station_3, instrument_12 is on board satellite_4, satellite_3 is power-available, the calibration target of instrument_3 is ground_station_0, the calibration target of instrument_1 is star_1, the calibration target of instrument_2 is star_1, satellite_4 is pointing to phenomenon_6, the calibration target of instrument_8 is ground_station_3, instrument_11 supports spectrograph_mode_0, instrument_4 supports thermograph_mode_2, instrument_9 supports infrared_mode_1, satellite_0 is pointing to ground_station_0, instrument_12 supports thermograph_mode_2, the calibration target of instrument_13 is star_1, instrument_3 is on board satellite_1, instrument_11 supports infrared_mode_1, instrument_3 supports thermograph_mode_2, satellite_4 is power-available, the calibration target of instrument_7 is star_1.\nMy goal is to have that satellite_2 is pointing to ground_station_3, star_7 has image in thermograph_mode_2, phenomenon_10 has image in thermograph_mode_3, satellite_3 is pointing to phenomenon_10, phenomenon_8 has image in thermograph_mode_2, phenomenon_5 has image in spectrograph_mode_0, planet_9 has image in thermograph_mode_3, phenomenon_6 has image in infrared_mode_1.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> An instrument_11 can be switched on on a satellite_4 only if the instrument_11 is on board the satellite_4. An instrument_11 can be switched on on a satellite_4 only if the instrument_11 is power-available. </PRECON> switch on instrument_11 on satellite_4 <EFFECT> Once the instrument_11 is switched on on a satellite_4, the instrument_11 becomes not calibrated. Once the instrument_11 is switched on on a satellite_4, the instrument_11 is power-on. Once the instrument_11 is switched on on a satellite_4, the instrument_11 is no longer power-available. </EFFECT> \n <PRECON> An instrument_5 can be switched on on a satellite_1 only if the instrument_5 is on board the satellite_1. An instrument_5 can be switched on on a satellite_1 only if the instrument_5 is power-available. </PRECON> switch on instrument_5 on satellite_1 <EFFECT> Once the instrument_5 is switched on on a satellite_1, the instrument_5 becomes not calibrated. Once the instrument_5 is switched on on a satellite_1, the instrument_5 is power-on. Once the instrument_5 is switched on on a satellite_1, the instrument_5 is no longer power-available. </EFFECT> \n <PRECON> An instrument_5 can be calibrated on a satellite_1 only if the instrument_5 is pointing to the calibration target ground_station_3. An instrument_5 can be calibrated on a satellite_1 only if the instrument_5 is power-on. An instrument_5 can be calibrated on a satellite_1 only if the instrument_5 is on board the satellite_1. </PRECON> calibrate instrument_5 on satellite_1 pointing to calibration target ground_station_3 <EFFECT> Once the instrument_5 is calibrated on a satellite_1, the instrument_5 is calibrated. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous planet_9 to a new phenomenon_10 only if the satellite_3 is currently pointing to the previous planet_9. </PRECON> turn satellite_3 from phenomenon_10 to planet_9 <EFFECT> Once the satellite_3 is turned to a new phenomenon_10, the satellite_3 is no longer pointing to the previous planet_9 but is pointing to the new phenomenon_10. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_0 to a new ground_station_3 only if the satellite_2 is currently pointing to the previous ground_station_0. </PRECON> turn satellite_2 from ground_station_3 to ground_station_0 <EFFECT> Once the satellite_2 is turned to a new ground_station_3, the satellite_2 is no longer pointing to the previous ground_station_0 but is pointing to the new ground_station_3. </EFFECT> \n <PRECON> An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is power-on. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is calibrated. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_10. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is on board the satellite_4. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 supports the thermograph_mode_3. </PRECON> take image of phenomenon_10 using instrument_11 on satellite_4 with thermograph_mode_3 <EFFECT> Once an image of a direction phenomenon_10 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_4, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_1 can be turned from a previous ground_station_3 to a new phenomenon_8 only if the satellite_1 is currently pointing to the previous ground_station_3. </PRECON> turn satellite_1 from phenomenon_8 to ground_station_3 <EFFECT> Once the satellite_1 is turned to a new phenomenon_8, the satellite_1 is no longer pointing to the previous ground_station_3 but is pointing to the new phenomenon_8. </EFFECT> \n <PRECON> An image of a direction phenomenon_8 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is power-on. An image of a direction phenomenon_8 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is calibrated. An image of a direction phenomenon_8 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the satellite_1 is pointing to the direction phenomenon_8. An image of a direction phenomenon_8 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is on board the satellite_1. An image of a direction phenomenon_8 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 supports the thermograph_mode_2. </PRECON> take image of phenomenon_8 using instrument_5 on satellite_1 with thermograph_mode_2 <EFFECT> Once an image of a direction phenomenon_8 with a specific thermograph_mode_2 is taken using an instrument_5 on a satellite_1, we will have the image. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_8 to a new star_7 only if the satellite_1 is currently pointing to the previous phenomenon_8. </PRECON> turn satellite_1 from star_7 to phenomenon_8 <EFFECT> Once the satellite_1 is turned to a new star_7, the satellite_1 is no longer pointing to the previous phenomenon_8 but is pointing to the new star_7. </EFFECT> \n <PRECON> An image of a direction star_7 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is power-on. An image of a direction star_7 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is calibrated. An image of a direction star_7 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the satellite_1 is pointing to the direction star_7. An image of a direction star_7 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is on board the satellite_1. An image of a direction star_7 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 supports the thermograph_mode_2. </PRECON> take image of star_7 using instrument_5 on satellite_1 with thermograph_mode_2 <EFFECT> Once an image of a direction star_7 with a specific thermograph_mode_2 is taken using an instrument_5 on a satellite_1, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_6 to a new planet_9 only if the satellite_4 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_4 from planet_9 to phenomenon_6 <EFFECT> Once the satellite_4 is turned to a new planet_9, the satellite_4 is no longer pointing to the previous phenomenon_6 but is pointing to the new planet_9. </EFFECT> WRONG \n <PRECON> A satellite_4 can be turned from a previous phenomenon_6 to a new ground_station_3 only if the satellite_4 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_4 from ground_station_3 to phenomenon_6 <EFFECT> Once the satellite_4 is turned to a new ground_station_3, the satellite_4 is no longer pointing to the previous phenomenon_6 but is pointing to the new ground_station_3. </EFFECT> \n <PRECON> An instrument_11 can be calibrated on a satellite_4 only if the instrument_11 is pointing to the calibration target ground_station_3. An instrument_11 can be calibrated on a satellite_4 only if the instrument_11 is power-on. An instrument_11 can be calibrated on a satellite_4 only if the instrument_11 is on board the satellite_4. </PRECON> calibrate instrument_11 on satellite_4 pointing to calibration target ground_station_3 <EFFECT> Once the instrument_11 is calibrated on a satellite_4, the instrument_11 is calibrated. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous ground_station_3 to a new phenomenon_10 only if the satellite_4 is currently pointing to the previous ground_station_3. </PRECON> turn satellite_4 from phenomenon_10 to ground_station_3 <EFFECT> Once the satellite_4 is turned to a new phenomenon_10, the satellite_4 is no longer pointing to the previous ground_station_3 but is pointing to the new phenomenon_10. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_10 to a new phenomenon_5 only if the satellite_4 is currently pointing to the previous phenomenon_10. </PRECON> turn satellite_4 from phenomenon_5 to phenomenon_10 <EFFECT> Once the satellite_4 is turned to a new phenomenon_5, the satellite_4 is no longer pointing to the previous phenomenon_10 but is pointing to the new phenomenon_5. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is power-on. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is calibrated. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_10. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is on board the satellite_4. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 supports the thermograph_mode_3. </PRECON> take image of phenomenon_10 using instrument_11 on satellite_4 with thermograph_mode_3 <EFFECT> Once an image of a direction phenomenon_10 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_10 to a new phenomenon_5 only if the satellite_4 is currently pointing to the previous phenomenon_10. </PRECON> turn satellite_4 from phenomenon_5 to phenomenon_10 <EFFECT> Once the satellite_4 is turned to a new phenomenon_5, the satellite_4 is no longer pointing to the previous phenomenon_10 but is pointing to the new phenomenon_5. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_5 to a new phenomenon_6 only if the satellite_4 is currently pointing to the previous phenomenon_5. </PRECON> turn satellite_4 from phenomenon_6 to phenomenon_5 <EFFECT> Once the satellite_4 is turned to a new phenomenon_6, the satellite_4 is no longer pointing to the previous phenomenon_5 but is pointing to the new phenomenon_6. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_5 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is power-on. An image of a direction phenomenon_5 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is calibrated. An image of a direction phenomenon_5 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_5. An image of a direction phenomenon_5 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is on board the satellite_4. An image of a direction phenomenon_5 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 supports the spectrograph_mode_0. </PRECON> take image of phenomenon_5 using instrument_11 on satellite_4 with spectrograph_mode_0 <EFFECT> Once an image of a direction phenomenon_5 with a specific spectrograph_mode_0 is taken using an instrument_11 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_5 to a new phenomenon_6 only if the satellite_4 is currently pointing to the previous phenomenon_5. </PRECON> turn satellite_4 from phenomenon_6 to phenomenon_5 <EFFECT> Once the satellite_4 is turned to a new phenomenon_6, the satellite_4 is no longer pointing to the previous phenomenon_5 but is pointing to the new phenomenon_6. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_6 to a new planet_9 only if the satellite_4 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_4 from planet_9 to phenomenon_6 <EFFECT> Once the satellite_4 is turned to a new planet_9, the satellite_4 is no longer pointing to the previous phenomenon_6 but is pointing to the new planet_9. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_6 with a specific infrared_mode_1 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is power-on. An image of a direction phenomenon_6 with a specific infrared_mode_1 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is calibrated. An image of a direction phenomenon_6 with a specific infrared_mode_1 can be taken using an instrument_11 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_6. An image of a direction phenomenon_6 with a specific infrared_mode_1 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is on board the satellite_4. An image of a direction phenomenon_6 with a specific infrared_mode_1 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 supports the infrared_mode_1. </PRECON> take image of phenomenon_6 using instrument_11 on satellite_4 with infrared_mode_1 <EFFECT> Once an image of a direction phenomenon_6 with a specific infrared_mode_1 is taken using an instrument_11 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_6 to a new planet_9 only if the satellite_4 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_4 from planet_9 to phenomenon_6 <EFFECT> Once the satellite_4 is turned to a new planet_9, the satellite_4 is no longer pointing to the previous phenomenon_6 but is pointing to the new planet_9. </EFFECT> \n <PRECON> An image of a direction planet_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is power-on. An image of a direction planet_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is calibrated. An image of a direction planet_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the satellite_4 is pointing to the direction planet_9. An image of a direction planet_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is on board the satellite_4. An image of a direction planet_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 supports the thermograph_mode_3. </PRECON> take image of planet_9 using instrument_11 on satellite_4 with thermograph_mode_3 <EFFECT> Once an image of a direction planet_9 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_4, we will have the image. </EFFECT> \n</PLAN>", "plan_length": 19, "raw_plan": ["(switch_on instrument11 satellite4)", "(switch_on instrument5 satellite1)", "(calibrate satellite1 instrument5 groundstation3)", "(turn_to satellite3 phenomenon10 planet9)", "(turn_to satellite2 groundstation3 groundstation0)", "(turn_to satellite1 phenomenon8 groundstation3)", "(take_image satellite1 phenomenon8 instrument5 thermograph2)", "(turn_to satellite1 star7 phenomenon8)", "(take_image satellite1 star7 instrument5 thermograph2)", "(turn_to satellite4 groundstation3 phenomenon6)", "(calibrate satellite4 instrument11 groundstation3)", "(turn_to satellite4 phenomenon10 groundstation3)", "(take_image satellite4 phenomenon10 instrument11 thermograph3)", "(turn_to satellite4 phenomenon5 phenomenon10)", "(take_image satellite4 phenomenon5 instrument11 spectrograph0)", "(turn_to satellite4 phenomenon6 phenomenon5)", "(take_image satellite4 phenomenon6 instrument11 infrared1)", "(turn_to satellite4 planet9 phenomenon6)", "(take_image satellite4 planet9 instrument11 thermograph3)"], "full_text_prompt": "I have to plan the operations of satellites in space. These satellites are equipped with various instruments that can be used to take images of different directions in space using specific modes. The satellites can be turned, their instruments can be switched on and off, calibrated, and used to take images.\nHere are the actions that can be performed:\nTurn a satellite to a direction.\nSwitch on an instrument on a satellite.\nSwitch off an instrument on a satellite.\nCalibrate an instrument on a satellite by pointing it to a calibration target.\nTake an image of a direction using an instrument with a specific mode.\nThe following are the restrictions on the actions:\nA satellite can be turned from a previous direction to a new direction only if the satellite is currently pointing to the previous direction.\nOnce the satellite is turned to a new direction, the satellite is no longer pointing to the previous direction but is pointing to the new direction.\nAn instrument can be switched on on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched on on a satellite only if the instrument is power-available.\nOnce the instrument is switched on on a satellite, the instrument is power-on.\nOnce the instrument is switched on on a satellite, the instrument is no longer power-available.\nOnce the instrument is switched on on a satellite, the instrument becomes not calibrated.\nAn instrument can be switched off on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched off on a satellite only if the instrument is power-on.\nOnce the instrument is switched off on a satellite, the instrument is power-available.\nOnce the instrument is switched off on a satellite, the instrument is no longer power-on.\nAn instrument can be calibrated on a satellite only if the instrument is on board the satellite.\nAn instrument can be calibrated on a satellite only if the instrument is power-on.\nAn instrument can be calibrated on a satellite only if the instrument is pointing to the calibration target.\nOnce the instrument is calibrated on a satellite, the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is on board the satellite.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is power-on.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the satellite is pointing to the direction.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument supports the mode.\nOnce an image of a direction with a specific mode is taken using an instrument on a satellite, we will have the image.As initial conditions I have that, instrument_13 is on board satellite_4, instrument_3 supports spectrograph_mode_0, instrument_0 supports thermograph_mode_3, instrument_1 is on board satellite_0, the calibration target of instrument_4 is star_1, instrument_5 supports thermograph_mode_2, instrument_8 is on board satellite_3, the calibration target of instrument_10 is ground_station_4, instrument_11 is on board satellite_4, instrument_6 is on board satellite_1, instrument_7 supports thermograph_mode_3, instrument_0 is on board satellite_0, instrument_0 supports thermograph_mode_2, the calibration target of instrument_0 is ground_station_3, instrument_2 supports thermograph_mode_2, the calibration target of instrument_12 is ground_station_0, instrument_10 supports spectrograph_mode_0, instrument_6 supports thermograph_mode_2, instrument_5 is on board satellite_1, instrument_3 supports infrared_mode_1, instrument_9 is on board satellite_3, the calibration target of instrument_6 is ground_station_3, instrument_7 is on board satellite_2, the calibration target of instrument_9 is ground_station_2, instrument_8 supports thermograph_mode_2, instrument_13 supports infrared_mode_1, satellite_0 is power-available, instrument_4 supports thermograph_mode_3, instrument_6 supports spectrograph_mode_0, the calibration target of instrument_5 is ground_station_3, instrument_1 supports thermograph_mode_2, satellite_2 is pointing to ground_station_0, instrument_1 supports spectrograph_mode_0, instrument_8 supports infrared_mode_1, instrument_12 supports thermograph_mode_3, instrument_10 is on board satellite_3, the calibration target of instrument_11 is ground_station_3, instrument_2 is on board satellite_1, instrument_8 supports spectrograph_mode_0, satellite_3 is pointing to planet_9, instrument_4 is on board satellite_1, satellite_1 is power-available, satellite_2 is power-available, instrument_2 supports spectrograph_mode_0, instrument_11 supports thermograph_mode_3, satellite_1 is pointing to ground_station_3, instrument_12 is on board satellite_4, satellite_3 is power-available, the calibration target of instrument_3 is ground_station_0, the calibration target of instrument_1 is star_1, the calibration target of instrument_2 is star_1, satellite_4 is pointing to phenomenon_6, the calibration target of instrument_8 is ground_station_3, instrument_11 supports spectrograph_mode_0, instrument_4 supports thermograph_mode_2, instrument_9 supports infrared_mode_1, satellite_0 is pointing to ground_station_0, instrument_12 supports thermograph_mode_2, the calibration target of instrument_13 is star_1, instrument_3 is on board satellite_1, instrument_11 supports infrared_mode_1, instrument_3 supports thermograph_mode_2, satellite_4 is power-available, the calibration target of instrument_7 is star_1.My goal is to have that satellite_2 is pointing to ground_station_3, star_7 has image in thermograph_mode_2, phenomenon_10 has image in thermograph_mode_3, satellite_3 is pointing to phenomenon_10, phenomenon_8 has image in thermograph_mode_2, phenomenon_5 has image in spectrograph_mode_0, planet_9 has image in thermograph_mode_3, phenomenon_6 has image in infrared_mode_1.My plan is as follows:\n<PLAN>\n <PRECON> An instrument_11 can be switched on on a satellite_4 only if the instrument_11 is on board the satellite_4. An instrument_11 can be switched on on a satellite_4 only if the instrument_11 is power-available. </PRECON> switch on instrument_11 on satellite_4 <EFFECT> Once the instrument_11 is switched on on a satellite_4, the instrument_11 becomes not calibrated. Once the instrument_11 is switched on on a satellite_4, the instrument_11 is power-on. Once the instrument_11 is switched on on a satellite_4, the instrument_11 is no longer power-available. </EFFECT> \n <PRECON> An instrument_5 can be switched on on a satellite_1 only if the instrument_5 is on board the satellite_1. An instrument_5 can be switched on on a satellite_1 only if the instrument_5 is power-available. </PRECON> switch on instrument_5 on satellite_1 <EFFECT> Once the instrument_5 is switched on on a satellite_1, the instrument_5 becomes not calibrated. Once the instrument_5 is switched on on a satellite_1, the instrument_5 is power-on. Once the instrument_5 is switched on on a satellite_1, the instrument_5 is no longer power-available. </EFFECT> \n <PRECON> An instrument_5 can be calibrated on a satellite_1 only if the instrument_5 is pointing to the calibration target ground_station_3. An instrument_5 can be calibrated on a satellite_1 only if the instrument_5 is power-on. An instrument_5 can be calibrated on a satellite_1 only if the instrument_5 is on board the satellite_1. </PRECON> calibrate instrument_5 on satellite_1 pointing to calibration target ground_station_3 <EFFECT> Once the instrument_5 is calibrated on a satellite_1, the instrument_5 is calibrated. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous planet_9 to a new phenomenon_10 only if the satellite_3 is currently pointing to the previous planet_9. </PRECON> turn satellite_3 from phenomenon_10 to planet_9 <EFFECT> Once the satellite_3 is turned to a new phenomenon_10, the satellite_3 is no longer pointing to the previous planet_9 but is pointing to the new phenomenon_10. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_0 to a new ground_station_3 only if the satellite_2 is currently pointing to the previous ground_station_0. </PRECON> turn satellite_2 from ground_station_3 to ground_station_0 <EFFECT> Once the satellite_2 is turned to a new ground_station_3, the satellite_2 is no longer pointing to the previous ground_station_0 but is pointing to the new ground_station_3. </EFFECT> \n <PRECON> An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is power-on. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is calibrated. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_10. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is on board the satellite_4. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 supports the thermograph_mode_3. </PRECON> take image of phenomenon_10 using instrument_11 on satellite_4 with thermograph_mode_3 <EFFECT> Once an image of a direction phenomenon_10 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_4, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_1 can be turned from a previous ground_station_3 to a new phenomenon_8 only if the satellite_1 is currently pointing to the previous ground_station_3. </PRECON> turn satellite_1 from phenomenon_8 to ground_station_3 <EFFECT> Once the satellite_1 is turned to a new phenomenon_8, the satellite_1 is no longer pointing to the previous ground_station_3 but is pointing to the new phenomenon_8. </EFFECT> \n <PRECON> An image of a direction phenomenon_8 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is power-on. An image of a direction phenomenon_8 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is calibrated. An image of a direction phenomenon_8 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the satellite_1 is pointing to the direction phenomenon_8. An image of a direction phenomenon_8 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is on board the satellite_1. An image of a direction phenomenon_8 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 supports the thermograph_mode_2. </PRECON> take image of phenomenon_8 using instrument_5 on satellite_1 with thermograph_mode_2 <EFFECT> Once an image of a direction phenomenon_8 with a specific thermograph_mode_2 is taken using an instrument_5 on a satellite_1, we will have the image. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_8 to a new star_7 only if the satellite_1 is currently pointing to the previous phenomenon_8. </PRECON> turn satellite_1 from star_7 to phenomenon_8 <EFFECT> Once the satellite_1 is turned to a new star_7, the satellite_1 is no longer pointing to the previous phenomenon_8 but is pointing to the new star_7. </EFFECT> \n <PRECON> An image of a direction star_7 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is power-on. An image of a direction star_7 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is calibrated. An image of a direction star_7 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the satellite_1 is pointing to the direction star_7. An image of a direction star_7 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 is on board the satellite_1. An image of a direction star_7 with a specific thermograph_mode_2 can be taken using an instrument_5 on a satellite_1 only if the instrument_5 supports the thermograph_mode_2. </PRECON> take image of star_7 using instrument_5 on satellite_1 with thermograph_mode_2 <EFFECT> Once an image of a direction star_7 with a specific thermograph_mode_2 is taken using an instrument_5 on a satellite_1, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_6 to a new planet_9 only if the satellite_4 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_4 from planet_9 to phenomenon_6 <EFFECT> Once the satellite_4 is turned to a new planet_9, the satellite_4 is no longer pointing to the previous phenomenon_6 but is pointing to the new planet_9. </EFFECT> WRONG \n <PRECON> A satellite_4 can be turned from a previous phenomenon_6 to a new ground_station_3 only if the satellite_4 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_4 from ground_station_3 to phenomenon_6 <EFFECT> Once the satellite_4 is turned to a new ground_station_3, the satellite_4 is no longer pointing to the previous phenomenon_6 but is pointing to the new ground_station_3. </EFFECT> \n <PRECON> An instrument_11 can be calibrated on a satellite_4 only if the instrument_11 is pointing to the calibration target ground_station_3. An instrument_11 can be calibrated on a satellite_4 only if the instrument_11 is power-on. An instrument_11 can be calibrated on a satellite_4 only if the instrument_11 is on board the satellite_4. </PRECON> calibrate instrument_11 on satellite_4 pointing to calibration target ground_station_3 <EFFECT> Once the instrument_11 is calibrated on a satellite_4, the instrument_11 is calibrated. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous ground_station_3 to a new phenomenon_10 only if the satellite_4 is currently pointing to the previous ground_station_3. </PRECON> turn satellite_4 from phenomenon_10 to ground_station_3 <EFFECT> Once the satellite_4 is turned to a new phenomenon_10, the satellite_4 is no longer pointing to the previous ground_station_3 but is pointing to the new phenomenon_10. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_10 to a new phenomenon_5 only if the satellite_4 is currently pointing to the previous phenomenon_10. </PRECON> turn satellite_4 from phenomenon_5 to phenomenon_10 <EFFECT> Once the satellite_4 is turned to a new phenomenon_5, the satellite_4 is no longer pointing to the previous phenomenon_10 but is pointing to the new phenomenon_5. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is power-on. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is calibrated. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_10. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is on board the satellite_4. An image of a direction phenomenon_10 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 supports the thermograph_mode_3. </PRECON> take image of phenomenon_10 using instrument_11 on satellite_4 with thermograph_mode_3 <EFFECT> Once an image of a direction phenomenon_10 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_10 to a new phenomenon_5 only if the satellite_4 is currently pointing to the previous phenomenon_10. </PRECON> turn satellite_4 from phenomenon_5 to phenomenon_10 <EFFECT> Once the satellite_4 is turned to a new phenomenon_5, the satellite_4 is no longer pointing to the previous phenomenon_10 but is pointing to the new phenomenon_5. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_5 to a new phenomenon_6 only if the satellite_4 is currently pointing to the previous phenomenon_5. </PRECON> turn satellite_4 from phenomenon_6 to phenomenon_5 <EFFECT> Once the satellite_4 is turned to a new phenomenon_6, the satellite_4 is no longer pointing to the previous phenomenon_5 but is pointing to the new phenomenon_6. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_5 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is power-on. An image of a direction phenomenon_5 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is calibrated. An image of a direction phenomenon_5 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_5. An image of a direction phenomenon_5 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is on board the satellite_4. An image of a direction phenomenon_5 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 supports the spectrograph_mode_0. </PRECON> take image of phenomenon_5 using instrument_11 on satellite_4 with spectrograph_mode_0 <EFFECT> Once an image of a direction phenomenon_5 with a specific spectrograph_mode_0 is taken using an instrument_11 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_5 to a new phenomenon_6 only if the satellite_4 is currently pointing to the previous phenomenon_5. </PRECON> turn satellite_4 from phenomenon_6 to phenomenon_5 <EFFECT> Once the satellite_4 is turned to a new phenomenon_6, the satellite_4 is no longer pointing to the previous phenomenon_5 but is pointing to the new phenomenon_6. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_6 to a new planet_9 only if the satellite_4 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_4 from planet_9 to phenomenon_6 <EFFECT> Once the satellite_4 is turned to a new planet_9, the satellite_4 is no longer pointing to the previous phenomenon_6 but is pointing to the new planet_9. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_6 with a specific infrared_mode_1 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is power-on. An image of a direction phenomenon_6 with a specific infrared_mode_1 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is calibrated. An image of a direction phenomenon_6 with a specific infrared_mode_1 can be taken using an instrument_11 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_6. An image of a direction phenomenon_6 with a specific infrared_mode_1 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is on board the satellite_4. An image of a direction phenomenon_6 with a specific infrared_mode_1 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 supports the infrared_mode_1. </PRECON> take image of phenomenon_6 using instrument_11 on satellite_4 with infrared_mode_1 <EFFECT> Once an image of a direction phenomenon_6 with a specific infrared_mode_1 is taken using an instrument_11 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_6 to a new planet_9 only if the satellite_4 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_4 from planet_9 to phenomenon_6 <EFFECT> Once the satellite_4 is turned to a new planet_9, the satellite_4 is no longer pointing to the previous phenomenon_6 but is pointing to the new planet_9. </EFFECT> \n <PRECON> An image of a direction planet_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is power-on. An image of a direction planet_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is calibrated. An image of a direction planet_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the satellite_4 is pointing to the direction planet_9. An image of a direction planet_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 is on board the satellite_4. An image of a direction planet_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_4 only if the instrument_11 supports the thermograph_mode_3. </PRECON> take image of planet_9 using instrument_11 on satellite_4 with thermograph_mode_3 <EFFECT> Once an image of a direction planet_9 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_4, we will have the image. </EFFECT> \n</PLAN>"}
{"domain": "satellite", "instance_id": "40", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the operations of satellites in space. These satellites are equipped with various instruments that can be used to take images of different directions in space using specific modes. The satellites can be turned, their instruments can be switched on and off, calibrated, and used to take images.\nHere are the actions that can be performed:\nTurn a satellite to a direction.\nSwitch on an instrument on a satellite.\nSwitch off an instrument on a satellite.\nCalibrate an instrument on a satellite by pointing it to a calibration target.\nTake an image of a direction using an instrument with a specific mode.\nThe following are the restrictions on the actions:\nA satellite can be turned from a previous direction to a new direction only if the satellite is currently pointing to the previous direction.\nOnce the satellite is turned to a new direction, the satellite is no longer pointing to the previous direction but is pointing to the new direction.\nAn instrument can be switched on on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched on on a satellite only if the instrument is power-available.\nOnce the instrument is switched on on a satellite, the instrument is power-on.\nOnce the instrument is switched on on a satellite, the instrument is no longer power-available.\nOnce the instrument is switched on on a satellite, the instrument becomes not calibrated.\nAn instrument can be switched off on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched off on a satellite only if the instrument is power-on.\nOnce the instrument is switched off on a satellite, the instrument is power-available.\nOnce the instrument is switched off on a satellite, the instrument is no longer power-on.\nAn instrument can be calibrated on a satellite only if the instrument is on board the satellite.\nAn instrument can be calibrated on a satellite only if the instrument is power-on.\nAn instrument can be calibrated on a satellite only if the instrument is pointing to the calibration target.\nOnce the instrument is calibrated on a satellite, the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is on board the satellite.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is power-on.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the satellite is pointing to the direction.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument supports the mode.\nOnce an image of a direction with a specific mode is taken using an instrument on a satellite, we will have the image.", "input": "As initial conditions I have that, instrument_1 supports spectrograph_mode_2, instrument_3 supports spectrograph_mode_0, the calibration target of instrument_11 is ground_station_1, satellite_1 is pointing to phenomenon_7, instrument_3 is on board satellite_0, instrument_9 supports thermograph_mode_3, instrument_0 is on board satellite_0, the calibration target of instrument_10 is ground_station_2, instrument_2 is on board satellite_0, the calibration target of instrument_2 is ground_station_2, satellite_3 is pointing to ground_station_1, instrument_8 supports thermograph_mode_3, instrument_10 is on board satellite_3, instrument_1 supports thermograph_mode_3, instrument_11 supports spectrograph_mode_2, instrument_4 supports thermograph_mode_1, instrument_0 supports thermograph_mode_3, satellite_0 is power-available, instrument_2 supports spectrograph_mode_2, instrument_11 is on board satellite_3, instrument_10 supports thermograph_mode_3, instrument_7 is on board satellite_2, instrument_10 supports thermograph_mode_1, the calibration target of instrument_7 is ground_station_3, instrument_8 is on board satellite_2, instrument_6 is on board satellite_2, the calibration target of instrument_4 is ground_station_2, instrument_5 supports spectrograph_mode_0, instrument_9 supports spectrograph_mode_2, instrument_6 supports spectrograph_mode_0, satellite_2 is power-available, satellite_1 is power-available, the calibration target of instrument_6 is ground_station_3, instrument_12 is on board satellite_3, satellite_2 is pointing to ground_station_1, instrument_12 supports spectrograph_mode_2, instrument_3 supports thermograph_mode_1, satellite_3 is power-available, instrument_5 supports thermograph_mode_3, instrument_5 supports spectrograph_mode_2, instrument_2 supports spectrograph_mode_0, instrument_1 is on board satellite_0, the calibration target of instrument_1 is star_0, instrument_11 supports thermograph_mode_3, the calibration target of instrument_5 is ground_station_2, instrument_11 supports spectrograph_mode_0, instrument_9 supports thermograph_mode_1, instrument_9 is on board satellite_3, instrument_4 is on board satellite_1, instrument_5 is on board satellite_2, the calibration target of instrument_12 is star_0, instrument_8 supports spectrograph_mode_2, instrument_8 supports spectrograph_mode_0, instrument_7 supports spectrograph_mode_0, the calibration target of instrument_9 is star_0, satellite_0 is pointing to ground_station_3, instrument_12 supports thermograph_mode_3, instrument_10 supports spectrograph_mode_2, the calibration target of instrument_0 is ground_station_1, instrument_2 supports thermograph_mode_1, the calibration target of instrument_3 is ground_station_2, the calibration target of instrument_8 is star_0, instrument_7 supports spectrograph_mode_2.\nMy goal is to have that phenomenon_7 has image in thermograph_mode_3, planet_4 has image in thermograph_mode_1, star_5 has image in spectrograph_mode_2, star_9 has image in thermograph_mode_3, phenomenon_6 has image in spectrograph_mode_0, satellite_1 is pointing to ground_station_1, planet_8 has image in spectrograph_mode_0.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> An instrument_11 can be switched on on a satellite_3 only if the instrument_11 is on board the satellite_3. An instrument_11 can be switched on on a satellite_3 only if the instrument_11 is power-available. </PRECON> switch on instrument_11 on satellite_3 <EFFECT> Once the instrument_11 is switched on on a satellite_3, the instrument_11 is power-on. Once the instrument_11 is switched on on a satellite_3, the instrument_11 becomes not calibrated. Once the instrument_11 is switched on on a satellite_3, the instrument_11 is no longer power-available. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous phenomenon_6 to a new phenomenon_7 only if the satellite_3 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_3 from phenomenon_7 to phenomenon_6 <EFFECT> Once the satellite_3 is turned to a new phenomenon_7, the satellite_3 is no longer pointing to the previous phenomenon_6 but is pointing to the new phenomenon_7. </EFFECT> WRONG \n <PRECON> A satellite_3 can be turned from a previous star_5 to a new star_9 only if the satellite_3 is currently pointing to the previous star_5. </PRECON> turn satellite_3 from star_9 to star_5 <EFFECT> Once the satellite_3 is turned to a new star_9, the satellite_3 is no longer pointing to the previous star_5 but is pointing to the new star_9. </EFFECT> WRONG \n <PRECON> An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is pointing to the calibration target ground_station_1. An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is on board the satellite_3. An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is power-on. </PRECON> calibrate instrument_11 on satellite_3 pointing to calibration target ground_station_1 <EFFECT> Once the instrument_11 is calibrated on a satellite_3, the instrument_11 is calibrated. </EFFECT> \n <PRECON> An instrument_3 can be switched on on a satellite_0 only if the instrument_3 is on board the satellite_0. An instrument_3 can be switched on on a satellite_0 only if the instrument_3 is power-available. </PRECON> switch on instrument_3 on satellite_0 <EFFECT> Once the instrument_3 is switched on on a satellite_0, the instrument_3 is power-on. Once the instrument_3 is switched on on a satellite_0, the instrument_3 becomes not calibrated. Once the instrument_3 is switched on on a satellite_0, the instrument_3 is no longer power-available. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous ground_station_1 to a new phenomenon_6 only if the satellite_3 is currently pointing to the previous ground_station_1. </PRECON> turn satellite_3 from phenomenon_6 to ground_station_1 <EFFECT> Once the satellite_3 is turned to a new phenomenon_6, the satellite_3 is no longer pointing to the previous ground_station_1 but is pointing to the new phenomenon_6. </EFFECT> \n <PRECON> An image of a direction phenomenon_6 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the spectrograph_mode_0. An image of a direction phenomenon_6 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction phenomenon_6 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction phenomenon_6 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction phenomenon_6 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction phenomenon_6. </PRECON> take image of phenomenon_6 using instrument_11 on satellite_3 with spectrograph_mode_0 <EFFECT> Once an image of a direction phenomenon_6 with a specific spectrograph_mode_0 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous phenomenon_6 to a new phenomenon_7 only if the satellite_3 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_3 from phenomenon_7 to phenomenon_6 <EFFECT> Once the satellite_3 is turned to a new phenomenon_7, the satellite_3 is no longer pointing to the previous phenomenon_6 but is pointing to the new phenomenon_7. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_7 to a new ground_station_1 only if the satellite_1 is currently pointing to the previous phenomenon_7. </PRECON> turn satellite_1 from ground_station_1 to phenomenon_7 <EFFECT> Once the satellite_1 is turned to a new ground_station_1, the satellite_1 is no longer pointing to the previous phenomenon_7 but is pointing to the new ground_station_1. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_7 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the thermograph_mode_3. An image of a direction phenomenon_7 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction phenomenon_7 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction phenomenon_7 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction phenomenon_7 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction phenomenon_7. </PRECON> take image of phenomenon_7 using instrument_11 on satellite_3 with thermograph_mode_3 <EFFECT> Once an image of a direction phenomenon_7 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the thermograph_mode_3. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction star_9. </PRECON> take image of star_9 using instrument_11 on satellite_3 with thermograph_mode_3 <EFFECT> Once an image of a direction star_9 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_3 can be turned from a previous phenomenon_7 to a new planet_8 only if the satellite_3 is currently pointing to the previous phenomenon_7. </PRECON> turn satellite_3 from planet_8 to phenomenon_7 <EFFECT> Once the satellite_3 is turned to a new planet_8, the satellite_3 is no longer pointing to the previous phenomenon_7 but is pointing to the new planet_8. </EFFECT> \n <PRECON> An image of a direction planet_8 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the spectrograph_mode_0. An image of a direction planet_8 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction planet_8 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction planet_8 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction planet_8 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction planet_8. </PRECON> take image of planet_8 using instrument_11 on satellite_3 with spectrograph_mode_0 <EFFECT> Once an image of a direction planet_8 with a specific spectrograph_mode_0 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous planet_8 to a new star_5 only if the satellite_3 is currently pointing to the previous planet_8. </PRECON> turn satellite_3 from star_5 to planet_8 <EFFECT> Once the satellite_3 is turned to a new star_5, the satellite_3 is no longer pointing to the previous planet_8 but is pointing to the new star_5. </EFFECT> \n <PRECON> An image of a direction star_5 with a specific spectrograph_mode_2 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the spectrograph_mode_2. An image of a direction star_5 with a specific spectrograph_mode_2 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction star_5 with a specific spectrograph_mode_2 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction star_5 with a specific spectrograph_mode_2 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction star_5 with a specific spectrograph_mode_2 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction star_5. </PRECON> take image of star_5 using instrument_11 on satellite_3 with spectrograph_mode_2 <EFFECT> Once an image of a direction star_5 with a specific spectrograph_mode_2 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> A satellite_0 can be turned from a previous ground_station_3 to a new ground_station_2 only if the satellite_0 is currently pointing to the previous ground_station_3. </PRECON> turn satellite_0 from ground_station_2 to ground_station_3 <EFFECT> Once the satellite_0 is turned to a new ground_station_2, the satellite_0 is no longer pointing to the previous ground_station_3 but is pointing to the new ground_station_2. </EFFECT> WRONG \n <PRECON> A satellite_3 can be turned from a previous star_5 to a new star_9 only if the satellite_3 is currently pointing to the previous star_5. </PRECON> turn satellite_3 from star_9 to star_5 <EFFECT> Once the satellite_3 is turned to a new star_9, the satellite_3 is no longer pointing to the previous star_5 but is pointing to the new star_9. </EFFECT> \n <PRECON> An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the thermograph_mode_3. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction star_9. </PRECON> take image of star_9 using instrument_11 on satellite_3 with thermograph_mode_3 <EFFECT> Once an image of a direction star_9 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_7 to a new ground_station_1 only if the satellite_1 is currently pointing to the previous phenomenon_7. </PRECON> turn satellite_1 from ground_station_1 to phenomenon_7 <EFFECT> Once the satellite_1 is turned to a new ground_station_1, the satellite_1 is no longer pointing to the previous phenomenon_7 but is pointing to the new ground_station_1. </EFFECT> \n <PRECON> A satellite_0 can be turned from a previous ground_station_3 to a new ground_station_2 only if the satellite_0 is currently pointing to the previous ground_station_3. </PRECON> turn satellite_0 from ground_station_2 to ground_station_3 <EFFECT> Once the satellite_0 is turned to a new ground_station_2, the satellite_0 is no longer pointing to the previous ground_station_3 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> An instrument_3 can be calibrated on a satellite_0 only if the instrument_3 is pointing to the calibration target ground_station_2. An instrument_3 can be calibrated on a satellite_0 only if the instrument_3 is on board the satellite_0. An instrument_3 can be calibrated on a satellite_0 only if the instrument_3 is power-on. </PRECON> calibrate instrument_3 on satellite_0 pointing to calibration target ground_station_2 <EFFECT> Once the instrument_3 is calibrated on a satellite_0, the instrument_3 is calibrated. </EFFECT> \n <PRECON> A satellite_0 can be turned from a previous ground_station_2 to a new planet_4 only if the satellite_0 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_0 from planet_4 to ground_station_2 <EFFECT> Once the satellite_0 is turned to a new planet_4, the satellite_0 is no longer pointing to the previous ground_station_2 but is pointing to the new planet_4. </EFFECT> \n <PRECON> An image of a direction planet_4 with a specific thermograph_mode_1 can be taken using an instrument_3 on a satellite_0 only if the instrument_3 supports the thermograph_mode_1. An image of a direction planet_4 with a specific thermograph_mode_1 can be taken using an instrument_3 on a satellite_0 only if the instrument_3 is power-on. An image of a direction planet_4 with a specific thermograph_mode_1 can be taken using an instrument_3 on a satellite_0 only if the instrument_3 is on board the satellite_0. An image of a direction planet_4 with a specific thermograph_mode_1 can be taken using an instrument_3 on a satellite_0 only if the instrument_3 is calibrated. An image of a direction planet_4 with a specific thermograph_mode_1 can be taken using an instrument_3 on a satellite_0 only if the satellite_0 is pointing to the direction planet_4. </PRECON> take image of planet_4 using instrument_3 on satellite_0 with thermograph_mode_1 <EFFECT> Once an image of a direction planet_4 with a specific thermograph_mode_1 is taken using an instrument_3 on a satellite_0, we will have the image. </EFFECT> \n</PLAN>", "plan_length": 18, "raw_plan": ["(switch_on instrument11 satellite3)", "(calibrate satellite3 instrument11 groundstation1)", "(switch_on instrument3 satellite0)", "(turn_to satellite3 phenomenon6 groundstation1)", "(take_image satellite3 phenomenon6 instrument11 spectrograph0)", "(turn_to satellite3 phenomenon7 phenomenon6)", "(take_image satellite3 phenomenon7 instrument11 thermograph3)", "(turn_to satellite3 planet8 phenomenon7)", "(take_image satellite3 planet8 instrument11 spectrograph0)", "(turn_to satellite3 star5 planet8)", "(take_image satellite3 star5 instrument11 spectrograph2)", "(turn_to satellite3 star9 star5)", "(take_image satellite3 star9 instrument11 thermograph3)", "(turn_to satellite1 groundstation1 phenomenon7)", "(turn_to satellite0 groundstation2 groundstation3)", "(calibrate satellite0 instrument3 groundstation2)", "(turn_to satellite0 planet4 groundstation2)", "(take_image satellite0 planet4 instrument3 thermograph1)"], "full_text_prompt": "I have to plan the operations of satellites in space. These satellites are equipped with various instruments that can be used to take images of different directions in space using specific modes. The satellites can be turned, their instruments can be switched on and off, calibrated, and used to take images.\nHere are the actions that can be performed:\nTurn a satellite to a direction.\nSwitch on an instrument on a satellite.\nSwitch off an instrument on a satellite.\nCalibrate an instrument on a satellite by pointing it to a calibration target.\nTake an image of a direction using an instrument with a specific mode.\nThe following are the restrictions on the actions:\nA satellite can be turned from a previous direction to a new direction only if the satellite is currently pointing to the previous direction.\nOnce the satellite is turned to a new direction, the satellite is no longer pointing to the previous direction but is pointing to the new direction.\nAn instrument can be switched on on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched on on a satellite only if the instrument is power-available.\nOnce the instrument is switched on on a satellite, the instrument is power-on.\nOnce the instrument is switched on on a satellite, the instrument is no longer power-available.\nOnce the instrument is switched on on a satellite, the instrument becomes not calibrated.\nAn instrument can be switched off on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched off on a satellite only if the instrument is power-on.\nOnce the instrument is switched off on a satellite, the instrument is power-available.\nOnce the instrument is switched off on a satellite, the instrument is no longer power-on.\nAn instrument can be calibrated on a satellite only if the instrument is on board the satellite.\nAn instrument can be calibrated on a satellite only if the instrument is power-on.\nAn instrument can be calibrated on a satellite only if the instrument is pointing to the calibration target.\nOnce the instrument is calibrated on a satellite, the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is on board the satellite.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is power-on.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the satellite is pointing to the direction.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument supports the mode.\nOnce an image of a direction with a specific mode is taken using an instrument on a satellite, we will have the image.As initial conditions I have that, instrument_1 supports spectrograph_mode_2, instrument_3 supports spectrograph_mode_0, the calibration target of instrument_11 is ground_station_1, satellite_1 is pointing to phenomenon_7, instrument_3 is on board satellite_0, instrument_9 supports thermograph_mode_3, instrument_0 is on board satellite_0, the calibration target of instrument_10 is ground_station_2, instrument_2 is on board satellite_0, the calibration target of instrument_2 is ground_station_2, satellite_3 is pointing to ground_station_1, instrument_8 supports thermograph_mode_3, instrument_10 is on board satellite_3, instrument_1 supports thermograph_mode_3, instrument_11 supports spectrograph_mode_2, instrument_4 supports thermograph_mode_1, instrument_0 supports thermograph_mode_3, satellite_0 is power-available, instrument_2 supports spectrograph_mode_2, instrument_11 is on board satellite_3, instrument_10 supports thermograph_mode_3, instrument_7 is on board satellite_2, instrument_10 supports thermograph_mode_1, the calibration target of instrument_7 is ground_station_3, instrument_8 is on board satellite_2, instrument_6 is on board satellite_2, the calibration target of instrument_4 is ground_station_2, instrument_5 supports spectrograph_mode_0, instrument_9 supports spectrograph_mode_2, instrument_6 supports spectrograph_mode_0, satellite_2 is power-available, satellite_1 is power-available, the calibration target of instrument_6 is ground_station_3, instrument_12 is on board satellite_3, satellite_2 is pointing to ground_station_1, instrument_12 supports spectrograph_mode_2, instrument_3 supports thermograph_mode_1, satellite_3 is power-available, instrument_5 supports thermograph_mode_3, instrument_5 supports spectrograph_mode_2, instrument_2 supports spectrograph_mode_0, instrument_1 is on board satellite_0, the calibration target of instrument_1 is star_0, instrument_11 supports thermograph_mode_3, the calibration target of instrument_5 is ground_station_2, instrument_11 supports spectrograph_mode_0, instrument_9 supports thermograph_mode_1, instrument_9 is on board satellite_3, instrument_4 is on board satellite_1, instrument_5 is on board satellite_2, the calibration target of instrument_12 is star_0, instrument_8 supports spectrograph_mode_2, instrument_8 supports spectrograph_mode_0, instrument_7 supports spectrograph_mode_0, the calibration target of instrument_9 is star_0, satellite_0 is pointing to ground_station_3, instrument_12 supports thermograph_mode_3, instrument_10 supports spectrograph_mode_2, the calibration target of instrument_0 is ground_station_1, instrument_2 supports thermograph_mode_1, the calibration target of instrument_3 is ground_station_2, the calibration target of instrument_8 is star_0, instrument_7 supports spectrograph_mode_2.My goal is to have that phenomenon_7 has image in thermograph_mode_3, planet_4 has image in thermograph_mode_1, star_5 has image in spectrograph_mode_2, star_9 has image in thermograph_mode_3, phenomenon_6 has image in spectrograph_mode_0, satellite_1 is pointing to ground_station_1, planet_8 has image in spectrograph_mode_0.My plan is as follows:\n<PLAN>\n <PRECON> An instrument_11 can be switched on on a satellite_3 only if the instrument_11 is on board the satellite_3. An instrument_11 can be switched on on a satellite_3 only if the instrument_11 is power-available. </PRECON> switch on instrument_11 on satellite_3 <EFFECT> Once the instrument_11 is switched on on a satellite_3, the instrument_11 is power-on. Once the instrument_11 is switched on on a satellite_3, the instrument_11 becomes not calibrated. Once the instrument_11 is switched on on a satellite_3, the instrument_11 is no longer power-available. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous phenomenon_6 to a new phenomenon_7 only if the satellite_3 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_3 from phenomenon_7 to phenomenon_6 <EFFECT> Once the satellite_3 is turned to a new phenomenon_7, the satellite_3 is no longer pointing to the previous phenomenon_6 but is pointing to the new phenomenon_7. </EFFECT> WRONG \n <PRECON> A satellite_3 can be turned from a previous star_5 to a new star_9 only if the satellite_3 is currently pointing to the previous star_5. </PRECON> turn satellite_3 from star_9 to star_5 <EFFECT> Once the satellite_3 is turned to a new star_9, the satellite_3 is no longer pointing to the previous star_5 but is pointing to the new star_9. </EFFECT> WRONG \n <PRECON> An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is pointing to the calibration target ground_station_1. An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is on board the satellite_3. An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is power-on. </PRECON> calibrate instrument_11 on satellite_3 pointing to calibration target ground_station_1 <EFFECT> Once the instrument_11 is calibrated on a satellite_3, the instrument_11 is calibrated. </EFFECT> \n <PRECON> An instrument_3 can be switched on on a satellite_0 only if the instrument_3 is on board the satellite_0. An instrument_3 can be switched on on a satellite_0 only if the instrument_3 is power-available. </PRECON> switch on instrument_3 on satellite_0 <EFFECT> Once the instrument_3 is switched on on a satellite_0, the instrument_3 is power-on. Once the instrument_3 is switched on on a satellite_0, the instrument_3 becomes not calibrated. Once the instrument_3 is switched on on a satellite_0, the instrument_3 is no longer power-available. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous ground_station_1 to a new phenomenon_6 only if the satellite_3 is currently pointing to the previous ground_station_1. </PRECON> turn satellite_3 from phenomenon_6 to ground_station_1 <EFFECT> Once the satellite_3 is turned to a new phenomenon_6, the satellite_3 is no longer pointing to the previous ground_station_1 but is pointing to the new phenomenon_6. </EFFECT> \n <PRECON> An image of a direction phenomenon_6 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the spectrograph_mode_0. An image of a direction phenomenon_6 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction phenomenon_6 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction phenomenon_6 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction phenomenon_6 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction phenomenon_6. </PRECON> take image of phenomenon_6 using instrument_11 on satellite_3 with spectrograph_mode_0 <EFFECT> Once an image of a direction phenomenon_6 with a specific spectrograph_mode_0 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous phenomenon_6 to a new phenomenon_7 only if the satellite_3 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_3 from phenomenon_7 to phenomenon_6 <EFFECT> Once the satellite_3 is turned to a new phenomenon_7, the satellite_3 is no longer pointing to the previous phenomenon_6 but is pointing to the new phenomenon_7. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_7 to a new ground_station_1 only if the satellite_1 is currently pointing to the previous phenomenon_7. </PRECON> turn satellite_1 from ground_station_1 to phenomenon_7 <EFFECT> Once the satellite_1 is turned to a new ground_station_1, the satellite_1 is no longer pointing to the previous phenomenon_7 but is pointing to the new ground_station_1. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_7 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the thermograph_mode_3. An image of a direction phenomenon_7 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction phenomenon_7 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction phenomenon_7 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction phenomenon_7 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction phenomenon_7. </PRECON> take image of phenomenon_7 using instrument_11 on satellite_3 with thermograph_mode_3 <EFFECT> Once an image of a direction phenomenon_7 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the thermograph_mode_3. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction star_9. </PRECON> take image of star_9 using instrument_11 on satellite_3 with thermograph_mode_3 <EFFECT> Once an image of a direction star_9 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_3 can be turned from a previous phenomenon_7 to a new planet_8 only if the satellite_3 is currently pointing to the previous phenomenon_7. </PRECON> turn satellite_3 from planet_8 to phenomenon_7 <EFFECT> Once the satellite_3 is turned to a new planet_8, the satellite_3 is no longer pointing to the previous phenomenon_7 but is pointing to the new planet_8. </EFFECT> \n <PRECON> An image of a direction planet_8 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the spectrograph_mode_0. An image of a direction planet_8 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction planet_8 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction planet_8 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction planet_8 with a specific spectrograph_mode_0 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction planet_8. </PRECON> take image of planet_8 using instrument_11 on satellite_3 with spectrograph_mode_0 <EFFECT> Once an image of a direction planet_8 with a specific spectrograph_mode_0 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous planet_8 to a new star_5 only if the satellite_3 is currently pointing to the previous planet_8. </PRECON> turn satellite_3 from star_5 to planet_8 <EFFECT> Once the satellite_3 is turned to a new star_5, the satellite_3 is no longer pointing to the previous planet_8 but is pointing to the new star_5. </EFFECT> \n <PRECON> An image of a direction star_5 with a specific spectrograph_mode_2 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the spectrograph_mode_2. An image of a direction star_5 with a specific spectrograph_mode_2 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction star_5 with a specific spectrograph_mode_2 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction star_5 with a specific spectrograph_mode_2 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction star_5 with a specific spectrograph_mode_2 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction star_5. </PRECON> take image of star_5 using instrument_11 on satellite_3 with spectrograph_mode_2 <EFFECT> Once an image of a direction star_5 with a specific spectrograph_mode_2 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> A satellite_0 can be turned from a previous ground_station_3 to a new ground_station_2 only if the satellite_0 is currently pointing to the previous ground_station_3. </PRECON> turn satellite_0 from ground_station_2 to ground_station_3 <EFFECT> Once the satellite_0 is turned to a new ground_station_2, the satellite_0 is no longer pointing to the previous ground_station_3 but is pointing to the new ground_station_2. </EFFECT> WRONG \n <PRECON> A satellite_3 can be turned from a previous star_5 to a new star_9 only if the satellite_3 is currently pointing to the previous star_5. </PRECON> turn satellite_3 from star_9 to star_5 <EFFECT> Once the satellite_3 is turned to a new star_9, the satellite_3 is no longer pointing to the previous star_5 but is pointing to the new star_9. </EFFECT> \n <PRECON> An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the thermograph_mode_3. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction star_9 with a specific thermograph_mode_3 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction star_9. </PRECON> take image of star_9 using instrument_11 on satellite_3 with thermograph_mode_3 <EFFECT> Once an image of a direction star_9 with a specific thermograph_mode_3 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_7 to a new ground_station_1 only if the satellite_1 is currently pointing to the previous phenomenon_7. </PRECON> turn satellite_1 from ground_station_1 to phenomenon_7 <EFFECT> Once the satellite_1 is turned to a new ground_station_1, the satellite_1 is no longer pointing to the previous phenomenon_7 but is pointing to the new ground_station_1. </EFFECT> \n <PRECON> A satellite_0 can be turned from a previous ground_station_3 to a new ground_station_2 only if the satellite_0 is currently pointing to the previous ground_station_3. </PRECON> turn satellite_0 from ground_station_2 to ground_station_3 <EFFECT> Once the satellite_0 is turned to a new ground_station_2, the satellite_0 is no longer pointing to the previous ground_station_3 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> An instrument_3 can be calibrated on a satellite_0 only if the instrument_3 is pointing to the calibration target ground_station_2. An instrument_3 can be calibrated on a satellite_0 only if the instrument_3 is on board the satellite_0. An instrument_3 can be calibrated on a satellite_0 only if the instrument_3 is power-on. </PRECON> calibrate instrument_3 on satellite_0 pointing to calibration target ground_station_2 <EFFECT> Once the instrument_3 is calibrated on a satellite_0, the instrument_3 is calibrated. </EFFECT> \n <PRECON> A satellite_0 can be turned from a previous ground_station_2 to a new planet_4 only if the satellite_0 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_0 from planet_4 to ground_station_2 <EFFECT> Once the satellite_0 is turned to a new planet_4, the satellite_0 is no longer pointing to the previous ground_station_2 but is pointing to the new planet_4. </EFFECT> \n <PRECON> An image of a direction planet_4 with a specific thermograph_mode_1 can be taken using an instrument_3 on a satellite_0 only if the instrument_3 supports the thermograph_mode_1. An image of a direction planet_4 with a specific thermograph_mode_1 can be taken using an instrument_3 on a satellite_0 only if the instrument_3 is power-on. An image of a direction planet_4 with a specific thermograph_mode_1 can be taken using an instrument_3 on a satellite_0 only if the instrument_3 is on board the satellite_0. An image of a direction planet_4 with a specific thermograph_mode_1 can be taken using an instrument_3 on a satellite_0 only if the instrument_3 is calibrated. An image of a direction planet_4 with a specific thermograph_mode_1 can be taken using an instrument_3 on a satellite_0 only if the satellite_0 is pointing to the direction planet_4. </PRECON> take image of planet_4 using instrument_3 on satellite_0 with thermograph_mode_1 <EFFECT> Once an image of a direction planet_4 with a specific thermograph_mode_1 is taken using an instrument_3 on a satellite_0, we will have the image. </EFFECT> \n</PLAN>"}
{"domain": "satellite", "instance_id": "160", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the operations of satellites in space. These satellites are equipped with various instruments that can be used to take images of different directions in space using specific modes. The satellites can be turned, their instruments can be switched on and off, calibrated, and used to take images.\nHere are the actions that can be performed:\nTurn a satellite to a direction.\nSwitch on an instrument on a satellite.\nSwitch off an instrument on a satellite.\nCalibrate an instrument on a satellite by pointing it to a calibration target.\nTake an image of a direction using an instrument with a specific mode.\nThe following are the restrictions on the actions:\nA satellite can be turned from a previous direction to a new direction only if the satellite is currently pointing to the previous direction.\nOnce the satellite is turned to a new direction, the satellite is no longer pointing to the previous direction but is pointing to the new direction.\nAn instrument can be switched on on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched on on a satellite only if the instrument is power-available.\nOnce the instrument is switched on on a satellite, the instrument is power-on.\nOnce the instrument is switched on on a satellite, the instrument is no longer power-available.\nOnce the instrument is switched on on a satellite, the instrument becomes not calibrated.\nAn instrument can be switched off on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched off on a satellite only if the instrument is power-on.\nOnce the instrument is switched off on a satellite, the instrument is power-available.\nOnce the instrument is switched off on a satellite, the instrument is no longer power-on.\nAn instrument can be calibrated on a satellite only if the instrument is on board the satellite.\nAn instrument can be calibrated on a satellite only if the instrument is power-on.\nAn instrument can be calibrated on a satellite only if the instrument is pointing to the calibration target.\nOnce the instrument is calibrated on a satellite, the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is on board the satellite.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is power-on.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the satellite is pointing to the direction.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument supports the mode.\nOnce an image of a direction with a specific mode is taken using an instrument on a satellite, we will have the image.", "input": "As initial conditions I have that, satellite_0 is power-available, instrument_16 is on board satellite_3, instrument_20 supports thermograph_mode_0, instrument_12 supports spectrograph_mode_1, satellite_3 is power-available, the calibration target of instrument_23 is ground_station_0, satellite_2 is pointing to planet_6, instrument_28 supports spectrograph_mode_1, instrument_8 supports spectrograph_mode_1, instrument_21 supports thermograph_mode_0, the calibration target of instrument_3 is ground_station_0, instrument_7 supports spectrograph_mode_1, the calibration target of instrument_21 is ground_station_0, the calibration target of instrument_12 is ground_station_0, instrument_32 supports thermograph_mode_0, instrument_23 supports thermograph_mode_0, the calibration target of instrument_31 is ground_station_0, instrument_12 supports thermograph_mode_0, instrument_29 is on board satellite_5, instrument_4 is on board satellite_0, instrument_19 supports thermograph_mode_0, instrument_23 is on board satellite_4, instrument_6 supports spectrograph_mode_1, instrument_16 supports thermograph_mode_0, instrument_18 is on board satellite_3, instrument_6 supports thermograph_mode_0, instrument_20 supports spectrograph_mode_1, instrument_22 is on board satellite_4, instrument_21 is on board satellite_4, instrument_5 supports spectrograph_mode_1, instrument_6 is on board satellite_1, satellite_4 is pointing to planet_8, instrument_17 supports spectrograph_mode_1, instrument_22 supports thermograph_mode_0, the calibration target of instrument_29 is ground_station_0, instrument_28 is on board satellite_5, instrument_25 is on board satellite_4, instrument_25 supports spectrograph_mode_1, satellite_1 is pointing to star_5, instrument_1 is on board satellite_0, instrument_20 is on board satellite_3, instrument_10 is on board satellite_1, instrument_9 supports thermograph_mode_0, the calibration target of instrument_30 is ground_station_0, the calibration target of instrument_33 is ground_station_0, instrument_26 supports spectrograph_mode_1, instrument_30 supports thermograph_mode_0, the calibration target of instrument_7 is ground_station_0, the calibration target of instrument_28 is ground_station_0, instrument_2 is on board satellite_0, the calibration target of instrument_19 is ground_station_0, the calibration target of instrument_18 is ground_station_0, instrument_29 supports spectrograph_mode_1, instrument_13 is on board satellite_2, instrument_31 supports thermograph_mode_0, instrument_15 is on board satellite_3, the calibration target of instrument_34 is ground_station_0, the calibration target of instrument_24 is ground_station_0, the calibration target of instrument_20 is ground_station_0, the calibration target of instrument_0 is ground_station_0, instrument_35 is on board satellite_6, instrument_34 is on board satellite_6, instrument_3 is on board satellite_0, instrument_31 supports spectrograph_mode_1, instrument_12 is on board satellite_1, instrument_1 supports thermograph_mode_0, the calibration target of instrument_16 is ground_station_0, instrument_1 supports spectrograph_mode_1, instrument_7 is on board satellite_1, the calibration target of instrument_11 is ground_station_0, the calibration target of instrument_32 is ground_station_0, the calibration target of instrument_5 is ground_station_0, instrument_16 supports spectrograph_mode_1, instrument_19 is on board satellite_3, instrument_5 is on board satellite_0, instrument_4 supports spectrograph_mode_1, the calibration target of instrument_22 is ground_station_0, instrument_10 supports thermograph_mode_0, instrument_17 is on board satellite_3, the calibration target of instrument_35 is ground_station_0, instrument_14 is on board satellite_2, instrument_34 supports thermograph_mode_0, instrument_26 is on board satellite_4, the calibration target of instrument_17 is ground_station_0, instrument_18 supports spectrograph_mode_1, instrument_15 supports thermograph_mode_0, instrument_2 supports thermograph_mode_0, the calibration target of instrument_10 is ground_station_0, instrument_2 supports spectrograph_mode_1, satellite_4 is power-available, instrument_9 is on board satellite_1, instrument_5 supports thermograph_mode_0, satellite_3 is pointing to planet_6, satellite_5 is power-available, instrument_3 supports spectrograph_mode_1, instrument_17 supports thermograph_mode_0, the calibration target of instrument_6 is ground_station_0, instrument_33 supports spectrograph_mode_1, the calibration target of instrument_25 is ground_station_0, satellite_2 is power-available, instrument_24 is on board satellite_4, instrument_35 supports spectrograph_mode_1, instrument_24 supports thermograph_mode_0, instrument_11 supports spectrograph_mode_1, instrument_10 supports spectrograph_mode_1, instrument_11 is on board satellite_1, satellite_6 is pointing to phenomenon_7, instrument_14 supports thermograph_mode_0, instrument_28 supports thermograph_mode_0, instrument_3 supports thermograph_mode_0, instrument_11 supports thermograph_mode_0, the calibration target of instrument_13 is ground_station_0, satellite_5 is pointing to star_4, the calibration target of instrument_14 is ground_station_0, instrument_32 is on board satellite_5, the calibration target of instrument_26 is ground_station_0, instrument_0 is on board satellite_0, the calibration target of instrument_27 is ground_station_0, the calibration target of instrument_4 is ground_station_0, the calibration target of instrument_1 is ground_station_0, instrument_21 supports spectrograph_mode_1, the calibration target of instrument_2 is ground_station_0, instrument_13 supports thermograph_mode_0, instrument_8 supports thermograph_mode_0, instrument_33 is on board satellite_6, instrument_27 supports spectrograph_mode_1, instrument_9 supports spectrograph_mode_1, instrument_7 supports thermograph_mode_0, instrument_30 is on board satellite_5, instrument_19 supports spectrograph_mode_1, instrument_26 supports thermograph_mode_0, instrument_8 is on board satellite_1, instrument_27 is on board satellite_4, instrument_23 supports spectrograph_mode_1, instrument_27 supports thermograph_mode_0, the calibration target of instrument_8 is ground_station_0, satellite_0 is pointing to planet_1, instrument_31 is on board satellite_5, instrument_13 supports spectrograph_mode_1, satellite_6 is power-available, the calibration target of instrument_15 is ground_station_0, instrument_30 supports spectrograph_mode_1, satellite_1 is power-available, instrument_0 supports thermograph_mode_0, the calibration target of instrument_9 is ground_station_0.\nMy goal is to have that planet_8 has image in thermograph_mode_0, planet_6 has image in thermograph_mode_0, star_5 has image in spectrograph_mode_1, satellite_4 is pointing to planet_3, satellite_0 is pointing to ground_station_0, star_4 has image in thermograph_mode_0, satellite_1 is pointing to ground_station_0, phenomenon_7 has image in thermograph_mode_0, satellite_6 is pointing to planet_8, satellite_5 is pointing to planet_3, phenomenon_2 has image in thermograph_mode_0, planet_3 has image in spectrograph_mode_1, planet_1 has image in thermograph_mode_0.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> An instrument_27 can be switched on on a satellite_4 only if the instrument_27 is on board the satellite_4. An instrument_27 can be switched on on a satellite_4 only if the instrument_27 is power-available. </PRECON> switch on instrument_27 on satellite_4 <EFFECT> Once the instrument_27 is switched on on a satellite_4, the instrument_27 is no longer power-available. Once the instrument_27 is switched on on a satellite_4, the instrument_27 is power-on. Once the instrument_27 is switched on on a satellite_4, the instrument_27 becomes not calibrated. </EFFECT> \n <PRECON> A satellite_6 can be turned from a previous phenomenon_7 to a new planet_8 only if the satellite_6 is currently pointing to the previous phenomenon_7. </PRECON> turn satellite_6 from planet_8 to phenomenon_7 <EFFECT> Once the satellite_6 is turned to a new planet_8, the satellite_6 is no longer pointing to the previous phenomenon_7 but is pointing to the new planet_8. </EFFECT> \n <PRECON> A satellite_5 can be turned from a previous star_4 to a new planet_3 only if the satellite_5 is currently pointing to the previous star_4. </PRECON> turn satellite_5 from planet_3 to star_4 <EFFECT> Once the satellite_5 is turned to a new planet_3, the satellite_5 is no longer pointing to the previous star_4 but is pointing to the new planet_3. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous star_5 to a new ground_station_0 only if the satellite_1 is currently pointing to the previous star_5. </PRECON> turn satellite_1 from ground_station_0 to star_5 <EFFECT> Once the satellite_1 is turned to a new ground_station_0, the satellite_1 is no longer pointing to the previous star_5 but is pointing to the new ground_station_0. </EFFECT> \n <PRECON> A satellite_0 can be turned from a previous planet_1 to a new ground_station_0 only if the satellite_0 is currently pointing to the previous planet_1. </PRECON> turn satellite_0 from ground_station_0 to planet_1 <EFFECT> Once the satellite_0 is turned to a new ground_station_0, the satellite_0 is no longer pointing to the previous planet_1 but is pointing to the new ground_station_0. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_8 to a new ground_station_0 only if the satellite_4 is currently pointing to the previous planet_8. </PRECON> turn satellite_4 from ground_station_0 to planet_8 <EFFECT> Once the satellite_4 is turned to a new ground_station_0, the satellite_4 is no longer pointing to the previous planet_8 but is pointing to the new ground_station_0. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new star_5 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from star_5 to planet_3 <EFFECT> Once the satellite_4 is turned to a new star_5, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new star_5. </EFFECT> WRONG \n <PRECON> An instrument_27 can be calibrated on a satellite_4 only if the instrument_27 is power-on. An instrument_27 can be calibrated on a satellite_4 only if the instrument_27 is on board the satellite_4. An instrument_27 can be calibrated on a satellite_4 only if the instrument_27 is pointing to the calibration target ground_station_0. </PRECON> calibrate instrument_27 on satellite_4 pointing to calibration target ground_station_0 <EFFECT> Once the instrument_27 is calibrated on a satellite_4, the instrument_27 is calibrated. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous ground_station_0 to a new phenomenon_2 only if the satellite_4 is currently pointing to the previous ground_station_0. </PRECON> turn satellite_4 from phenomenon_2 to ground_station_0 <EFFECT> Once the satellite_4 is turned to a new phenomenon_2, the satellite_4 is no longer pointing to the previous ground_station_0 but is pointing to the new phenomenon_2. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_1 to a new planet_3 only if the satellite_4 is currently pointing to the previous planet_1. </PRECON> turn satellite_4 from planet_3 to planet_1 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous planet_1 but is pointing to the new planet_3. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_2 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction phenomenon_2 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_2. An image of a direction phenomenon_2 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction phenomenon_2 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction phenomenon_2 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of phenomenon_2 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction phenomenon_2 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_2 to a new phenomenon_7 only if the satellite_4 is currently pointing to the previous phenomenon_2. </PRECON> turn satellite_4 from phenomenon_7 to phenomenon_2 <EFFECT> Once the satellite_4 is turned to a new phenomenon_7, the satellite_4 is no longer pointing to the previous phenomenon_2 but is pointing to the new phenomenon_7. </EFFECT> \n <PRECON> An image of a direction phenomenon_7 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction phenomenon_7 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_7. An image of a direction phenomenon_7 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction phenomenon_7 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction phenomenon_7 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of phenomenon_7 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction phenomenon_7 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_1 to a new planet_3 only if the satellite_4 is currently pointing to the previous planet_1. </PRECON> turn satellite_4 from planet_3 to planet_1 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous planet_1 but is pointing to the new planet_3. </EFFECT> WRONG \n <PRECON> A satellite_4 can be turned from a previous phenomenon_7 to a new planet_1 only if the satellite_4 is currently pointing to the previous phenomenon_7. </PRECON> turn satellite_4 from planet_1 to phenomenon_7 <EFFECT> Once the satellite_4 is turned to a new planet_1, the satellite_4 is no longer pointing to the previous phenomenon_7 but is pointing to the new planet_1. </EFFECT> \n <PRECON> An image of a direction planet_1 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction planet_1 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction planet_1. An image of a direction planet_1 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction planet_1 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction planet_1 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of planet_1 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction planet_1 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new planet_6 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from planet_6 to planet_3 <EFFECT> Once the satellite_4 is turned to a new planet_6, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new planet_6. </EFFECT> WRONG \n <PRECON> A satellite_4 can be turned from a previous planet_1 to a new planet_3 only if the satellite_4 is currently pointing to the previous planet_1. </PRECON> turn satellite_4 from planet_3 to planet_1 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous planet_1 but is pointing to the new planet_3. </EFFECT> \n <PRECON> An image of a direction planet_3 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the spectrograph_mode_1. An image of a direction planet_3 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction planet_3. An image of a direction planet_3 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction planet_3 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction planet_3 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of planet_3 using instrument_27 on satellite_4 with spectrograph_mode_1 <EFFECT> Once an image of a direction planet_3 with a specific spectrograph_mode_1 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new planet_6 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from planet_6 to planet_3 <EFFECT> Once the satellite_4 is turned to a new planet_6, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new planet_6. </EFFECT> \n <PRECON> An image of a direction planet_6 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction planet_6 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction planet_6. An image of a direction planet_6 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction planet_6 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction planet_6 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of planet_6 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction planet_6 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_6 to a new planet_3 only if the satellite_4 is currently pointing to the previous planet_6. </PRECON> turn satellite_4 from planet_3 to planet_6 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous planet_6 but is pointing to the new planet_3. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new planet_8 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from planet_8 to planet_3 <EFFECT> Once the satellite_4 is turned to a new planet_8, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new planet_8. </EFFECT> \n <PRECON> An image of a direction planet_8 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction planet_8 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction planet_8. An image of a direction planet_8 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction planet_8 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction planet_8 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of planet_8 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction planet_8 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction star_4. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of star_4 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction star_4 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_4 can be turned from a previous planet_8 to a new planet_3 only if the satellite_4 is currently pointing to the previous planet_8. </PRECON> turn satellite_4 from planet_3 to planet_8 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous planet_8 but is pointing to the new planet_3. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new star_4 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from star_4 to planet_3 <EFFECT> Once the satellite_4 is turned to a new star_4, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new star_4. </EFFECT> \n <PRECON> An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction star_4. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of star_4 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction star_4 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous star_4 to a new planet_3 only if the satellite_4 is currently pointing to the previous star_4. </PRECON> turn satellite_4 from planet_3 to star_4 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous star_4 but is pointing to the new planet_3. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new star_5 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from star_5 to planet_3 <EFFECT> Once the satellite_4 is turned to a new star_5, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new star_5. </EFFECT> \n <PRECON> An image of a direction star_5 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the spectrograph_mode_1. An image of a direction star_5 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction star_5. An image of a direction star_5 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction star_5 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction star_5 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of star_5 using instrument_27 on satellite_4 with spectrograph_mode_1 <EFFECT> Once an image of a direction star_5 with a specific spectrograph_mode_1 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous star_5 to a new planet_3 only if the satellite_4 is currently pointing to the previous star_5. </PRECON> turn satellite_4 from planet_3 to star_5 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous star_5 but is pointing to the new planet_3. </EFFECT> \n</PLAN>", "plan_length": 27, "raw_plan": ["(switch_on instrument27 satellite4)", "(turn_to satellite6 planet8 phenomenon7)", "(turn_to satellite5 planet3 star4)", "(turn_to satellite1 groundstation0 star5)", "(turn_to satellite0 groundstation0 planet1)", "(turn_to satellite4 groundstation0 planet8)", "(calibrate satellite4 instrument27 groundstation0)", "(turn_to satellite4 phenomenon2 groundstation0)", "(take_image satellite4 phenomenon2 instrument27 thermograph0)", "(turn_to satellite4 phenomenon7 phenomenon2)", "(take_image satellite4 phenomenon7 instrument27 thermograph0)", "(turn_to satellite4 planet1 phenomenon7)", "(take_image satellite4 planet1 instrument27 thermograph0)", "(turn_to satellite4 planet3 planet1)", "(take_image satellite4 planet3 instrument27 spectrograph1)", "(turn_to satellite4 planet6 planet3)", "(take_image satellite4 planet6 instrument27 thermograph0)", "(turn_to satellite4 planet3 planet6)", "(turn_to satellite4 planet8 planet3)", "(take_image satellite4 planet8 instrument27 thermograph0)", "(turn_to satellite4 planet3 planet8)", "(turn_to satellite4 star4 planet3)", "(take_image satellite4 star4 instrument27 thermograph0)", "(turn_to satellite4 planet3 star4)", "(turn_to satellite4 star5 planet3)", "(take_image satellite4 star5 instrument27 spectrograph1)", "(turn_to satellite4 planet3 star5)"], "full_text_prompt": "I have to plan the operations of satellites in space. These satellites are equipped with various instruments that can be used to take images of different directions in space using specific modes. The satellites can be turned, their instruments can be switched on and off, calibrated, and used to take images.\nHere are the actions that can be performed:\nTurn a satellite to a direction.\nSwitch on an instrument on a satellite.\nSwitch off an instrument on a satellite.\nCalibrate an instrument on a satellite by pointing it to a calibration target.\nTake an image of a direction using an instrument with a specific mode.\nThe following are the restrictions on the actions:\nA satellite can be turned from a previous direction to a new direction only if the satellite is currently pointing to the previous direction.\nOnce the satellite is turned to a new direction, the satellite is no longer pointing to the previous direction but is pointing to the new direction.\nAn instrument can be switched on on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched on on a satellite only if the instrument is power-available.\nOnce the instrument is switched on on a satellite, the instrument is power-on.\nOnce the instrument is switched on on a satellite, the instrument is no longer power-available.\nOnce the instrument is switched on on a satellite, the instrument becomes not calibrated.\nAn instrument can be switched off on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched off on a satellite only if the instrument is power-on.\nOnce the instrument is switched off on a satellite, the instrument is power-available.\nOnce the instrument is switched off on a satellite, the instrument is no longer power-on.\nAn instrument can be calibrated on a satellite only if the instrument is on board the satellite.\nAn instrument can be calibrated on a satellite only if the instrument is power-on.\nAn instrument can be calibrated on a satellite only if the instrument is pointing to the calibration target.\nOnce the instrument is calibrated on a satellite, the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is on board the satellite.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is power-on.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the satellite is pointing to the direction.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument supports the mode.\nOnce an image of a direction with a specific mode is taken using an instrument on a satellite, we will have the image.As initial conditions I have that, satellite_0 is power-available, instrument_16 is on board satellite_3, instrument_20 supports thermograph_mode_0, instrument_12 supports spectrograph_mode_1, satellite_3 is power-available, the calibration target of instrument_23 is ground_station_0, satellite_2 is pointing to planet_6, instrument_28 supports spectrograph_mode_1, instrument_8 supports spectrograph_mode_1, instrument_21 supports thermograph_mode_0, the calibration target of instrument_3 is ground_station_0, instrument_7 supports spectrograph_mode_1, the calibration target of instrument_21 is ground_station_0, the calibration target of instrument_12 is ground_station_0, instrument_32 supports thermograph_mode_0, instrument_23 supports thermograph_mode_0, the calibration target of instrument_31 is ground_station_0, instrument_12 supports thermograph_mode_0, instrument_29 is on board satellite_5, instrument_4 is on board satellite_0, instrument_19 supports thermograph_mode_0, instrument_23 is on board satellite_4, instrument_6 supports spectrograph_mode_1, instrument_16 supports thermograph_mode_0, instrument_18 is on board satellite_3, instrument_6 supports thermograph_mode_0, instrument_20 supports spectrograph_mode_1, instrument_22 is on board satellite_4, instrument_21 is on board satellite_4, instrument_5 supports spectrograph_mode_1, instrument_6 is on board satellite_1, satellite_4 is pointing to planet_8, instrument_17 supports spectrograph_mode_1, instrument_22 supports thermograph_mode_0, the calibration target of instrument_29 is ground_station_0, instrument_28 is on board satellite_5, instrument_25 is on board satellite_4, instrument_25 supports spectrograph_mode_1, satellite_1 is pointing to star_5, instrument_1 is on board satellite_0, instrument_20 is on board satellite_3, instrument_10 is on board satellite_1, instrument_9 supports thermograph_mode_0, the calibration target of instrument_30 is ground_station_0, the calibration target of instrument_33 is ground_station_0, instrument_26 supports spectrograph_mode_1, instrument_30 supports thermograph_mode_0, the calibration target of instrument_7 is ground_station_0, the calibration target of instrument_28 is ground_station_0, instrument_2 is on board satellite_0, the calibration target of instrument_19 is ground_station_0, the calibration target of instrument_18 is ground_station_0, instrument_29 supports spectrograph_mode_1, instrument_13 is on board satellite_2, instrument_31 supports thermograph_mode_0, instrument_15 is on board satellite_3, the calibration target of instrument_34 is ground_station_0, the calibration target of instrument_24 is ground_station_0, the calibration target of instrument_20 is ground_station_0, the calibration target of instrument_0 is ground_station_0, instrument_35 is on board satellite_6, instrument_34 is on board satellite_6, instrument_3 is on board satellite_0, instrument_31 supports spectrograph_mode_1, instrument_12 is on board satellite_1, instrument_1 supports thermograph_mode_0, the calibration target of instrument_16 is ground_station_0, instrument_1 supports spectrograph_mode_1, instrument_7 is on board satellite_1, the calibration target of instrument_11 is ground_station_0, the calibration target of instrument_32 is ground_station_0, the calibration target of instrument_5 is ground_station_0, instrument_16 supports spectrograph_mode_1, instrument_19 is on board satellite_3, instrument_5 is on board satellite_0, instrument_4 supports spectrograph_mode_1, the calibration target of instrument_22 is ground_station_0, instrument_10 supports thermograph_mode_0, instrument_17 is on board satellite_3, the calibration target of instrument_35 is ground_station_0, instrument_14 is on board satellite_2, instrument_34 supports thermograph_mode_0, instrument_26 is on board satellite_4, the calibration target of instrument_17 is ground_station_0, instrument_18 supports spectrograph_mode_1, instrument_15 supports thermograph_mode_0, instrument_2 supports thermograph_mode_0, the calibration target of instrument_10 is ground_station_0, instrument_2 supports spectrograph_mode_1, satellite_4 is power-available, instrument_9 is on board satellite_1, instrument_5 supports thermograph_mode_0, satellite_3 is pointing to planet_6, satellite_5 is power-available, instrument_3 supports spectrograph_mode_1, instrument_17 supports thermograph_mode_0, the calibration target of instrument_6 is ground_station_0, instrument_33 supports spectrograph_mode_1, the calibration target of instrument_25 is ground_station_0, satellite_2 is power-available, instrument_24 is on board satellite_4, instrument_35 supports spectrograph_mode_1, instrument_24 supports thermograph_mode_0, instrument_11 supports spectrograph_mode_1, instrument_10 supports spectrograph_mode_1, instrument_11 is on board satellite_1, satellite_6 is pointing to phenomenon_7, instrument_14 supports thermograph_mode_0, instrument_28 supports thermograph_mode_0, instrument_3 supports thermograph_mode_0, instrument_11 supports thermograph_mode_0, the calibration target of instrument_13 is ground_station_0, satellite_5 is pointing to star_4, the calibration target of instrument_14 is ground_station_0, instrument_32 is on board satellite_5, the calibration target of instrument_26 is ground_station_0, instrument_0 is on board satellite_0, the calibration target of instrument_27 is ground_station_0, the calibration target of instrument_4 is ground_station_0, the calibration target of instrument_1 is ground_station_0, instrument_21 supports spectrograph_mode_1, the calibration target of instrument_2 is ground_station_0, instrument_13 supports thermograph_mode_0, instrument_8 supports thermograph_mode_0, instrument_33 is on board satellite_6, instrument_27 supports spectrograph_mode_1, instrument_9 supports spectrograph_mode_1, instrument_7 supports thermograph_mode_0, instrument_30 is on board satellite_5, instrument_19 supports spectrograph_mode_1, instrument_26 supports thermograph_mode_0, instrument_8 is on board satellite_1, instrument_27 is on board satellite_4, instrument_23 supports spectrograph_mode_1, instrument_27 supports thermograph_mode_0, the calibration target of instrument_8 is ground_station_0, satellite_0 is pointing to planet_1, instrument_31 is on board satellite_5, instrument_13 supports spectrograph_mode_1, satellite_6 is power-available, the calibration target of instrument_15 is ground_station_0, instrument_30 supports spectrograph_mode_1, satellite_1 is power-available, instrument_0 supports thermograph_mode_0, the calibration target of instrument_9 is ground_station_0.My goal is to have that planet_8 has image in thermograph_mode_0, planet_6 has image in thermograph_mode_0, star_5 has image in spectrograph_mode_1, satellite_4 is pointing to planet_3, satellite_0 is pointing to ground_station_0, star_4 has image in thermograph_mode_0, satellite_1 is pointing to ground_station_0, phenomenon_7 has image in thermograph_mode_0, satellite_6 is pointing to planet_8, satellite_5 is pointing to planet_3, phenomenon_2 has image in thermograph_mode_0, planet_3 has image in spectrograph_mode_1, planet_1 has image in thermograph_mode_0.My plan is as follows:\n<PLAN>\n <PRECON> An instrument_27 can be switched on on a satellite_4 only if the instrument_27 is on board the satellite_4. An instrument_27 can be switched on on a satellite_4 only if the instrument_27 is power-available. </PRECON> switch on instrument_27 on satellite_4 <EFFECT> Once the instrument_27 is switched on on a satellite_4, the instrument_27 is no longer power-available. Once the instrument_27 is switched on on a satellite_4, the instrument_27 is power-on. Once the instrument_27 is switched on on a satellite_4, the instrument_27 becomes not calibrated. </EFFECT> \n <PRECON> A satellite_6 can be turned from a previous phenomenon_7 to a new planet_8 only if the satellite_6 is currently pointing to the previous phenomenon_7. </PRECON> turn satellite_6 from planet_8 to phenomenon_7 <EFFECT> Once the satellite_6 is turned to a new planet_8, the satellite_6 is no longer pointing to the previous phenomenon_7 but is pointing to the new planet_8. </EFFECT> \n <PRECON> A satellite_5 can be turned from a previous star_4 to a new planet_3 only if the satellite_5 is currently pointing to the previous star_4. </PRECON> turn satellite_5 from planet_3 to star_4 <EFFECT> Once the satellite_5 is turned to a new planet_3, the satellite_5 is no longer pointing to the previous star_4 but is pointing to the new planet_3. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous star_5 to a new ground_station_0 only if the satellite_1 is currently pointing to the previous star_5. </PRECON> turn satellite_1 from ground_station_0 to star_5 <EFFECT> Once the satellite_1 is turned to a new ground_station_0, the satellite_1 is no longer pointing to the previous star_5 but is pointing to the new ground_station_0. </EFFECT> \n <PRECON> A satellite_0 can be turned from a previous planet_1 to a new ground_station_0 only if the satellite_0 is currently pointing to the previous planet_1. </PRECON> turn satellite_0 from ground_station_0 to planet_1 <EFFECT> Once the satellite_0 is turned to a new ground_station_0, the satellite_0 is no longer pointing to the previous planet_1 but is pointing to the new ground_station_0. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_8 to a new ground_station_0 only if the satellite_4 is currently pointing to the previous planet_8. </PRECON> turn satellite_4 from ground_station_0 to planet_8 <EFFECT> Once the satellite_4 is turned to a new ground_station_0, the satellite_4 is no longer pointing to the previous planet_8 but is pointing to the new ground_station_0. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new star_5 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from star_5 to planet_3 <EFFECT> Once the satellite_4 is turned to a new star_5, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new star_5. </EFFECT> WRONG \n <PRECON> An instrument_27 can be calibrated on a satellite_4 only if the instrument_27 is power-on. An instrument_27 can be calibrated on a satellite_4 only if the instrument_27 is on board the satellite_4. An instrument_27 can be calibrated on a satellite_4 only if the instrument_27 is pointing to the calibration target ground_station_0. </PRECON> calibrate instrument_27 on satellite_4 pointing to calibration target ground_station_0 <EFFECT> Once the instrument_27 is calibrated on a satellite_4, the instrument_27 is calibrated. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous ground_station_0 to a new phenomenon_2 only if the satellite_4 is currently pointing to the previous ground_station_0. </PRECON> turn satellite_4 from phenomenon_2 to ground_station_0 <EFFECT> Once the satellite_4 is turned to a new phenomenon_2, the satellite_4 is no longer pointing to the previous ground_station_0 but is pointing to the new phenomenon_2. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_1 to a new planet_3 only if the satellite_4 is currently pointing to the previous planet_1. </PRECON> turn satellite_4 from planet_3 to planet_1 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous planet_1 but is pointing to the new planet_3. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_2 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction phenomenon_2 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_2. An image of a direction phenomenon_2 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction phenomenon_2 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction phenomenon_2 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of phenomenon_2 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction phenomenon_2 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous phenomenon_2 to a new phenomenon_7 only if the satellite_4 is currently pointing to the previous phenomenon_2. </PRECON> turn satellite_4 from phenomenon_7 to phenomenon_2 <EFFECT> Once the satellite_4 is turned to a new phenomenon_7, the satellite_4 is no longer pointing to the previous phenomenon_2 but is pointing to the new phenomenon_7. </EFFECT> \n <PRECON> An image of a direction phenomenon_7 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction phenomenon_7 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction phenomenon_7. An image of a direction phenomenon_7 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction phenomenon_7 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction phenomenon_7 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of phenomenon_7 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction phenomenon_7 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_1 to a new planet_3 only if the satellite_4 is currently pointing to the previous planet_1. </PRECON> turn satellite_4 from planet_3 to planet_1 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous planet_1 but is pointing to the new planet_3. </EFFECT> WRONG \n <PRECON> A satellite_4 can be turned from a previous phenomenon_7 to a new planet_1 only if the satellite_4 is currently pointing to the previous phenomenon_7. </PRECON> turn satellite_4 from planet_1 to phenomenon_7 <EFFECT> Once the satellite_4 is turned to a new planet_1, the satellite_4 is no longer pointing to the previous phenomenon_7 but is pointing to the new planet_1. </EFFECT> \n <PRECON> An image of a direction planet_1 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction planet_1 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction planet_1. An image of a direction planet_1 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction planet_1 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction planet_1 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of planet_1 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction planet_1 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new planet_6 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from planet_6 to planet_3 <EFFECT> Once the satellite_4 is turned to a new planet_6, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new planet_6. </EFFECT> WRONG \n <PRECON> A satellite_4 can be turned from a previous planet_1 to a new planet_3 only if the satellite_4 is currently pointing to the previous planet_1. </PRECON> turn satellite_4 from planet_3 to planet_1 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous planet_1 but is pointing to the new planet_3. </EFFECT> \n <PRECON> An image of a direction planet_3 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the spectrograph_mode_1. An image of a direction planet_3 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction planet_3. An image of a direction planet_3 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction planet_3 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction planet_3 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of planet_3 using instrument_27 on satellite_4 with spectrograph_mode_1 <EFFECT> Once an image of a direction planet_3 with a specific spectrograph_mode_1 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new planet_6 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from planet_6 to planet_3 <EFFECT> Once the satellite_4 is turned to a new planet_6, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new planet_6. </EFFECT> \n <PRECON> An image of a direction planet_6 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction planet_6 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction planet_6. An image of a direction planet_6 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction planet_6 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction planet_6 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of planet_6 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction planet_6 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_6 to a new planet_3 only if the satellite_4 is currently pointing to the previous planet_6. </PRECON> turn satellite_4 from planet_3 to planet_6 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous planet_6 but is pointing to the new planet_3. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new planet_8 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from planet_8 to planet_3 <EFFECT> Once the satellite_4 is turned to a new planet_8, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new planet_8. </EFFECT> \n <PRECON> An image of a direction planet_8 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction planet_8 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction planet_8. An image of a direction planet_8 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction planet_8 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction planet_8 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of planet_8 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction planet_8 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction star_4. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of star_4 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction star_4 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_4 can be turned from a previous planet_8 to a new planet_3 only if the satellite_4 is currently pointing to the previous planet_8. </PRECON> turn satellite_4 from planet_3 to planet_8 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous planet_8 but is pointing to the new planet_3. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new star_4 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from star_4 to planet_3 <EFFECT> Once the satellite_4 is turned to a new star_4, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new star_4. </EFFECT> \n <PRECON> An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the thermograph_mode_0. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction star_4. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction star_4 with a specific thermograph_mode_0 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of star_4 using instrument_27 on satellite_4 with thermograph_mode_0 <EFFECT> Once an image of a direction star_4 with a specific thermograph_mode_0 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous star_4 to a new planet_3 only if the satellite_4 is currently pointing to the previous star_4. </PRECON> turn satellite_4 from planet_3 to star_4 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous star_4 but is pointing to the new planet_3. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous planet_3 to a new star_5 only if the satellite_4 is currently pointing to the previous planet_3. </PRECON> turn satellite_4 from star_5 to planet_3 <EFFECT> Once the satellite_4 is turned to a new star_5, the satellite_4 is no longer pointing to the previous planet_3 but is pointing to the new star_5. </EFFECT> \n <PRECON> An image of a direction star_5 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 supports the spectrograph_mode_1. An image of a direction star_5 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the satellite_4 is pointing to the direction star_5. An image of a direction star_5 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is power-on. An image of a direction star_5 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is on board the satellite_4. An image of a direction star_5 with a specific spectrograph_mode_1 can be taken using an instrument_27 on a satellite_4 only if the instrument_27 is calibrated. </PRECON> take image of star_5 using instrument_27 on satellite_4 with spectrograph_mode_1 <EFFECT> Once an image of a direction star_5 with a specific spectrograph_mode_1 is taken using an instrument_27 on a satellite_4, we will have the image. </EFFECT> \n <PRECON> A satellite_4 can be turned from a previous star_5 to a new planet_3 only if the satellite_4 is currently pointing to the previous star_5. </PRECON> turn satellite_4 from planet_3 to star_5 <EFFECT> Once the satellite_4 is turned to a new planet_3, the satellite_4 is no longer pointing to the previous star_5 but is pointing to the new planet_3. </EFFECT> \n</PLAN>"}
{"domain": "satellite", "instance_id": "80", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the operations of satellites in space. These satellites are equipped with various instruments that can be used to take images of different directions in space using specific modes. The satellites can be turned, their instruments can be switched on and off, calibrated, and used to take images.\nHere are the actions that can be performed:\nTurn a satellite to a direction.\nSwitch on an instrument on a satellite.\nSwitch off an instrument on a satellite.\nCalibrate an instrument on a satellite by pointing it to a calibration target.\nTake an image of a direction using an instrument with a specific mode.\nThe following are the restrictions on the actions:\nA satellite can be turned from a previous direction to a new direction only if the satellite is currently pointing to the previous direction.\nOnce the satellite is turned to a new direction, the satellite is no longer pointing to the previous direction but is pointing to the new direction.\nAn instrument can be switched on on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched on on a satellite only if the instrument is power-available.\nOnce the instrument is switched on on a satellite, the instrument is power-on.\nOnce the instrument is switched on on a satellite, the instrument is no longer power-available.\nOnce the instrument is switched on on a satellite, the instrument becomes not calibrated.\nAn instrument can be switched off on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched off on a satellite only if the instrument is power-on.\nOnce the instrument is switched off on a satellite, the instrument is power-available.\nOnce the instrument is switched off on a satellite, the instrument is no longer power-on.\nAn instrument can be calibrated on a satellite only if the instrument is on board the satellite.\nAn instrument can be calibrated on a satellite only if the instrument is power-on.\nAn instrument can be calibrated on a satellite only if the instrument is pointing to the calibration target.\nOnce the instrument is calibrated on a satellite, the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is on board the satellite.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is power-on.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the satellite is pointing to the direction.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument supports the mode.\nOnce an image of a direction with a specific mode is taken using an instrument on a satellite, we will have the image.", "input": "As initial conditions I have that, instrument_9 is on board satellite_2, the calibration target of instrument_0 is star_5, the calibration target of instrument_14 is ground_station_2, instrument_6 is on board satellite_2, the calibration target of instrument_2 is star_0, instrument_2 supports image_mode_0, instrument_14 supports image_mode_0, instrument_17 supports spectrograph_mode_3, instrument_14 supports image_mode_1, the calibration target of instrument_2 is star_5, instrument_3 supports spectrograph_mode_3, instrument_12 supports spectrograph_mode_3, the calibration target of instrument_12 is star_3, instrument_0 is on board satellite_0, instrument_8 supports spectrograph_mode_3, the calibration target of instrument_5 is star_3, instrument_14 is on board satellite_3, satellite_3 is pointing to phenomenon_6, instrument_17 is on board satellite_4, instrument_11 supports spectrograph_mode_3, satellite_0 is power-available, the calibration target of instrument_11 is star_5, instrument_15 supports image_mode_0, instrument_15 is on board satellite_3, satellite_0 is pointing to phenomenon_6, the calibration target of instrument_6 is star_3, instrument_13 is on board satellite_3, instrument_4 supports image_mode_2, instrument_1 is on board satellite_1, the calibration target of instrument_5 is ground_station_2, the calibration target of instrument_6 is ground_station_1, the calibration target of instrument_3 is star_4, instrument_6 supports image_mode_0, instrument_13 supports spectrograph_mode_3, instrument_7 supports image_mode_2, instrument_8 is on board satellite_2, instrument_5 is on board satellite_2, instrument_0 supports spectrograph_mode_3, satellite_4 is pointing to star_11, the calibration target of instrument_3 is star_5, instrument_3 is on board satellite_1, instrument_1 supports spectrograph_mode_3, the calibration target of instrument_12 is ground_station_1, the calibration target of instrument_10 is ground_station_1, instrument_10 is on board satellite_2, instrument_16 is on board satellite_3, instrument_9 supports image_mode_0, instrument_16 supports image_mode_1, the calibration target of instrument_17 is star_5, satellite_4 is power-available, satellite_2 is pointing to star_4, the calibration target of instrument_10 is star_5, instrument_5 supports spectrograph_mode_3, satellite_3 is power-available, instrument_1 supports image_mode_1, instrument_16 supports spectrograph_mode_3, instrument_10 supports image_mode_0, satellite_2 is power-available, the calibration target of instrument_7 is star_4, the calibration target of instrument_7 is star_3, instrument_16 supports image_mode_2, the calibration target of instrument_4 is star_0, instrument_12 supports image_mode_0, the calibration target of instrument_15 is star_3, the calibration target of instrument_13 is star_0, the calibration target of instrument_13 is star_4, instrument_7 is on board satellite_2, instrument_12 is on board satellite_3, the calibration target of instrument_16 is star_5, instrument_4 is on board satellite_1, instrument_10 supports image_mode_2, the calibration target of instrument_8 is star_5, instrument_11 is on board satellite_3, the calibration target of instrument_1 is star_4, instrument_11 supports image_mode_1, instrument_2 is on board satellite_1, instrument_2 supports spectrograph_mode_3, satellite_1 is pointing to ground_station_2, instrument_13 supports image_mode_2, the calibration target of instrument_9 is star_4, instrument_14 supports image_mode_2, satellite_1 is power-available.\nMy goal is to have that star_7 has image in image_mode_2, satellite_0 is pointing to ground_station_1, phenomenon_8 has image in image_mode_0, star_9 has image in image_mode_2, star_10 has image in image_mode_2, satellite_4 is pointing to star_9, satellite_2 is pointing to ground_station_2, star_11 has image in image_mode_1, phenomenon_6 has image in image_mode_2.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> An instrument_11 can be switched on on a satellite_3 only if the instrument_11 is on board the satellite_3. An instrument_11 can be switched on on a satellite_3 only if the instrument_11 is power-available. </PRECON> switch on instrument_11 on satellite_3 <EFFECT> Once the instrument_11 is switched on on a satellite_3, the instrument_11 is power-on. Once the instrument_11 is switched on on a satellite_3, the instrument_11 is no longer power-available. Once the instrument_11 is switched on on a satellite_3, the instrument_11 becomes not calibrated. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new star_9 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from star_9 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new star_9, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new star_9. </EFFECT> WRONG \n <PRECON> A satellite_4 can be turned from a previous star_11 to a new star_9 only if the satellite_4 is currently pointing to the previous star_11. </PRECON> turn satellite_4 from star_9 to star_11 <EFFECT> Once the satellite_4 is turned to a new star_9, the satellite_4 is no longer pointing to the previous star_11 but is pointing to the new star_9. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous phenomenon_6 to a new star_11 only if the satellite_3 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_3 from star_11 to phenomenon_6 <EFFECT> Once the satellite_3 is turned to a new star_11, the satellite_3 is no longer pointing to the previous phenomenon_6 but is pointing to the new star_11. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_4 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_4. </PRECON> turn satellite_2 from ground_station_2 to star_4 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_4 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous ground_station_2 to a new phenomenon_8 only if the satellite_1 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_1 from phenomenon_8 to ground_station_2 <EFFECT> Once the satellite_1 is turned to a new phenomenon_8, the satellite_1 is no longer pointing to the previous ground_station_2 but is pointing to the new phenomenon_8. </EFFECT> \n <PRECON> An instrument_2 can be switched on on a satellite_1 only if the instrument_2 is on board the satellite_1. An instrument_2 can be switched on on a satellite_1 only if the instrument_2 is power-available. </PRECON> switch on instrument_2 on satellite_1 <EFFECT> Once the instrument_2 is switched on on a satellite_1, the instrument_2 is power-on. Once the instrument_2 is switched on on a satellite_1, the instrument_2 is no longer power-available. Once the instrument_2 is switched on on a satellite_1, the instrument_2 becomes not calibrated. </EFFECT> \n <PRECON> An instrument_7 can be switched on on a satellite_2 only if the instrument_7 is on board the satellite_2. An instrument_7 can be switched on on a satellite_2 only if the instrument_7 is power-available. </PRECON> switch on instrument_7 on satellite_2 <EFFECT> Once the instrument_7 is switched on on a satellite_2, the instrument_7 is power-on. Once the instrument_7 is switched on on a satellite_2, the instrument_7 is no longer power-available. Once the instrument_7 is switched on on a satellite_2, the instrument_7 becomes not calibrated. </EFFECT> \n <PRECON> A satellite_0 can be turned from a previous phenomenon_6 to a new ground_station_1 only if the satellite_0 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_0 from ground_station_1 to phenomenon_6 <EFFECT> Once the satellite_0 is turned to a new ground_station_1, the satellite_0 is no longer pointing to the previous phenomenon_6 but is pointing to the new ground_station_1. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous star_11 to a new star_5 only if the satellite_3 is currently pointing to the previous star_11. </PRECON> turn satellite_3 from star_5 to star_11 <EFFECT> Once the satellite_3 is turned to a new star_5, the satellite_3 is no longer pointing to the previous star_11 but is pointing to the new star_5. </EFFECT> \n <PRECON> An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is pointing to the calibration target star_5. An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is power-on. An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is on board the satellite_3. </PRECON> calibrate instrument_11 on satellite_3 pointing to calibration target star_5 <EFFECT> Once the instrument_11 is calibrated on a satellite_3, the instrument_11 is calibrated. </EFFECT> \n <PRECON> An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_9. </PRECON> take image of star_9 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_9 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_3 can be turned from a previous star_5 to a new star_11 only if the satellite_3 is currently pointing to the previous star_5. </PRECON> turn satellite_3 from star_11 to star_5 <EFFECT> Once the satellite_3 is turned to a new star_11, the satellite_3 is no longer pointing to the previous star_5 but is pointing to the new star_11. </EFFECT> \n <PRECON> An image of a direction star_11 with a specific image_mode_1 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction star_11 with a specific image_mode_1 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction star_11 with a specific image_mode_1 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction star_11 with a specific image_mode_1 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the image_mode_1. An image of a direction star_11 with a specific image_mode_1 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction star_11. </PRECON> take image of star_11 using instrument_11 on satellite_3 with image_mode_1 <EFFECT> Once an image of a direction star_11 with a specific image_mode_1 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new star_4 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from star_4 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new star_4, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new star_4. </EFFECT> \n <PRECON> An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_7. </PRECON> take image of star_7 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_7 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> WRONG \n <PRECON> An instrument_7 can be calibrated on a satellite_2 only if the instrument_7 is pointing to the calibration target star_4. An instrument_7 can be calibrated on a satellite_2 only if the instrument_7 is power-on. An instrument_7 can be calibrated on a satellite_2 only if the instrument_7 is on board the satellite_2. </PRECON> calibrate instrument_7 on satellite_2 pointing to calibration target star_4 <EFFECT> Once the instrument_7 is calibrated on a satellite_2, the instrument_7 is calibrated. </EFFECT> \n <PRECON> An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_7. </PRECON> take image of star_7 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_7 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous star_4 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_4. </PRECON> turn satellite_2 from ground_station_2 to star_4 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_4 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new phenomenon_6 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from phenomenon_6 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new phenomenon_6, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new phenomenon_6. </EFFECT> \n <PRECON> An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_10. </PRECON> take image of star_10 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_10 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_1 can be turned from a previous star_5 to a new phenomenon_8 only if the satellite_1 is currently pointing to the previous star_5. </PRECON> turn satellite_1 from phenomenon_8 to star_5 <EFFECT> Once the satellite_1 is turned to a new phenomenon_8, the satellite_1 is no longer pointing to the previous star_5 but is pointing to the new phenomenon_8. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_6 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction phenomenon_6 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction phenomenon_6 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction phenomenon_6 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction phenomenon_6 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction phenomenon_6. </PRECON> take image of phenomenon_6 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction phenomenon_6 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous phenomenon_6 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_2 from ground_station_2 to phenomenon_6 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous phenomenon_6 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new star_10 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from star_10 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new star_10, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new star_10. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_8 to a new star_5 only if the satellite_1 is currently pointing to the previous phenomenon_8. </PRECON> turn satellite_1 from star_5 to phenomenon_8 <EFFECT> Once the satellite_1 is turned to a new star_5, the satellite_1 is no longer pointing to the previous phenomenon_8 but is pointing to the new star_5. </EFFECT> WRONG \n <PRECON> An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_10. </PRECON> take image of star_10 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_10 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_10 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_10. </PRECON> turn satellite_2 from ground_station_2 to star_10 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_10 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_7 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_7. </PRECON> turn satellite_2 from ground_station_2 to star_7 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_7 but is pointing to the new ground_station_2. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new star_7 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from star_7 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new star_7, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new star_7. </EFFECT> \n <PRECON> An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_7. </PRECON> take image of star_7 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_7 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_8 to a new star_5 only if the satellite_1 is currently pointing to the previous phenomenon_8. </PRECON> turn satellite_1 from star_5 to phenomenon_8 <EFFECT> Once the satellite_1 is turned to a new star_5, the satellite_1 is no longer pointing to the previous phenomenon_8 but is pointing to the new star_5. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous star_7 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_7. </PRECON> turn satellite_2 from ground_station_2 to star_7 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_7 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new star_9 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from star_9 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new star_9, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new star_9. </EFFECT> \n <PRECON> An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_9. </PRECON> take image of star_9 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_9 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is pointing to the calibration target star_5. An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is power-on. An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is on board the satellite_1. </PRECON> calibrate instrument_2 on satellite_1 pointing to calibration target star_5 <EFFECT> Once the instrument_2 is calibrated on a satellite_1, the instrument_2 is calibrated. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous star_9 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_9. </PRECON> turn satellite_2 from ground_station_2 to star_9 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_9 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_8 to a new star_5 only if the satellite_1 is currently pointing to the previous phenomenon_8. </PRECON> turn satellite_1 from star_5 to phenomenon_8 <EFFECT> Once the satellite_1 is turned to a new star_5, the satellite_1 is no longer pointing to the previous phenomenon_8 but is pointing to the new star_5. </EFFECT> \n <PRECON> An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is pointing to the calibration target star_5. An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is power-on. An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is on board the satellite_1. </PRECON> calibrate instrument_2 on satellite_1 pointing to calibration target star_5 <EFFECT> Once the instrument_2 is calibrated on a satellite_1, the instrument_2 is calibrated. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous star_5 to a new phenomenon_8 only if the satellite_1 is currently pointing to the previous star_5. </PRECON> turn satellite_1 from phenomenon_8 to star_5 <EFFECT> Once the satellite_1 is turned to a new phenomenon_8, the satellite_1 is no longer pointing to the previous star_5 but is pointing to the new phenomenon_8. </EFFECT> \n <PRECON> An image of a direction phenomenon_8 with a specific image_mode_0 can be taken using an instrument_2 on a satellite_1 only if the instrument_2 is power-on. An image of a direction phenomenon_8 with a specific image_mode_0 can be taken using an instrument_2 on a satellite_1 only if the instrument_2 is on board the satellite_1. An image of a direction phenomenon_8 with a specific image_mode_0 can be taken using an instrument_2 on a satellite_1 only if the instrument_2 is calibrated. An image of a direction phenomenon_8 with a specific image_mode_0 can be taken using an instrument_2 on a satellite_1 only if the instrument_2 supports the image_mode_0. An image of a direction phenomenon_8 with a specific image_mode_0 can be taken using an instrument_2 on a satellite_1 only if the satellite_1 is pointing to the direction phenomenon_8. </PRECON> take image of phenomenon_8 using instrument_2 on satellite_1 with image_mode_0 <EFFECT> Once an image of a direction phenomenon_8 with a specific image_mode_0 is taken using an instrument_2 on a satellite_1, we will have the image. </EFFECT> \n</PLAN>", "plan_length": 31, "raw_plan": ["(switch_on instrument11 satellite3)", "(turn_to satellite4 star9 star11)", "(turn_to satellite3 star11 phenomenon6)", "(turn_to satellite2 groundstation2 star4)", "(turn_to satellite1 phenomenon8 groundstation2)", "(switch_on instrument2 satellite1)", "(switch_on instrument7 satellite2)", "(turn_to satellite0 groundstation1 phenomenon6)", "(turn_to satellite3 star5 star11)", "(calibrate satellite3 instrument11 star5)", "(turn_to satellite3 star11 star5)", "(take_image satellite3 star11 instrument11 image1)", "(turn_to satellite2 star4 groundstation2)", "(calibrate satellite2 instrument7 star4)", "(turn_to satellite2 groundstation2 star4)", "(turn_to satellite2 phenomenon6 groundstation2)", "(take_image satellite2 phenomenon6 instrument7 image2)", "(turn_to satellite2 groundstation2 phenomenon6)", "(turn_to satellite2 star10 groundstation2)", "(take_image satellite2 star10 instrument7 image2)", "(turn_to satellite2 groundstation2 star10)", "(turn_to satellite2 star7 groundstation2)", "(take_image satellite2 star7 instrument7 image2)", "(turn_to satellite2 groundstation2 star7)", "(turn_to satellite2 star9 groundstation2)", "(take_image satellite2 star9 instrument7 image2)", "(turn_to satellite2 groundstation2 star9)", "(turn_to satellite1 star5 phenomenon8)", "(calibrate satellite1 instrument2 star5)", "(turn_to satellite1 phenomenon8 star5)", "(take_image satellite1 phenomenon8 instrument2 image0)"], "full_text_prompt": "I have to plan the operations of satellites in space. These satellites are equipped with various instruments that can be used to take images of different directions in space using specific modes. The satellites can be turned, their instruments can be switched on and off, calibrated, and used to take images.\nHere are the actions that can be performed:\nTurn a satellite to a direction.\nSwitch on an instrument on a satellite.\nSwitch off an instrument on a satellite.\nCalibrate an instrument on a satellite by pointing it to a calibration target.\nTake an image of a direction using an instrument with a specific mode.\nThe following are the restrictions on the actions:\nA satellite can be turned from a previous direction to a new direction only if the satellite is currently pointing to the previous direction.\nOnce the satellite is turned to a new direction, the satellite is no longer pointing to the previous direction but is pointing to the new direction.\nAn instrument can be switched on on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched on on a satellite only if the instrument is power-available.\nOnce the instrument is switched on on a satellite, the instrument is power-on.\nOnce the instrument is switched on on a satellite, the instrument is no longer power-available.\nOnce the instrument is switched on on a satellite, the instrument becomes not calibrated.\nAn instrument can be switched off on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched off on a satellite only if the instrument is power-on.\nOnce the instrument is switched off on a satellite, the instrument is power-available.\nOnce the instrument is switched off on a satellite, the instrument is no longer power-on.\nAn instrument can be calibrated on a satellite only if the instrument is on board the satellite.\nAn instrument can be calibrated on a satellite only if the instrument is power-on.\nAn instrument can be calibrated on a satellite only if the instrument is pointing to the calibration target.\nOnce the instrument is calibrated on a satellite, the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is on board the satellite.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is power-on.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the satellite is pointing to the direction.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument supports the mode.\nOnce an image of a direction with a specific mode is taken using an instrument on a satellite, we will have the image.As initial conditions I have that, instrument_9 is on board satellite_2, the calibration target of instrument_0 is star_5, the calibration target of instrument_14 is ground_station_2, instrument_6 is on board satellite_2, the calibration target of instrument_2 is star_0, instrument_2 supports image_mode_0, instrument_14 supports image_mode_0, instrument_17 supports spectrograph_mode_3, instrument_14 supports image_mode_1, the calibration target of instrument_2 is star_5, instrument_3 supports spectrograph_mode_3, instrument_12 supports spectrograph_mode_3, the calibration target of instrument_12 is star_3, instrument_0 is on board satellite_0, instrument_8 supports spectrograph_mode_3, the calibration target of instrument_5 is star_3, instrument_14 is on board satellite_3, satellite_3 is pointing to phenomenon_6, instrument_17 is on board satellite_4, instrument_11 supports spectrograph_mode_3, satellite_0 is power-available, the calibration target of instrument_11 is star_5, instrument_15 supports image_mode_0, instrument_15 is on board satellite_3, satellite_0 is pointing to phenomenon_6, the calibration target of instrument_6 is star_3, instrument_13 is on board satellite_3, instrument_4 supports image_mode_2, instrument_1 is on board satellite_1, the calibration target of instrument_5 is ground_station_2, the calibration target of instrument_6 is ground_station_1, the calibration target of instrument_3 is star_4, instrument_6 supports image_mode_0, instrument_13 supports spectrograph_mode_3, instrument_7 supports image_mode_2, instrument_8 is on board satellite_2, instrument_5 is on board satellite_2, instrument_0 supports spectrograph_mode_3, satellite_4 is pointing to star_11, the calibration target of instrument_3 is star_5, instrument_3 is on board satellite_1, instrument_1 supports spectrograph_mode_3, the calibration target of instrument_12 is ground_station_1, the calibration target of instrument_10 is ground_station_1, instrument_10 is on board satellite_2, instrument_16 is on board satellite_3, instrument_9 supports image_mode_0, instrument_16 supports image_mode_1, the calibration target of instrument_17 is star_5, satellite_4 is power-available, satellite_2 is pointing to star_4, the calibration target of instrument_10 is star_5, instrument_5 supports spectrograph_mode_3, satellite_3 is power-available, instrument_1 supports image_mode_1, instrument_16 supports spectrograph_mode_3, instrument_10 supports image_mode_0, satellite_2 is power-available, the calibration target of instrument_7 is star_4, the calibration target of instrument_7 is star_3, instrument_16 supports image_mode_2, the calibration target of instrument_4 is star_0, instrument_12 supports image_mode_0, the calibration target of instrument_15 is star_3, the calibration target of instrument_13 is star_0, the calibration target of instrument_13 is star_4, instrument_7 is on board satellite_2, instrument_12 is on board satellite_3, the calibration target of instrument_16 is star_5, instrument_4 is on board satellite_1, instrument_10 supports image_mode_2, the calibration target of instrument_8 is star_5, instrument_11 is on board satellite_3, the calibration target of instrument_1 is star_4, instrument_11 supports image_mode_1, instrument_2 is on board satellite_1, instrument_2 supports spectrograph_mode_3, satellite_1 is pointing to ground_station_2, instrument_13 supports image_mode_2, the calibration target of instrument_9 is star_4, instrument_14 supports image_mode_2, satellite_1 is power-available.My goal is to have that star_7 has image in image_mode_2, satellite_0 is pointing to ground_station_1, phenomenon_8 has image in image_mode_0, star_9 has image in image_mode_2, star_10 has image in image_mode_2, satellite_4 is pointing to star_9, satellite_2 is pointing to ground_station_2, star_11 has image in image_mode_1, phenomenon_6 has image in image_mode_2.My plan is as follows:\n<PLAN>\n <PRECON> An instrument_11 can be switched on on a satellite_3 only if the instrument_11 is on board the satellite_3. An instrument_11 can be switched on on a satellite_3 only if the instrument_11 is power-available. </PRECON> switch on instrument_11 on satellite_3 <EFFECT> Once the instrument_11 is switched on on a satellite_3, the instrument_11 is power-on. Once the instrument_11 is switched on on a satellite_3, the instrument_11 is no longer power-available. Once the instrument_11 is switched on on a satellite_3, the instrument_11 becomes not calibrated. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new star_9 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from star_9 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new star_9, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new star_9. </EFFECT> WRONG \n <PRECON> A satellite_4 can be turned from a previous star_11 to a new star_9 only if the satellite_4 is currently pointing to the previous star_11. </PRECON> turn satellite_4 from star_9 to star_11 <EFFECT> Once the satellite_4 is turned to a new star_9, the satellite_4 is no longer pointing to the previous star_11 but is pointing to the new star_9. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous phenomenon_6 to a new star_11 only if the satellite_3 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_3 from star_11 to phenomenon_6 <EFFECT> Once the satellite_3 is turned to a new star_11, the satellite_3 is no longer pointing to the previous phenomenon_6 but is pointing to the new star_11. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_4 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_4. </PRECON> turn satellite_2 from ground_station_2 to star_4 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_4 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous ground_station_2 to a new phenomenon_8 only if the satellite_1 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_1 from phenomenon_8 to ground_station_2 <EFFECT> Once the satellite_1 is turned to a new phenomenon_8, the satellite_1 is no longer pointing to the previous ground_station_2 but is pointing to the new phenomenon_8. </EFFECT> \n <PRECON> An instrument_2 can be switched on on a satellite_1 only if the instrument_2 is on board the satellite_1. An instrument_2 can be switched on on a satellite_1 only if the instrument_2 is power-available. </PRECON> switch on instrument_2 on satellite_1 <EFFECT> Once the instrument_2 is switched on on a satellite_1, the instrument_2 is power-on. Once the instrument_2 is switched on on a satellite_1, the instrument_2 is no longer power-available. Once the instrument_2 is switched on on a satellite_1, the instrument_2 becomes not calibrated. </EFFECT> \n <PRECON> An instrument_7 can be switched on on a satellite_2 only if the instrument_7 is on board the satellite_2. An instrument_7 can be switched on on a satellite_2 only if the instrument_7 is power-available. </PRECON> switch on instrument_7 on satellite_2 <EFFECT> Once the instrument_7 is switched on on a satellite_2, the instrument_7 is power-on. Once the instrument_7 is switched on on a satellite_2, the instrument_7 is no longer power-available. Once the instrument_7 is switched on on a satellite_2, the instrument_7 becomes not calibrated. </EFFECT> \n <PRECON> A satellite_0 can be turned from a previous phenomenon_6 to a new ground_station_1 only if the satellite_0 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_0 from ground_station_1 to phenomenon_6 <EFFECT> Once the satellite_0 is turned to a new ground_station_1, the satellite_0 is no longer pointing to the previous phenomenon_6 but is pointing to the new ground_station_1. </EFFECT> \n <PRECON> A satellite_3 can be turned from a previous star_11 to a new star_5 only if the satellite_3 is currently pointing to the previous star_11. </PRECON> turn satellite_3 from star_5 to star_11 <EFFECT> Once the satellite_3 is turned to a new star_5, the satellite_3 is no longer pointing to the previous star_11 but is pointing to the new star_5. </EFFECT> \n <PRECON> An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is pointing to the calibration target star_5. An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is power-on. An instrument_11 can be calibrated on a satellite_3 only if the instrument_11 is on board the satellite_3. </PRECON> calibrate instrument_11 on satellite_3 pointing to calibration target star_5 <EFFECT> Once the instrument_11 is calibrated on a satellite_3, the instrument_11 is calibrated. </EFFECT> \n <PRECON> An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_9. </PRECON> take image of star_9 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_9 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_3 can be turned from a previous star_5 to a new star_11 only if the satellite_3 is currently pointing to the previous star_5. </PRECON> turn satellite_3 from star_11 to star_5 <EFFECT> Once the satellite_3 is turned to a new star_11, the satellite_3 is no longer pointing to the previous star_5 but is pointing to the new star_11. </EFFECT> \n <PRECON> An image of a direction star_11 with a specific image_mode_1 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is power-on. An image of a direction star_11 with a specific image_mode_1 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is on board the satellite_3. An image of a direction star_11 with a specific image_mode_1 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 is calibrated. An image of a direction star_11 with a specific image_mode_1 can be taken using an instrument_11 on a satellite_3 only if the instrument_11 supports the image_mode_1. An image of a direction star_11 with a specific image_mode_1 can be taken using an instrument_11 on a satellite_3 only if the satellite_3 is pointing to the direction star_11. </PRECON> take image of star_11 using instrument_11 on satellite_3 with image_mode_1 <EFFECT> Once an image of a direction star_11 with a specific image_mode_1 is taken using an instrument_11 on a satellite_3, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new star_4 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from star_4 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new star_4, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new star_4. </EFFECT> \n <PRECON> An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_7. </PRECON> take image of star_7 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_7 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> WRONG \n <PRECON> An instrument_7 can be calibrated on a satellite_2 only if the instrument_7 is pointing to the calibration target star_4. An instrument_7 can be calibrated on a satellite_2 only if the instrument_7 is power-on. An instrument_7 can be calibrated on a satellite_2 only if the instrument_7 is on board the satellite_2. </PRECON> calibrate instrument_7 on satellite_2 pointing to calibration target star_4 <EFFECT> Once the instrument_7 is calibrated on a satellite_2, the instrument_7 is calibrated. </EFFECT> \n <PRECON> An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_7. </PRECON> take image of star_7 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_7 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous star_4 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_4. </PRECON> turn satellite_2 from ground_station_2 to star_4 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_4 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new phenomenon_6 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from phenomenon_6 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new phenomenon_6, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new phenomenon_6. </EFFECT> \n <PRECON> An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_10. </PRECON> take image of star_10 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_10 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_1 can be turned from a previous star_5 to a new phenomenon_8 only if the satellite_1 is currently pointing to the previous star_5. </PRECON> turn satellite_1 from phenomenon_8 to star_5 <EFFECT> Once the satellite_1 is turned to a new phenomenon_8, the satellite_1 is no longer pointing to the previous star_5 but is pointing to the new phenomenon_8. </EFFECT> WRONG \n <PRECON> An image of a direction phenomenon_6 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction phenomenon_6 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction phenomenon_6 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction phenomenon_6 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction phenomenon_6 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction phenomenon_6. </PRECON> take image of phenomenon_6 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction phenomenon_6 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous phenomenon_6 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous phenomenon_6. </PRECON> turn satellite_2 from ground_station_2 to phenomenon_6 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous phenomenon_6 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new star_10 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from star_10 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new star_10, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new star_10. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_8 to a new star_5 only if the satellite_1 is currently pointing to the previous phenomenon_8. </PRECON> turn satellite_1 from star_5 to phenomenon_8 <EFFECT> Once the satellite_1 is turned to a new star_5, the satellite_1 is no longer pointing to the previous phenomenon_8 but is pointing to the new star_5. </EFFECT> WRONG \n <PRECON> An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_10 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_10. </PRECON> take image of star_10 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_10 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_10 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_10. </PRECON> turn satellite_2 from ground_station_2 to star_10 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_10 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_7 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_7. </PRECON> turn satellite_2 from ground_station_2 to star_7 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_7 but is pointing to the new ground_station_2. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new star_7 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from star_7 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new star_7, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new star_7. </EFFECT> \n <PRECON> An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_7 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_7. </PRECON> take image of star_7 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_7 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_8 to a new star_5 only if the satellite_1 is currently pointing to the previous phenomenon_8. </PRECON> turn satellite_1 from star_5 to phenomenon_8 <EFFECT> Once the satellite_1 is turned to a new star_5, the satellite_1 is no longer pointing to the previous phenomenon_8 but is pointing to the new star_5. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous star_7 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_7. </PRECON> turn satellite_2 from ground_station_2 to star_7 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_7 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_2 to a new star_9 only if the satellite_2 is currently pointing to the previous ground_station_2. </PRECON> turn satellite_2 from star_9 to ground_station_2 <EFFECT> Once the satellite_2 is turned to a new star_9, the satellite_2 is no longer pointing to the previous ground_station_2 but is pointing to the new star_9. </EFFECT> \n <PRECON> An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is power-on. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is on board the satellite_2. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 is calibrated. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the instrument_7 supports the image_mode_2. An image of a direction star_9 with a specific image_mode_2 can be taken using an instrument_7 on a satellite_2 only if the satellite_2 is pointing to the direction star_9. </PRECON> take image of star_9 using instrument_7 on satellite_2 with image_mode_2 <EFFECT> Once an image of a direction star_9 with a specific image_mode_2 is taken using an instrument_7 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is pointing to the calibration target star_5. An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is power-on. An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is on board the satellite_1. </PRECON> calibrate instrument_2 on satellite_1 pointing to calibration target star_5 <EFFECT> Once the instrument_2 is calibrated on a satellite_1, the instrument_2 is calibrated. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous star_9 to a new ground_station_2 only if the satellite_2 is currently pointing to the previous star_9. </PRECON> turn satellite_2 from ground_station_2 to star_9 <EFFECT> Once the satellite_2 is turned to a new ground_station_2, the satellite_2 is no longer pointing to the previous star_9 but is pointing to the new ground_station_2. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous phenomenon_8 to a new star_5 only if the satellite_1 is currently pointing to the previous phenomenon_8. </PRECON> turn satellite_1 from star_5 to phenomenon_8 <EFFECT> Once the satellite_1 is turned to a new star_5, the satellite_1 is no longer pointing to the previous phenomenon_8 but is pointing to the new star_5. </EFFECT> \n <PRECON> An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is pointing to the calibration target star_5. An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is power-on. An instrument_2 can be calibrated on a satellite_1 only if the instrument_2 is on board the satellite_1. </PRECON> calibrate instrument_2 on satellite_1 pointing to calibration target star_5 <EFFECT> Once the instrument_2 is calibrated on a satellite_1, the instrument_2 is calibrated. </EFFECT> \n <PRECON> A satellite_1 can be turned from a previous star_5 to a new phenomenon_8 only if the satellite_1 is currently pointing to the previous star_5. </PRECON> turn satellite_1 from phenomenon_8 to star_5 <EFFECT> Once the satellite_1 is turned to a new phenomenon_8, the satellite_1 is no longer pointing to the previous star_5 but is pointing to the new phenomenon_8. </EFFECT> \n <PRECON> An image of a direction phenomenon_8 with a specific image_mode_0 can be taken using an instrument_2 on a satellite_1 only if the instrument_2 is power-on. An image of a direction phenomenon_8 with a specific image_mode_0 can be taken using an instrument_2 on a satellite_1 only if the instrument_2 is on board the satellite_1. An image of a direction phenomenon_8 with a specific image_mode_0 can be taken using an instrument_2 on a satellite_1 only if the instrument_2 is calibrated. An image of a direction phenomenon_8 with a specific image_mode_0 can be taken using an instrument_2 on a satellite_1 only if the instrument_2 supports the image_mode_0. An image of a direction phenomenon_8 with a specific image_mode_0 can be taken using an instrument_2 on a satellite_1 only if the satellite_1 is pointing to the direction phenomenon_8. </PRECON> take image of phenomenon_8 using instrument_2 on satellite_1 with image_mode_0 <EFFECT> Once an image of a direction phenomenon_8 with a specific image_mode_0 is taken using an instrument_2 on a satellite_1, we will have the image. </EFFECT> \n</PLAN>"}
{"domain": "satellite", "instance_id": "120", "prompt_id": 0, "mistake_rate": 0.2, "instruction": "I have to plan the operations of satellites in space. These satellites are equipped with various instruments that can be used to take images of different directions in space using specific modes. The satellites can be turned, their instruments can be switched on and off, calibrated, and used to take images.\nHere are the actions that can be performed:\nTurn a satellite to a direction.\nSwitch on an instrument on a satellite.\nSwitch off an instrument on a satellite.\nCalibrate an instrument on a satellite by pointing it to a calibration target.\nTake an image of a direction using an instrument with a specific mode.\nThe following are the restrictions on the actions:\nA satellite can be turned from a previous direction to a new direction only if the satellite is currently pointing to the previous direction.\nOnce the satellite is turned to a new direction, the satellite is no longer pointing to the previous direction but is pointing to the new direction.\nAn instrument can be switched on on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched on on a satellite only if the instrument is power-available.\nOnce the instrument is switched on on a satellite, the instrument is power-on.\nOnce the instrument is switched on on a satellite, the instrument is no longer power-available.\nOnce the instrument is switched on on a satellite, the instrument becomes not calibrated.\nAn instrument can be switched off on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched off on a satellite only if the instrument is power-on.\nOnce the instrument is switched off on a satellite, the instrument is power-available.\nOnce the instrument is switched off on a satellite, the instrument is no longer power-on.\nAn instrument can be calibrated on a satellite only if the instrument is on board the satellite.\nAn instrument can be calibrated on a satellite only if the instrument is power-on.\nAn instrument can be calibrated on a satellite only if the instrument is pointing to the calibration target.\nOnce the instrument is calibrated on a satellite, the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is on board the satellite.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is power-on.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the satellite is pointing to the direction.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument supports the mode.\nOnce an image of a direction with a specific mode is taken using an instrument on a satellite, we will have the image.", "input": "As initial conditions I have that, instrument_9 supports image_mode_1, the calibration target of instrument_2 is star_4, instrument_4 supports image_mode_0, instrument_10 supports image_mode_1, instrument_0 is on board satellite_0, instrument_1 supports image_mode_1, instrument_6 supports image_mode_1, the calibration target of instrument_5 is ground_station_1, the calibration target of instrument_8 is ground_station_3, instrument_8 supports image_mode_1, instrument_2 supports image_mode_1, satellite_2 is pointing to planet_7, the calibration target of instrument_2 is ground_station_3, instrument_5 is on board satellite_1, instrument_7 supports image_mode_1, instrument_5 supports image_mode_0, instrument_8 supports image_mode_0, instrument_7 is on board satellite_1, the calibration target of instrument_3 is star_0, satellite_1 is pointing to star_8, instrument_1 supports image_mode_0, instrument_2 is on board satellite_1, instrument_7 supports image_mode_0, the calibration target of instrument_4 is ground_station_3, instrument_4 supports image_mode_1, instrument_4 is on board satellite_1, the calibration target of instrument_9 is star_4, instrument_3 is on board satellite_1, the calibration target of instrument_5 is ground_station_2, satellite_1 is power-available, instrument_1 is on board satellite_0, the calibration target of instrument_1 is star_6, satellite_0 is pointing to planet_7, instrument_3 supports image_mode_1, the calibration target of instrument_6 is star_5, instrument_10 supports image_mode_0, the calibration target of instrument_9 is star_5, the calibration target of instrument_10 is ground_station_3, the calibration target of instrument_0 is star_6, instrument_6 supports image_mode_0, the calibration target of instrument_7 is ground_station_1, instrument_6 is on board satellite_1, instrument_9 is on board satellite_2, satellite_0 is power-available, instrument_0 supports image_mode_0, instrument_3 supports image_mode_0, instrument_8 is on board satellite_2, satellite_2 is power-available, the calibration target of instrument_10 is ground_station_2, instrument_9 supports image_mode_0, instrument_10 is on board satellite_2.\nMy goal is to have that planet_9 has image in image_mode_1, star_13 has image in image_mode_0, planet_11 has image in image_mode_1, phenomenon_10 has image in image_mode_1, planet_14 has image in image_mode_1, star_12 has image in image_mode_1, satellite_2 is pointing to planet_14, planet_7 has image in image_mode_0, star_8 has image in image_mode_0.", "output": "My plan is as follows:\n<PLAN>\n <PRECON> An instrument_10 can be switched on on a satellite_2 only if the instrument_10 is on board the satellite_2. An instrument_10 can be switched on on a satellite_2 only if the instrument_10 is power-available. </PRECON> switch on instrument_10 on satellite_2 <EFFECT> Once the instrument_10 is switched on on a satellite_2, the instrument_10 is power-on. Once the instrument_10 is switched on on a satellite_2, the instrument_10 is no longer power-available. Once the instrument_10 is switched on on a satellite_2, the instrument_10 becomes not calibrated. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_7 to a new planet_14 only if the satellite_2 is currently pointing to the previous planet_7. </PRECON> turn satellite_2 from planet_14 to planet_7 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous planet_7 but is pointing to the new planet_14. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous planet_7 to a new ground_station_3 only if the satellite_2 is currently pointing to the previous planet_7. </PRECON> turn satellite_2 from ground_station_3 to planet_7 <EFFECT> Once the satellite_2 is turned to a new ground_station_3, the satellite_2 is no longer pointing to the previous planet_7 but is pointing to the new ground_station_3. </EFFECT> \n <PRECON> An instrument_10 can be calibrated on a satellite_2 only if the instrument_10 is pointing to the calibration target ground_station_3. An instrument_10 can be calibrated on a satellite_2 only if the instrument_10 is power-on. An instrument_10 can be calibrated on a satellite_2 only if the instrument_10 is on board the satellite_2. </PRECON> calibrate instrument_10 on satellite_2 pointing to calibration target ground_station_3 <EFFECT> Once the instrument_10 is calibrated on a satellite_2, the instrument_10 is calibrated. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_3 to a new phenomenon_10 only if the satellite_2 is currently pointing to the previous ground_station_3. </PRECON> turn satellite_2 from phenomenon_10 to ground_station_3 <EFFECT> Once the satellite_2 is turned to a new phenomenon_10, the satellite_2 is no longer pointing to the previous ground_station_3 but is pointing to the new phenomenon_10. </EFFECT> \n <PRECON> An image of a direction phenomenon_10 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction phenomenon_10 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction phenomenon_10 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction phenomenon_10. An image of a direction phenomenon_10 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_1. An image of a direction phenomenon_10 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of phenomenon_10 using instrument_10 on satellite_2 with image_mode_1 <EFFECT> Once an image of a direction phenomenon_10 with a specific image_mode_1 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous phenomenon_10 to a new planet_11 only if the satellite_2 is currently pointing to the previous phenomenon_10. </PRECON> turn satellite_2 from planet_11 to phenomenon_10 <EFFECT> Once the satellite_2 is turned to a new planet_11, the satellite_2 is no longer pointing to the previous phenomenon_10 but is pointing to the new planet_11. </EFFECT> \n <PRECON> An image of a direction planet_11 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction planet_11 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction planet_11 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction planet_11. An image of a direction planet_11 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_1. An image of a direction planet_11 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of planet_11 using instrument_10 on satellite_2 with image_mode_1 <EFFECT> Once an image of a direction planet_11 with a specific image_mode_1 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_11 to a new planet_14 only if the satellite_2 is currently pointing to the previous planet_11. </PRECON> turn satellite_2 from planet_14 to planet_11 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous planet_11 but is pointing to the new planet_14. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_8 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_8 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_8, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_8. </EFFECT> WRONG \n <PRECON> An image of a direction planet_14 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction planet_14 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction planet_14 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction planet_14. An image of a direction planet_14 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_1. An image of a direction planet_14 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of planet_14 using instrument_10 on satellite_2 with image_mode_1 <EFFECT> Once an image of a direction planet_14 with a specific image_mode_1 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new planet_9 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from planet_9 to planet_14 <EFFECT> Once the satellite_2 is turned to a new planet_9, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new planet_9. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_13 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_13 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_13, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_13. </EFFECT> WRONG \n <PRECON> An image of a direction planet_9 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction planet_9 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction planet_9 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction planet_9. An image of a direction planet_9 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_1. An image of a direction planet_9 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of planet_9 using instrument_10 on satellite_2 with image_mode_1 <EFFECT> Once an image of a direction planet_9 with a specific image_mode_1 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new planet_7 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from planet_7 to planet_14 <EFFECT> Once the satellite_2 is turned to a new planet_7, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new planet_7. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous planet_9 to a new planet_14 only if the satellite_2 is currently pointing to the previous planet_9. </PRECON> turn satellite_2 from planet_14 to planet_9 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous planet_9 but is pointing to the new planet_14. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_12 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_12 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_12, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_12. </EFFECT> \n <PRECON> An image of a direction star_12 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction star_12 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction star_12 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction star_12. An image of a direction star_12 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_1. An image of a direction star_12 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of star_12 using instrument_10 on satellite_2 with image_mode_1 <EFFECT> Once an image of a direction star_12 with a specific image_mode_1 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_7 to a new planet_14 only if the satellite_2 is currently pointing to the previous planet_7. </PRECON> turn satellite_2 from planet_14 to planet_7 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous planet_7 but is pointing to the new planet_14. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous star_12 to a new planet_14 only if the satellite_2 is currently pointing to the previous star_12. </PRECON> turn satellite_2 from planet_14 to star_12 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous star_12 but is pointing to the new planet_14. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_13 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_13 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_13, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_13. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_8 to a new planet_14 only if the satellite_2 is currently pointing to the previous star_8. </PRECON> turn satellite_2 from planet_14 to star_8 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous star_8 but is pointing to the new planet_14. </EFFECT> WRONG \n <PRECON> An image of a direction star_13 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction star_13 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction star_13 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction star_13. An image of a direction star_13 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_0. An image of a direction star_13 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of star_13 using instrument_10 on satellite_2 with image_mode_0 <EFFECT> Once an image of a direction star_13 with a specific image_mode_0 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_13 to a new planet_14 only if the satellite_2 is currently pointing to the previous star_13. </PRECON> turn satellite_2 from planet_14 to star_13 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous star_13 but is pointing to the new planet_14. </EFFECT> \n <PRECON> An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction planet_7. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_0. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of planet_7 using instrument_10 on satellite_2 with image_mode_0 <EFFECT> Once an image of a direction planet_7 with a specific image_mode_0 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_8 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_8 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_8, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_8. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new planet_7 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from planet_7 to planet_14 <EFFECT> Once the satellite_2 is turned to a new planet_7, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new planet_7. </EFFECT> \n <PRECON> An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction planet_7. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_0. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of planet_7 using instrument_10 on satellite_2 with image_mode_0 <EFFECT> Once an image of a direction planet_7 with a specific image_mode_0 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_7 to a new planet_14 only if the satellite_2 is currently pointing to the previous planet_7. </PRECON> turn satellite_2 from planet_14 to planet_7 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous planet_7 but is pointing to the new planet_14. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_8 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_8 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_8, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_8. </EFFECT> \n <PRECON> An image of a direction star_8 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction star_8 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction star_8 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction star_8. An image of a direction star_8 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_0. An image of a direction star_8 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of star_8 using instrument_10 on satellite_2 with image_mode_0 <EFFECT> Once an image of a direction star_8 with a specific image_mode_0 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_8 to a new planet_14 only if the satellite_2 is currently pointing to the previous star_8. </PRECON> turn satellite_2 from planet_14 to star_8 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous star_8 but is pointing to the new planet_14. </EFFECT> \n</PLAN>", "plan_length": 24, "raw_plan": ["(switch_on instrument10 satellite2)", "(turn_to satellite2 groundstation3 planet7)", "(calibrate satellite2 instrument10 groundstation3)", "(turn_to satellite2 phenomenon10 groundstation3)", "(take_image satellite2 phenomenon10 instrument10 image1)", "(turn_to satellite2 planet11 phenomenon10)", "(take_image satellite2 planet11 instrument10 image1)", "(turn_to satellite2 planet14 planet11)", "(take_image satellite2 planet14 instrument10 image1)", "(turn_to satellite2 planet9 planet14)", "(take_image satellite2 planet9 instrument10 image1)", "(turn_to satellite2 planet14 planet9)", "(turn_to satellite2 star12 planet14)", "(take_image satellite2 star12 instrument10 image1)", "(turn_to satellite2 planet14 star12)", "(turn_to satellite2 star13 planet14)", "(take_image satellite2 star13 instrument10 image0)", "(turn_to satellite2 planet14 star13)", "(turn_to satellite2 planet7 planet14)", "(take_image satellite2 planet7 instrument10 image0)", "(turn_to satellite2 planet14 planet7)", "(turn_to satellite2 star8 planet14)", "(take_image satellite2 star8 instrument10 image0)", "(turn_to satellite2 planet14 star8)"], "full_text_prompt": "I have to plan the operations of satellites in space. These satellites are equipped with various instruments that can be used to take images of different directions in space using specific modes. The satellites can be turned, their instruments can be switched on and off, calibrated, and used to take images.\nHere are the actions that can be performed:\nTurn a satellite to a direction.\nSwitch on an instrument on a satellite.\nSwitch off an instrument on a satellite.\nCalibrate an instrument on a satellite by pointing it to a calibration target.\nTake an image of a direction using an instrument with a specific mode.\nThe following are the restrictions on the actions:\nA satellite can be turned from a previous direction to a new direction only if the satellite is currently pointing to the previous direction.\nOnce the satellite is turned to a new direction, the satellite is no longer pointing to the previous direction but is pointing to the new direction.\nAn instrument can be switched on on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched on on a satellite only if the instrument is power-available.\nOnce the instrument is switched on on a satellite, the instrument is power-on.\nOnce the instrument is switched on on a satellite, the instrument is no longer power-available.\nOnce the instrument is switched on on a satellite, the instrument becomes not calibrated.\nAn instrument can be switched off on a satellite only if the instrument is on board the satellite.\nAn instrument can be switched off on a satellite only if the instrument is power-on.\nOnce the instrument is switched off on a satellite, the instrument is power-available.\nOnce the instrument is switched off on a satellite, the instrument is no longer power-on.\nAn instrument can be calibrated on a satellite only if the instrument is on board the satellite.\nAn instrument can be calibrated on a satellite only if the instrument is power-on.\nAn instrument can be calibrated on a satellite only if the instrument is pointing to the calibration target.\nOnce the instrument is calibrated on a satellite, the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is on board the satellite.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is power-on.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument is calibrated.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the satellite is pointing to the direction.\nAn image of a direction with a specific mode can be taken using an instrument on a satellite only if the instrument supports the mode.\nOnce an image of a direction with a specific mode is taken using an instrument on a satellite, we will have the image.As initial conditions I have that, instrument_9 supports image_mode_1, the calibration target of instrument_2 is star_4, instrument_4 supports image_mode_0, instrument_10 supports image_mode_1, instrument_0 is on board satellite_0, instrument_1 supports image_mode_1, instrument_6 supports image_mode_1, the calibration target of instrument_5 is ground_station_1, the calibration target of instrument_8 is ground_station_3, instrument_8 supports image_mode_1, instrument_2 supports image_mode_1, satellite_2 is pointing to planet_7, the calibration target of instrument_2 is ground_station_3, instrument_5 is on board satellite_1, instrument_7 supports image_mode_1, instrument_5 supports image_mode_0, instrument_8 supports image_mode_0, instrument_7 is on board satellite_1, the calibration target of instrument_3 is star_0, satellite_1 is pointing to star_8, instrument_1 supports image_mode_0, instrument_2 is on board satellite_1, instrument_7 supports image_mode_0, the calibration target of instrument_4 is ground_station_3, instrument_4 supports image_mode_1, instrument_4 is on board satellite_1, the calibration target of instrument_9 is star_4, instrument_3 is on board satellite_1, the calibration target of instrument_5 is ground_station_2, satellite_1 is power-available, instrument_1 is on board satellite_0, the calibration target of instrument_1 is star_6, satellite_0 is pointing to planet_7, instrument_3 supports image_mode_1, the calibration target of instrument_6 is star_5, instrument_10 supports image_mode_0, the calibration target of instrument_9 is star_5, the calibration target of instrument_10 is ground_station_3, the calibration target of instrument_0 is star_6, instrument_6 supports image_mode_0, the calibration target of instrument_7 is ground_station_1, instrument_6 is on board satellite_1, instrument_9 is on board satellite_2, satellite_0 is power-available, instrument_0 supports image_mode_0, instrument_3 supports image_mode_0, instrument_8 is on board satellite_2, satellite_2 is power-available, the calibration target of instrument_10 is ground_station_2, instrument_9 supports image_mode_0, instrument_10 is on board satellite_2.My goal is to have that planet_9 has image in image_mode_1, star_13 has image in image_mode_0, planet_11 has image in image_mode_1, phenomenon_10 has image in image_mode_1, planet_14 has image in image_mode_1, star_12 has image in image_mode_1, satellite_2 is pointing to planet_14, planet_7 has image in image_mode_0, star_8 has image in image_mode_0.My plan is as follows:\n<PLAN>\n <PRECON> An instrument_10 can be switched on on a satellite_2 only if the instrument_10 is on board the satellite_2. An instrument_10 can be switched on on a satellite_2 only if the instrument_10 is power-available. </PRECON> switch on instrument_10 on satellite_2 <EFFECT> Once the instrument_10 is switched on on a satellite_2, the instrument_10 is power-on. Once the instrument_10 is switched on on a satellite_2, the instrument_10 is no longer power-available. Once the instrument_10 is switched on on a satellite_2, the instrument_10 becomes not calibrated. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_7 to a new planet_14 only if the satellite_2 is currently pointing to the previous planet_7. </PRECON> turn satellite_2 from planet_14 to planet_7 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous planet_7 but is pointing to the new planet_14. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous planet_7 to a new ground_station_3 only if the satellite_2 is currently pointing to the previous planet_7. </PRECON> turn satellite_2 from ground_station_3 to planet_7 <EFFECT> Once the satellite_2 is turned to a new ground_station_3, the satellite_2 is no longer pointing to the previous planet_7 but is pointing to the new ground_station_3. </EFFECT> \n <PRECON> An instrument_10 can be calibrated on a satellite_2 only if the instrument_10 is pointing to the calibration target ground_station_3. An instrument_10 can be calibrated on a satellite_2 only if the instrument_10 is power-on. An instrument_10 can be calibrated on a satellite_2 only if the instrument_10 is on board the satellite_2. </PRECON> calibrate instrument_10 on satellite_2 pointing to calibration target ground_station_3 <EFFECT> Once the instrument_10 is calibrated on a satellite_2, the instrument_10 is calibrated. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous ground_station_3 to a new phenomenon_10 only if the satellite_2 is currently pointing to the previous ground_station_3. </PRECON> turn satellite_2 from phenomenon_10 to ground_station_3 <EFFECT> Once the satellite_2 is turned to a new phenomenon_10, the satellite_2 is no longer pointing to the previous ground_station_3 but is pointing to the new phenomenon_10. </EFFECT> \n <PRECON> An image of a direction phenomenon_10 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction phenomenon_10 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction phenomenon_10 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction phenomenon_10. An image of a direction phenomenon_10 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_1. An image of a direction phenomenon_10 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of phenomenon_10 using instrument_10 on satellite_2 with image_mode_1 <EFFECT> Once an image of a direction phenomenon_10 with a specific image_mode_1 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous phenomenon_10 to a new planet_11 only if the satellite_2 is currently pointing to the previous phenomenon_10. </PRECON> turn satellite_2 from planet_11 to phenomenon_10 <EFFECT> Once the satellite_2 is turned to a new planet_11, the satellite_2 is no longer pointing to the previous phenomenon_10 but is pointing to the new planet_11. </EFFECT> \n <PRECON> An image of a direction planet_11 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction planet_11 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction planet_11 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction planet_11. An image of a direction planet_11 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_1. An image of a direction planet_11 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of planet_11 using instrument_10 on satellite_2 with image_mode_1 <EFFECT> Once an image of a direction planet_11 with a specific image_mode_1 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_11 to a new planet_14 only if the satellite_2 is currently pointing to the previous planet_11. </PRECON> turn satellite_2 from planet_14 to planet_11 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous planet_11 but is pointing to the new planet_14. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_8 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_8 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_8, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_8. </EFFECT> WRONG \n <PRECON> An image of a direction planet_14 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction planet_14 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction planet_14 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction planet_14. An image of a direction planet_14 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_1. An image of a direction planet_14 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of planet_14 using instrument_10 on satellite_2 with image_mode_1 <EFFECT> Once an image of a direction planet_14 with a specific image_mode_1 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new planet_9 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from planet_9 to planet_14 <EFFECT> Once the satellite_2 is turned to a new planet_9, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new planet_9. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_13 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_13 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_13, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_13. </EFFECT> WRONG \n <PRECON> An image of a direction planet_9 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction planet_9 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction planet_9 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction planet_9. An image of a direction planet_9 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_1. An image of a direction planet_9 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of planet_9 using instrument_10 on satellite_2 with image_mode_1 <EFFECT> Once an image of a direction planet_9 with a specific image_mode_1 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new planet_7 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from planet_7 to planet_14 <EFFECT> Once the satellite_2 is turned to a new planet_7, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new planet_7. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous planet_9 to a new planet_14 only if the satellite_2 is currently pointing to the previous planet_9. </PRECON> turn satellite_2 from planet_14 to planet_9 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous planet_9 but is pointing to the new planet_14. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_12 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_12 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_12, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_12. </EFFECT> \n <PRECON> An image of a direction star_12 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction star_12 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction star_12 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction star_12. An image of a direction star_12 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_1. An image of a direction star_12 with a specific image_mode_1 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of star_12 using instrument_10 on satellite_2 with image_mode_1 <EFFECT> Once an image of a direction star_12 with a specific image_mode_1 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_7 to a new planet_14 only if the satellite_2 is currently pointing to the previous planet_7. </PRECON> turn satellite_2 from planet_14 to planet_7 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous planet_7 but is pointing to the new planet_14. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous star_12 to a new planet_14 only if the satellite_2 is currently pointing to the previous star_12. </PRECON> turn satellite_2 from planet_14 to star_12 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous star_12 but is pointing to the new planet_14. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_13 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_13 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_13, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_13. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_8 to a new planet_14 only if the satellite_2 is currently pointing to the previous star_8. </PRECON> turn satellite_2 from planet_14 to star_8 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous star_8 but is pointing to the new planet_14. </EFFECT> WRONG \n <PRECON> An image of a direction star_13 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction star_13 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction star_13 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction star_13. An image of a direction star_13 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_0. An image of a direction star_13 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of star_13 using instrument_10 on satellite_2 with image_mode_0 <EFFECT> Once an image of a direction star_13 with a specific image_mode_0 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_13 to a new planet_14 only if the satellite_2 is currently pointing to the previous star_13. </PRECON> turn satellite_2 from planet_14 to star_13 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous star_13 but is pointing to the new planet_14. </EFFECT> \n <PRECON> An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction planet_7. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_0. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of planet_7 using instrument_10 on satellite_2 with image_mode_0 <EFFECT> Once an image of a direction planet_7 with a specific image_mode_0 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_8 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_8 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_8, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_8. </EFFECT> WRONG \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new planet_7 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from planet_7 to planet_14 <EFFECT> Once the satellite_2 is turned to a new planet_7, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new planet_7. </EFFECT> \n <PRECON> An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction planet_7. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_0. An image of a direction planet_7 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of planet_7 using instrument_10 on satellite_2 with image_mode_0 <EFFECT> Once an image of a direction planet_7 with a specific image_mode_0 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_7 to a new planet_14 only if the satellite_2 is currently pointing to the previous planet_7. </PRECON> turn satellite_2 from planet_14 to planet_7 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous planet_7 but is pointing to the new planet_14. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous planet_14 to a new star_8 only if the satellite_2 is currently pointing to the previous planet_14. </PRECON> turn satellite_2 from star_8 to planet_14 <EFFECT> Once the satellite_2 is turned to a new star_8, the satellite_2 is no longer pointing to the previous planet_14 but is pointing to the new star_8. </EFFECT> \n <PRECON> An image of a direction star_8 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is power-on. An image of a direction star_8 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is on board the satellite_2. An image of a direction star_8 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the satellite_2 is pointing to the direction star_8. An image of a direction star_8 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 supports the image_mode_0. An image of a direction star_8 with a specific image_mode_0 can be taken using an instrument_10 on a satellite_2 only if the instrument_10 is calibrated. </PRECON> take image of star_8 using instrument_10 on satellite_2 with image_mode_0 <EFFECT> Once an image of a direction star_8 with a specific image_mode_0 is taken using an instrument_10 on a satellite_2, we will have the image. </EFFECT> \n <PRECON> A satellite_2 can be turned from a previous star_8 to a new planet_14 only if the satellite_2 is currently pointing to the previous star_8. </PRECON> turn satellite_2 from planet_14 to star_8 <EFFECT> Once the satellite_2 is turned to a new planet_14, the satellite_2 is no longer pointing to the previous star_8 but is pointing to the new planet_14. </EFFECT> \n</PLAN>"}
